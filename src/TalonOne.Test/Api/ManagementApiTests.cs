/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using TalonOne.Client;
using TalonOne.Api;
using TalonOne.Model;

namespace TalonOne.Test
{
    /// <summary>
    ///  Class for testing ManagementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ManagementApiTests : IDisposable
    {
        private ManagementApi instance;

        public ManagementApiTests()
        {
            instance = new ManagementApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ManagementApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ManagementApi
            //Assert.IsType(typeof(ManagementApi), instance, "instance is a ManagementApi");
        }

        
        /// <summary>
        /// Test AddLoyaltyCardPoints
        /// </summary>
        [Fact]
        public void AddLoyaltyCardPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string loyaltyCardId = null;
            //AddLoyaltyPoints body = null;
            //instance.AddLoyaltyCardPoints(loyaltyProgramId, loyaltyCardId, body);
            
        }
        
        /// <summary>
        /// Test AddLoyaltyPoints
        /// </summary>
        [Fact]
        public void AddLoyaltyPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loyaltyProgramId = null;
            //string integrationId = null;
            //AddLoyaltyPoints body = null;
            //instance.AddLoyaltyPoints(loyaltyProgramId, integrationId, body);
            
        }
        
        /// <summary>
        /// Test CopyCampaignToApplications
        /// </summary>
        [Fact]
        public void CopyCampaignToApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //CampaignCopy body = null;
            //var response = instance.CopyCampaignToApplications(applicationId, campaignId, body);
            //Assert.IsType<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        
        /// <summary>
        /// Test CreateAccountCollection
        /// </summary>
        [Fact]
        public void CreateAccountCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewCollection body = null;
            //var response = instance.CreateAccountCollection(body);
            //Assert.IsType<Collection> (response, "response is Collection");
        }
        
        /// <summary>
        /// Test CreateAdditionalCost
        /// </summary>
        [Fact]
        public void CreateAdditionalCostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewAdditionalCost body = null;
            //var response = instance.CreateAdditionalCost(body);
            //Assert.IsType<AccountAdditionalCost> (response, "response is AccountAdditionalCost");
        }
        
        /// <summary>
        /// Test CreateAttribute
        /// </summary>
        [Fact]
        public void CreateAttributeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewAttribute body = null;
            //var response = instance.CreateAttribute(body);
            //Assert.IsType<Attribute> (response, "response is Attribute");
        }
        
        /// <summary>
        /// Test CreateCampaignFromTemplate
        /// </summary>
        [Fact]
        public void CreateCampaignFromTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //CreateTemplateCampaign body = null;
            //var response = instance.CreateCampaignFromTemplate(applicationId, body);
            //Assert.IsType<CreateTemplateCampaignResponse> (response, "response is CreateTemplateCampaignResponse");
        }
        
        /// <summary>
        /// Test CreateCollection
        /// </summary>
        [Fact]
        public void CreateCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //NewCampaignCollection body = null;
            //var response = instance.CreateCollection(applicationId, campaignId, body);
            //Assert.IsType<Collection> (response, "response is Collection");
        }
        
        /// <summary>
        /// Test CreateCoupons
        /// </summary>
        [Fact]
        public void CreateCouponsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //NewCoupons body = null;
            //string silent = null;
            //var response = instance.CreateCoupons(applicationId, campaignId, body, silent);
            //Assert.IsType<InlineResponse2007> (response, "response is InlineResponse2007");
        }
        
        /// <summary>
        /// Test CreateCouponsAsync
        /// </summary>
        [Fact]
        public void CreateCouponsAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //NewCouponCreationJob body = null;
            //var response = instance.CreateCouponsAsync(applicationId, campaignId, body);
            //Assert.IsType<AsyncCouponCreationResponse> (response, "response is AsyncCouponCreationResponse");
        }
        
        /// <summary>
        /// Test CreateCouponsForMultipleRecipients
        /// </summary>
        [Fact]
        public void CreateCouponsForMultipleRecipientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //NewCouponsForMultipleRecipients body = null;
            //string silent = null;
            //var response = instance.CreateCouponsForMultipleRecipients(applicationId, campaignId, body, silent);
            //Assert.IsType<InlineResponse2007> (response, "response is InlineResponse2007");
        }
        
        /// <summary>
        /// Test CreateNotificationWebhook
        /// </summary>
        [Fact]
        public void CreateNotificationWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //NewNotificationWebhook body = null;
            //var response = instance.CreateNotificationWebhook(applicationId, body);
            //Assert.IsType<NotificationWebhook> (response, "response is NotificationWebhook");
        }
        
        /// <summary>
        /// Test CreatePasswordRecoveryEmail
        /// </summary>
        [Fact]
        public void CreatePasswordRecoveryEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewPasswordEmail body = null;
            //var response = instance.CreatePasswordRecoveryEmail(body);
            //Assert.IsType<NewPasswordEmail> (response, "response is NewPasswordEmail");
        }
        
        /// <summary>
        /// Test CreateSession
        /// </summary>
        [Fact]
        public void CreateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoginParams body = null;
            //var response = instance.CreateSession(body);
            //Assert.IsType<Session> (response, "response is Session");
        }
        
        /// <summary>
        /// Test DeductLoyaltyCardPoints
        /// </summary>
        [Fact]
        public void DeductLoyaltyCardPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string loyaltyCardId = null;
            //DeductLoyaltyPoints body = null;
            //instance.DeductLoyaltyCardPoints(loyaltyProgramId, loyaltyCardId, body);
            
        }
        
        /// <summary>
        /// Test DeleteAccountCollection
        /// </summary>
        [Fact]
        public void DeleteAccountCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int collectionId = null;
            //instance.DeleteAccountCollection(collectionId);
            
        }
        
        /// <summary>
        /// Test DeleteCampaign
        /// </summary>
        [Fact]
        public void DeleteCampaignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //instance.DeleteCampaign(applicationId, campaignId);
            
        }
        
        /// <summary>
        /// Test DeleteCollection
        /// </summary>
        [Fact]
        public void DeleteCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //int collectionId = null;
            //instance.DeleteCollection(applicationId, campaignId, collectionId);
            
        }
        
        /// <summary>
        /// Test DeleteCoupon
        /// </summary>
        [Fact]
        public void DeleteCouponTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //string couponId = null;
            //instance.DeleteCoupon(applicationId, campaignId, couponId);
            
        }
        
        /// <summary>
        /// Test DeleteCoupons
        /// </summary>
        [Fact]
        public void DeleteCouponsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //string value = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //DateTime? startsAfter = null;
            //DateTime? startsBefore = null;
            //DateTime? expiresAfter = null;
            //DateTime? expiresBefore = null;
            //string valid = null;
            //string batchId = null;
            //string usable = null;
            //int? referralId = null;
            //string recipientIntegrationId = null;
            //bool? exactMatch = null;
            //instance.DeleteCoupons(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);
            
        }
        
        /// <summary>
        /// Test DeleteLoyaltyCard
        /// </summary>
        [Fact]
        public void DeleteLoyaltyCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string loyaltyCardId = null;
            //instance.DeleteLoyaltyCard(loyaltyProgramId, loyaltyCardId);
            
        }
        
        /// <summary>
        /// Test DeleteNotificationWebhook
        /// </summary>
        [Fact]
        public void DeleteNotificationWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int notificationWebhookId = null;
            //instance.DeleteNotificationWebhook(applicationId, notificationWebhookId);
            
        }
        
        /// <summary>
        /// Test DeleteReferral
        /// </summary>
        [Fact]
        public void DeleteReferralTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //string referralId = null;
            //instance.DeleteReferral(applicationId, campaignId, referralId);
            
        }
        
        /// <summary>
        /// Test DestroySession
        /// </summary>
        [Fact]
        public void DestroySessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DestroySession();
            
        }
        
        /// <summary>
        /// Test ExportAccountCollectionItems
        /// </summary>
        [Fact]
        public void ExportAccountCollectionItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int collectionId = null;
            //var response = instance.ExportAccountCollectionItems(collectionId);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ExportCollectionItems
        /// </summary>
        [Fact]
        public void ExportCollectionItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //int collectionId = null;
            //var response = instance.ExportCollectionItems(applicationId, campaignId, collectionId);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ExportCoupons
        /// </summary>
        [Fact]
        public void ExportCouponsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //decimal? campaignId = null;
            //string sort = null;
            //string value = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //string valid = null;
            //string usable = null;
            //int? referralId = null;
            //string recipientIntegrationId = null;
            //string batchId = null;
            //bool? exactMatch = null;
            //string dateFormat = null;
            //string campaignState = null;
            //var response = instance.ExportCoupons(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ExportCustomerSessions
        /// </summary>
        [Fact]
        public void ExportCustomerSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //string profileIntegrationId = null;
            //string dateFormat = null;
            //string customerSessionState = null;
            //var response = instance.ExportCustomerSessions(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ExportEffects
        /// </summary>
        [Fact]
        public void ExportEffectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //decimal? campaignId = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //string dateFormat = null;
            //var response = instance.ExportEffects(applicationId, campaignId, createdBefore, createdAfter, dateFormat);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ExportLoyaltyBalance
        /// </summary>
        [Fact]
        public void ExportLoyaltyBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loyaltyProgramId = null;
            //DateTime? endDate = null;
            //var response = instance.ExportLoyaltyBalance(loyaltyProgramId, endDate);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ExportLoyaltyBalances
        /// </summary>
        [Fact]
        public void ExportLoyaltyBalancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loyaltyProgramId = null;
            //DateTime? endDate = null;
            //var response = instance.ExportLoyaltyBalances(loyaltyProgramId, endDate);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ExportLoyaltyCardBalances
        /// </summary>
        [Fact]
        public void ExportLoyaltyCardBalancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //DateTime? endDate = null;
            //var response = instance.ExportLoyaltyCardBalances(loyaltyProgramId, endDate);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ExportLoyaltyCardLedger
        /// </summary>
        [Fact]
        public void ExportLoyaltyCardLedgerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string loyaltyCardId = null;
            //DateTime rangeStart = null;
            //DateTime rangeEnd = null;
            //string dateFormat = null;
            //var response = instance.ExportLoyaltyCardLedger(loyaltyProgramId, loyaltyCardId, rangeStart, rangeEnd, dateFormat);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ExportLoyaltyLedger
        /// </summary>
        [Fact]
        public void ExportLoyaltyLedgerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime rangeStart = null;
            //DateTime rangeEnd = null;
            //string loyaltyProgramId = null;
            //string integrationId = null;
            //string dateFormat = null;
            //var response = instance.ExportLoyaltyLedger(rangeStart, rangeEnd, loyaltyProgramId, integrationId, dateFormat);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ExportReferrals
        /// </summary>
        [Fact]
        public void ExportReferralsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //decimal? campaignId = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //string valid = null;
            //string usable = null;
            //string batchId = null;
            //string dateFormat = null;
            //var response = instance.ExportReferrals(applicationId, campaignId, createdBefore, createdAfter, valid, usable, batchId, dateFormat);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetAccessLogsWithoutTotalCount
        /// </summary>
        [Fact]
        public void GetAccessLogsWithoutTotalCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //DateTime rangeStart = null;
            //DateTime rangeEnd = null;
            //string path = null;
            //string method = null;
            //string status = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //var response = instance.GetAccessLogsWithoutTotalCount(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
            //Assert.IsType<InlineResponse20018> (response, "response is InlineResponse20018");
        }
        
        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Fact]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int accountId = null;
            //var response = instance.GetAccount(accountId);
            //Assert.IsType<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test GetAccountAnalytics
        /// </summary>
        [Fact]
        public void GetAccountAnalyticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int accountId = null;
            //var response = instance.GetAccountAnalytics(accountId);
            //Assert.IsType<AccountAnalytics> (response, "response is AccountAnalytics");
        }
        
        /// <summary>
        /// Test GetAccountCollection
        /// </summary>
        [Fact]
        public void GetAccountCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int collectionId = null;
            //var response = instance.GetAccountCollection(collectionId);
            //Assert.IsType<Collection> (response, "response is Collection");
        }
        
        /// <summary>
        /// Test GetAdditionalCost
        /// </summary>
        [Fact]
        public void GetAdditionalCostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int additionalCostId = null;
            //var response = instance.GetAdditionalCost(additionalCostId);
            //Assert.IsType<AccountAdditionalCost> (response, "response is AccountAdditionalCost");
        }
        
        /// <summary>
        /// Test GetAdditionalCosts
        /// </summary>
        [Fact]
        public void GetAdditionalCostsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //var response = instance.GetAdditionalCosts(pageSize, skip, sort);
            //Assert.IsType<InlineResponse20032> (response, "response is InlineResponse20032");
        }
        
        /// <summary>
        /// Test GetAllAccessLogs
        /// </summary>
        [Fact]
        public void GetAllAccessLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime rangeStart = null;
            //DateTime rangeEnd = null;
            //string path = null;
            //string method = null;
            //string status = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //var response = instance.GetAllAccessLogs(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
            //Assert.IsType<InlineResponse20019> (response, "response is InlineResponse20019");
        }
        
        /// <summary>
        /// Test GetAllRoles
        /// </summary>
        [Fact]
        public void GetAllRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllRoles();
            //Assert.IsType<InlineResponse20040> (response, "response is InlineResponse20040");
        }
        
        /// <summary>
        /// Test GetApplication
        /// </summary>
        [Fact]
        public void GetApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //var response = instance.GetApplication(applicationId);
            //Assert.IsType<Application> (response, "response is Application");
        }
        
        /// <summary>
        /// Test GetApplicationApiHealth
        /// </summary>
        [Fact]
        public void GetApplicationApiHealthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //var response = instance.GetApplicationApiHealth(applicationId);
            //Assert.IsType<ApplicationApiHealth> (response, "response is ApplicationApiHealth");
        }
        
        /// <summary>
        /// Test GetApplicationCustomer
        /// </summary>
        [Fact]
        public void GetApplicationCustomerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int customerId = null;
            //var response = instance.GetApplicationCustomer(applicationId, customerId);
            //Assert.IsType<ApplicationCustomer> (response, "response is ApplicationCustomer");
        }
        
        /// <summary>
        /// Test GetApplicationCustomerFriends
        /// </summary>
        [Fact]
        public void GetApplicationCustomerFriendsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //string integrationId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //bool? withTotalResultSize = null;
            //var response = instance.GetApplicationCustomerFriends(applicationId, integrationId, pageSize, skip, sort, withTotalResultSize);
            //Assert.IsType<InlineResponse20030> (response, "response is InlineResponse20030");
        }
        
        /// <summary>
        /// Test GetApplicationCustomers
        /// </summary>
        [Fact]
        public void GetApplicationCustomersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //string integrationId = null;
            //int? pageSize = null;
            //int? skip = null;
            //bool? withTotalResultSize = null;
            //var response = instance.GetApplicationCustomers(applicationId, integrationId, pageSize, skip, withTotalResultSize);
            //Assert.IsType<InlineResponse20021> (response, "response is InlineResponse20021");
        }
        
        /// <summary>
        /// Test GetApplicationCustomersByAttributes
        /// </summary>
        [Fact]
        public void GetApplicationCustomersByAttributesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //CustomerProfileSearchQuery body = null;
            //int? pageSize = null;
            //int? skip = null;
            //bool? withTotalResultSize = null;
            //var response = instance.GetApplicationCustomersByAttributes(applicationId, body, pageSize, skip, withTotalResultSize);
            //Assert.IsType<InlineResponse20022> (response, "response is InlineResponse20022");
        }
        
        /// <summary>
        /// Test GetApplicationEventTypes
        /// </summary>
        [Fact]
        public void GetApplicationEventTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //var response = instance.GetApplicationEventTypes(applicationId, pageSize, skip, sort);
            //Assert.IsType<InlineResponse20028> (response, "response is InlineResponse20028");
        }
        
        /// <summary>
        /// Test GetApplicationEventsWithoutTotalCount
        /// </summary>
        [Fact]
        public void GetApplicationEventsWithoutTotalCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string type = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //string session = null;
            //string profile = null;
            //string customerName = null;
            //string customerEmail = null;
            //string couponCode = null;
            //string referralCode = null;
            //string ruleQuery = null;
            //string campaignQuery = null;
            //var response = instance.GetApplicationEventsWithoutTotalCount(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
            //Assert.IsType<InlineResponse20027> (response, "response is InlineResponse20027");
        }
        
        /// <summary>
        /// Test GetApplicationSession
        /// </summary>
        [Fact]
        public void GetApplicationSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int sessionId = null;
            //var response = instance.GetApplicationSession(applicationId, sessionId);
            //Assert.IsType<ApplicationSession> (response, "response is ApplicationSession");
        }
        
        /// <summary>
        /// Test GetApplicationSessions
        /// </summary>
        [Fact]
        public void GetApplicationSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string profile = null;
            //string state = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //string coupon = null;
            //string referral = null;
            //string integrationId = null;
            //var response = instance.GetApplicationSessions(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId);
            //Assert.IsType<InlineResponse20026> (response, "response is InlineResponse20026");
        }
        
        /// <summary>
        /// Test GetApplications
        /// </summary>
        [Fact]
        public void GetApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //var response = instance.GetApplications(pageSize, skip, sort);
            //Assert.IsType<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test GetAttribute
        /// </summary>
        [Fact]
        public void GetAttributeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int attributeId = null;
            //var response = instance.GetAttribute(attributeId);
            //Assert.IsType<Attribute> (response, "response is Attribute");
        }
        
        /// <summary>
        /// Test GetAttributes
        /// </summary>
        [Fact]
        public void GetAttributesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string entity = null;
            //var response = instance.GetAttributes(pageSize, skip, sort, entity);
            //Assert.IsType<InlineResponse20031> (response, "response is InlineResponse20031");
        }
        
        /// <summary>
        /// Test GetAudiences
        /// </summary>
        [Fact]
        public void GetAudiencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //bool? withTotalResultSize = null;
            //var response = instance.GetAudiences(pageSize, skip, sort, withTotalResultSize);
            //Assert.IsType<InlineResponse20029> (response, "response is InlineResponse20029");
        }
        
        /// <summary>
        /// Test GetCampaign
        /// </summary>
        [Fact]
        public void GetCampaignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //var response = instance.GetCampaign(applicationId, campaignId);
            //Assert.IsType<Campaign> (response, "response is Campaign");
        }
        
        /// <summary>
        /// Test GetCampaignAnalytics
        /// </summary>
        [Fact]
        public void GetCampaignAnalyticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //DateTime rangeStart = null;
            //DateTime rangeEnd = null;
            //string granularity = null;
            //var response = instance.GetCampaignAnalytics(applicationId, campaignId, rangeStart, rangeEnd, granularity);
            //Assert.IsType<InlineResponse20020> (response, "response is InlineResponse20020");
        }
        
        /// <summary>
        /// Test GetCampaignByAttributes
        /// </summary>
        [Fact]
        public void GetCampaignByAttributesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //CampaignSearch body = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string campaignState = null;
            //var response = instance.GetCampaignByAttributes(applicationId, body, pageSize, skip, sort, campaignState);
            //Assert.IsType<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        
        /// <summary>
        /// Test GetCampaignTemplates
        /// </summary>
        [Fact]
        public void GetCampaignTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string state = null;
            //string name = null;
            //string tags = null;
            //int? userId = null;
            //var response = instance.GetCampaignTemplates(pageSize, skip, sort, state, name, tags, userId);
            //Assert.IsType<InlineResponse20010> (response, "response is InlineResponse20010");
        }
        
        /// <summary>
        /// Test GetCampaigns
        /// </summary>
        [Fact]
        public void GetCampaignsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string campaignState = null;
            //string name = null;
            //string tags = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //int? campaignGroupId = null;
            //int? templateId = null;
            //var response = instance.GetCampaigns(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId, templateId);
            //Assert.IsType<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        
        /// <summary>
        /// Test GetChanges
        /// </summary>
        [Fact]
        public void GetChangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //decimal? applicationId = null;
            //string entityPath = null;
            //int? userId = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //bool? withTotalResultSize = null;
            //int? managementKeyId = null;
            //bool? includeOld = null;
            //var response = instance.GetChanges(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, managementKeyId, includeOld);
            //Assert.IsType<InlineResponse20038> (response, "response is InlineResponse20038");
        }
        
        /// <summary>
        /// Test GetCollection
        /// </summary>
        [Fact]
        public void GetCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //int collectionId = null;
            //var response = instance.GetCollection(applicationId, campaignId, collectionId);
            //Assert.IsType<Collection> (response, "response is Collection");
        }
        
        /// <summary>
        /// Test GetCollectionItems
        /// </summary>
        [Fact]
        public void GetCollectionItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int collectionId = null;
            //int? pageSize = null;
            //int? skip = null;
            //var response = instance.GetCollectionItems(collectionId, pageSize, skip);
            //Assert.IsType<InlineResponse20016> (response, "response is InlineResponse20016");
        }
        
        /// <summary>
        /// Test GetCouponsWithoutTotalCount
        /// </summary>
        [Fact]
        public void GetCouponsWithoutTotalCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string value = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //string valid = null;
            //string usable = null;
            //int? referralId = null;
            //string recipientIntegrationId = null;
            //string batchId = null;
            //bool? exactMatch = null;
            //var response = instance.GetCouponsWithoutTotalCount(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);
            //Assert.IsType<InlineResponse2008> (response, "response is InlineResponse2008");
        }
        
        /// <summary>
        /// Test GetCustomerActivityReport
        /// </summary>
        [Fact]
        public void GetCustomerActivityReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime rangeStart = null;
            //DateTime rangeEnd = null;
            //int applicationId = null;
            //int customerId = null;
            //int? pageSize = null;
            //int? skip = null;
            //var response = instance.GetCustomerActivityReport(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);
            //Assert.IsType<CustomerActivityReport> (response, "response is CustomerActivityReport");
        }
        
        /// <summary>
        /// Test GetCustomerActivityReportsWithoutTotalCount
        /// </summary>
        [Fact]
        public void GetCustomerActivityReportsWithoutTotalCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime rangeStart = null;
            //DateTime rangeEnd = null;
            //int applicationId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string name = null;
            //string integrationId = null;
            //string campaignName = null;
            //string advocateName = null;
            //var response = instance.GetCustomerActivityReportsWithoutTotalCount(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
            //Assert.IsType<InlineResponse20025> (response, "response is InlineResponse20025");
        }
        
        /// <summary>
        /// Test GetCustomerAnalytics
        /// </summary>
        [Fact]
        public void GetCustomerAnalyticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int customerId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //var response = instance.GetCustomerAnalytics(applicationId, customerId, pageSize, skip, sort);
            //Assert.IsType<CustomerAnalytics> (response, "response is CustomerAnalytics");
        }
        
        /// <summary>
        /// Test GetCustomerProfile
        /// </summary>
        [Fact]
        public void GetCustomerProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int customerId = null;
            //var response = instance.GetCustomerProfile(customerId);
            //Assert.IsType<CustomerProfile> (response, "response is CustomerProfile");
        }
        
        /// <summary>
        /// Test GetCustomerProfiles
        /// </summary>
        [Fact]
        public void GetCustomerProfilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //bool? sandbox = null;
            //var response = instance.GetCustomerProfiles(pageSize, skip, sandbox);
            //Assert.IsType<InlineResponse20024> (response, "response is InlineResponse20024");
        }
        
        /// <summary>
        /// Test GetCustomersByAttributes
        /// </summary>
        [Fact]
        public void GetCustomersByAttributesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CustomerProfileSearchQuery body = null;
            //int? pageSize = null;
            //int? skip = null;
            //bool? sandbox = null;
            //var response = instance.GetCustomersByAttributes(body, pageSize, skip, sandbox);
            //Assert.IsType<InlineResponse20023> (response, "response is InlineResponse20023");
        }
        
        /// <summary>
        /// Test GetEventTypes
        /// </summary>
        [Fact]
        public void GetEventTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //bool? includeOldVersions = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //var response = instance.GetEventTypes(name, includeOldVersions, pageSize, skip, sort);
            //Assert.IsType<InlineResponse20036> (response, "response is InlineResponse20036");
        }
        
        /// <summary>
        /// Test GetExports
        /// </summary>
        [Fact]
        public void GetExportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //decimal? applicationId = null;
            //int? campaignId = null;
            //string entity = null;
            //var response = instance.GetExports(pageSize, skip, applicationId, campaignId, entity);
            //Assert.IsType<InlineResponse20039> (response, "response is InlineResponse20039");
        }
        
        /// <summary>
        /// Test GetLoyaltyCard
        /// </summary>
        [Fact]
        public void GetLoyaltyCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string loyaltyCardId = null;
            //var response = instance.GetLoyaltyCard(loyaltyProgramId, loyaltyCardId);
            //Assert.IsType<LoyaltyCard> (response, "response is LoyaltyCard");
        }
        
        /// <summary>
        /// Test GetLoyaltyCardTransactionLogs
        /// </summary>
        [Fact]
        public void GetLoyaltyCardTransactionLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string loyaltyCardId = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //int? pageSize = null;
            //int? skip = null;
            //string subledgerId = null;
            //var response = instance.GetLoyaltyCardTransactionLogs(loyaltyProgramId, loyaltyCardId, startDate, endDate, pageSize, skip, subledgerId);
            //Assert.IsType<InlineResponse20014> (response, "response is InlineResponse20014");
        }
        
        /// <summary>
        /// Test GetLoyaltyCards
        /// </summary>
        [Fact]
        public void GetLoyaltyCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string identifier = null;
            //int? profileId = null;
            //var response = instance.GetLoyaltyCards(loyaltyProgramId, pageSize, skip, sort, identifier, profileId);
            //Assert.IsType<InlineResponse20013> (response, "response is InlineResponse20013");
        }
        
        /// <summary>
        /// Test GetLoyaltyPoints
        /// </summary>
        [Fact]
        public void GetLoyaltyPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loyaltyProgramId = null;
            //string integrationId = null;
            //var response = instance.GetLoyaltyPoints(loyaltyProgramId, integrationId);
            //Assert.IsType<LoyaltyLedger> (response, "response is LoyaltyLedger");
        }
        
        /// <summary>
        /// Test GetLoyaltyProgram
        /// </summary>
        [Fact]
        public void GetLoyaltyProgramTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //var response = instance.GetLoyaltyProgram(loyaltyProgramId);
            //Assert.IsType<LoyaltyProgram> (response, "response is LoyaltyProgram");
        }
        
        /// <summary>
        /// Test GetLoyaltyProgramTransactions
        /// </summary>
        [Fact]
        public void GetLoyaltyProgramTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string loyaltyTransactionType = null;
            //string subledgerId = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //int? pageSize = null;
            //int? skip = null;
            //var response = instance.GetLoyaltyProgramTransactions(loyaltyProgramId, loyaltyTransactionType, subledgerId, startDate, endDate, pageSize, skip);
            //Assert.IsType<InlineResponse20012> (response, "response is InlineResponse20012");
        }
        
        /// <summary>
        /// Test GetLoyaltyPrograms
        /// </summary>
        [Fact]
        public void GetLoyaltyProgramsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetLoyaltyPrograms();
            //Assert.IsType<InlineResponse20011> (response, "response is InlineResponse20011");
        }
        
        /// <summary>
        /// Test GetLoyaltyStatistics
        /// </summary>
        [Fact]
        public void GetLoyaltyStatisticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //var response = instance.GetLoyaltyStatistics(loyaltyProgramId);
            //Assert.IsType<LoyaltyStatistics> (response, "response is LoyaltyStatistics");
        }
        
        /// <summary>
        /// Test GetNotificationWebhook
        /// </summary>
        [Fact]
        public void GetNotificationWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int notificationWebhookId = null;
            //var response = instance.GetNotificationWebhook(applicationId, notificationWebhookId);
            //Assert.IsType<NotificationWebhook> (response, "response is NotificationWebhook");
        }
        
        /// <summary>
        /// Test GetNotificationWebhooks
        /// </summary>
        [Fact]
        public void GetNotificationWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //var response = instance.GetNotificationWebhooks(applicationId);
            //Assert.IsType<InlineResponse2005> (response, "response is InlineResponse2005");
        }
        
        /// <summary>
        /// Test GetReferralsWithoutTotalCount
        /// </summary>
        [Fact]
        public void GetReferralsWithoutTotalCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string code = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //string valid = null;
            //string usable = null;
            //string advocate = null;
            //var response = instance.GetReferralsWithoutTotalCount(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
            //Assert.IsType<InlineResponse2009> (response, "response is InlineResponse2009");
        }
        
        /// <summary>
        /// Test GetRole
        /// </summary>
        [Fact]
        public void GetRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int roleId = null;
            //var response = instance.GetRole(roleId);
            //Assert.IsType<Role> (response, "response is Role");
        }
        
        /// <summary>
        /// Test GetRuleset
        /// </summary>
        [Fact]
        public void GetRulesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //int rulesetId = null;
            //var response = instance.GetRuleset(applicationId, campaignId, rulesetId);
            //Assert.IsType<Ruleset> (response, "response is Ruleset");
        }
        
        /// <summary>
        /// Test GetRulesets
        /// </summary>
        [Fact]
        public void GetRulesetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //var response = instance.GetRulesets(applicationId, campaignId, pageSize, skip, sort);
            //Assert.IsType<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Fact]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int userId = null;
            //var response = instance.GetUser(userId);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Fact]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //var response = instance.GetUsers(pageSize, skip, sort);
            //Assert.IsType<InlineResponse20037> (response, "response is InlineResponse20037");
        }
        
        /// <summary>
        /// Test GetWebhook
        /// </summary>
        [Fact]
        public void GetWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int webhookId = null;
            //var response = instance.GetWebhook(webhookId);
            //Assert.IsType<Webhook> (response, "response is Webhook");
        }
        
        /// <summary>
        /// Test GetWebhookActivationLogs
        /// </summary>
        [Fact]
        public void GetWebhookActivationLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string integrationRequestUuid = null;
            //decimal? webhookId = null;
            //decimal? applicationId = null;
            //decimal? campaignId = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //var response = instance.GetWebhookActivationLogs(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);
            //Assert.IsType<InlineResponse20034> (response, "response is InlineResponse20034");
        }
        
        /// <summary>
        /// Test GetWebhookLogs
        /// </summary>
        [Fact]
        public void GetWebhookLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string status = null;
            //decimal? webhookId = null;
            //decimal? applicationId = null;
            //decimal? campaignId = null;
            //string requestUuid = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //var response = instance.GetWebhookLogs(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);
            //Assert.IsType<InlineResponse20035> (response, "response is InlineResponse20035");
        }
        
        /// <summary>
        /// Test GetWebhooks
        /// </summary>
        [Fact]
        public void GetWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationIds = null;
            //string sort = null;
            //int? pageSize = null;
            //int? skip = null;
            //var response = instance.GetWebhooks(applicationIds, sort, pageSize, skip);
            //Assert.IsType<InlineResponse20033> (response, "response is InlineResponse20033");
        }
        
        /// <summary>
        /// Test ImportAccountCollection
        /// </summary>
        [Fact]
        public void ImportAccountCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int collectionId = null;
            //string upFile = null;
            //var response = instance.ImportAccountCollection(collectionId, upFile);
            //Assert.IsType<Import> (response, "response is Import");
        }
        
        /// <summary>
        /// Test ImportAllowedList
        /// </summary>
        [Fact]
        public void ImportAllowedListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int attributeId = null;
            //string upFile = null;
            //var response = instance.ImportAllowedList(attributeId, upFile);
            //Assert.IsType<Import> (response, "response is Import");
        }
        
        /// <summary>
        /// Test ImportCollection
        /// </summary>
        [Fact]
        public void ImportCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //int collectionId = null;
            //string upFile = null;
            //var response = instance.ImportCollection(applicationId, campaignId, collectionId, upFile);
            //Assert.IsType<Import> (response, "response is Import");
        }
        
        /// <summary>
        /// Test ImportCoupons
        /// </summary>
        [Fact]
        public void ImportCouponsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //string upFile = null;
            //var response = instance.ImportCoupons(applicationId, campaignId, upFile);
            //Assert.IsType<Import> (response, "response is Import");
        }
        
        /// <summary>
        /// Test ImportLoyaltyCards
        /// </summary>
        [Fact]
        public void ImportLoyaltyCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string upFile = null;
            //var response = instance.ImportLoyaltyCards(loyaltyProgramId, upFile);
            //Assert.IsType<Import> (response, "response is Import");
        }
        
        /// <summary>
        /// Test ImportLoyaltyPoints
        /// </summary>
        [Fact]
        public void ImportLoyaltyPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string upFile = null;
            //var response = instance.ImportLoyaltyPoints(loyaltyProgramId, upFile);
            //Assert.IsType<Import> (response, "response is Import");
        }
        
        /// <summary>
        /// Test ImportPoolGiveaways
        /// </summary>
        [Fact]
        public void ImportPoolGiveawaysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int poolId = null;
            //string upFile = null;
            //var response = instance.ImportPoolGiveaways(poolId, upFile);
            //Assert.IsType<Import> (response, "response is Import");
        }
        
        /// <summary>
        /// Test ImportReferrals
        /// </summary>
        [Fact]
        public void ImportReferralsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //string upFile = null;
            //var response = instance.ImportReferrals(applicationId, campaignId, upFile);
            //Assert.IsType<Import> (response, "response is Import");
        }
        
        /// <summary>
        /// Test ListAccountCollections
        /// </summary>
        [Fact]
        public void ListAccountCollectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //bool? withTotalResultSize = null;
            //string name = null;
            //var response = instance.ListAccountCollections(pageSize, skip, sort, withTotalResultSize, name);
            //Assert.IsType<InlineResponse20015> (response, "response is InlineResponse20015");
        }
        
        /// <summary>
        /// Test ListCollections
        /// </summary>
        [Fact]
        public void ListCollectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //bool? withTotalResultSize = null;
            //string name = null;
            //var response = instance.ListCollections(applicationId, campaignId, pageSize, skip, sort, withTotalResultSize, name);
            //Assert.IsType<InlineResponse20017> (response, "response is InlineResponse20017");
        }
        
        /// <summary>
        /// Test ListCollectionsInApplication
        /// </summary>
        [Fact]
        public void ListCollectionsInApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //bool? withTotalResultSize = null;
            //string name = null;
            //var response = instance.ListCollectionsInApplication(applicationId, pageSize, skip, sort, withTotalResultSize, name);
            //Assert.IsType<InlineResponse20017> (response, "response is InlineResponse20017");
        }
        
        /// <summary>
        /// Test PostAddedDeductedPointsNotification
        /// </summary>
        [Fact]
        public void PostAddedDeductedPointsNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //NewBaseNotification body = null;
            //var response = instance.PostAddedDeductedPointsNotification(loyaltyProgramId, body);
            //Assert.IsType<BaseNotification> (response, "response is BaseNotification");
        }
        
        /// <summary>
        /// Test PostCatalogsStrikethroughNotification
        /// </summary>
        [Fact]
        public void PostCatalogsStrikethroughNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //NewBaseNotification body = null;
            //var response = instance.PostCatalogsStrikethroughNotification(applicationId, body);
            //Assert.IsType<BaseNotification> (response, "response is BaseNotification");
        }
        
        /// <summary>
        /// Test RemoveLoyaltyPoints
        /// </summary>
        [Fact]
        public void RemoveLoyaltyPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loyaltyProgramId = null;
            //string integrationId = null;
            //DeductLoyaltyPoints body = null;
            //instance.RemoveLoyaltyPoints(loyaltyProgramId, integrationId, body);
            
        }
        
        /// <summary>
        /// Test ResetPassword
        /// </summary>
        [Fact]
        public void ResetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewPassword body = null;
            //var response = instance.ResetPassword(body);
            //Assert.IsType<NewPassword> (response, "response is NewPassword");
        }
        
        /// <summary>
        /// Test SearchCouponsAdvancedApplicationWideWithoutTotalCount
        /// </summary>
        [Fact]
        public void SearchCouponsAdvancedApplicationWideWithoutTotalCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //Object body = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string value = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //string valid = null;
            //string usable = null;
            //int? referralId = null;
            //string recipientIntegrationId = null;
            //string batchId = null;
            //bool? exactMatch = null;
            //string campaignState = null;
            //var response = instance.SearchCouponsAdvancedApplicationWideWithoutTotalCount(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
            //Assert.IsType<InlineResponse2008> (response, "response is InlineResponse2008");
        }
        
        /// <summary>
        /// Test SearchCouponsAdvancedWithoutTotalCount
        /// </summary>
        [Fact]
        public void SearchCouponsAdvancedWithoutTotalCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //Object body = null;
            //int? pageSize = null;
            //int? skip = null;
            //string sort = null;
            //string value = null;
            //DateTime? createdBefore = null;
            //DateTime? createdAfter = null;
            //string valid = null;
            //string usable = null;
            //int? referralId = null;
            //string recipientIntegrationId = null;
            //bool? exactMatch = null;
            //string batchId = null;
            //var response = instance.SearchCouponsAdvancedWithoutTotalCount(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
            //Assert.IsType<InlineResponse2008> (response, "response is InlineResponse2008");
        }
        
        /// <summary>
        /// Test TransferLoyaltyCard
        /// </summary>
        [Fact]
        public void TransferLoyaltyCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string loyaltyCardId = null;
            //TransferLoyaltyCard body = null;
            //instance.TransferLoyaltyCard(loyaltyProgramId, loyaltyCardId, body);
            
        }
        
        /// <summary>
        /// Test UpdateAccountCollection
        /// </summary>
        [Fact]
        public void UpdateAccountCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int collectionId = null;
            //UpdateCollection body = null;
            //var response = instance.UpdateAccountCollection(collectionId, body);
            //Assert.IsType<Collection> (response, "response is Collection");
        }
        
        /// <summary>
        /// Test UpdateAdditionalCost
        /// </summary>
        [Fact]
        public void UpdateAdditionalCostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int additionalCostId = null;
            //NewAdditionalCost body = null;
            //var response = instance.UpdateAdditionalCost(additionalCostId, body);
            //Assert.IsType<AccountAdditionalCost> (response, "response is AccountAdditionalCost");
        }
        
        /// <summary>
        /// Test UpdateAttribute
        /// </summary>
        [Fact]
        public void UpdateAttributeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int attributeId = null;
            //NewAttribute body = null;
            //var response = instance.UpdateAttribute(attributeId, body);
            //Assert.IsType<Attribute> (response, "response is Attribute");
        }
        
        /// <summary>
        /// Test UpdateCampaign
        /// </summary>
        [Fact]
        public void UpdateCampaignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //UpdateCampaign body = null;
            //var response = instance.UpdateCampaign(applicationId, campaignId, body);
            //Assert.IsType<Campaign> (response, "response is Campaign");
        }
        
        /// <summary>
        /// Test UpdateCollection
        /// </summary>
        [Fact]
        public void UpdateCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //int collectionId = null;
            //UpdateCampaignCollection body = null;
            //var response = instance.UpdateCollection(applicationId, campaignId, collectionId, body);
            //Assert.IsType<Collection> (response, "response is Collection");
        }
        
        /// <summary>
        /// Test UpdateCoupon
        /// </summary>
        [Fact]
        public void UpdateCouponTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //string couponId = null;
            //UpdateCoupon body = null;
            //var response = instance.UpdateCoupon(applicationId, campaignId, couponId, body);
            //Assert.IsType<Coupon> (response, "response is Coupon");
        }
        
        /// <summary>
        /// Test UpdateCouponBatch
        /// </summary>
        [Fact]
        public void UpdateCouponBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //UpdateCouponBatch body = null;
            //instance.UpdateCouponBatch(applicationId, campaignId, body);
            
        }
        
        /// <summary>
        /// Test UpdateLoyaltyCard
        /// </summary>
        [Fact]
        public void UpdateLoyaltyCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loyaltyProgramId = null;
            //string loyaltyCardId = null;
            //UpdateLoyaltyCard body = null;
            //var response = instance.UpdateLoyaltyCard(loyaltyProgramId, loyaltyCardId, body);
            //Assert.IsType<LoyaltyCard> (response, "response is LoyaltyCard");
        }
        
        /// <summary>
        /// Test UpdateNotificationWebhook
        /// </summary>
        [Fact]
        public void UpdateNotificationWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int notificationWebhookId = null;
            //NewNotificationWebhook body = null;
            //var response = instance.UpdateNotificationWebhook(applicationId, notificationWebhookId, body);
            //Assert.IsType<NotificationWebhook> (response, "response is NotificationWebhook");
        }
        
        /// <summary>
        /// Test UpdateReferral
        /// </summary>
        [Fact]
        public void UpdateReferralTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int applicationId = null;
            //int campaignId = null;
            //string referralId = null;
            //UpdateReferral body = null;
            //var response = instance.UpdateReferral(applicationId, campaignId, referralId, body);
            //Assert.IsType<Referral> (response, "response is Referral");
        }
        
    }

}
