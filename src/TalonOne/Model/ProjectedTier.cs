/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// ProjectedTier
    /// </summary>
    [DataContract]
    public partial class ProjectedTier :  IEquatable<ProjectedTier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectedTier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectedTier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectedTier" /> class.
        /// </summary>
        /// <param name="projectedActivePoints">The active points of the customer when their current tier expires. (required).</param>
        /// <param name="stayInTierPoints">The number of points the customer needs to stay in the current tier.  **Note**: This is included in the response when the customer is projected to be downgraded. .</param>
        /// <param name="projectedTierName">The name of the tier the user will enter once their current tier expires..</param>
        public ProjectedTier(decimal projectedActivePoints = default(decimal), decimal stayInTierPoints = default(decimal), string projectedTierName = default(string))
        {
            this.ProjectedActivePoints = projectedActivePoints;
            this.StayInTierPoints = stayInTierPoints;
            this.ProjectedTierName = projectedTierName;
        }
        
        /// <summary>
        /// The active points of the customer when their current tier expires.
        /// </summary>
        /// <value>The active points of the customer when their current tier expires.</value>
        [DataMember(Name="projectedActivePoints", EmitDefaultValue=false)]
        public decimal ProjectedActivePoints { get; set; }

        /// <summary>
        /// The number of points the customer needs to stay in the current tier.  **Note**: This is included in the response when the customer is projected to be downgraded. 
        /// </summary>
        /// <value>The number of points the customer needs to stay in the current tier.  **Note**: This is included in the response when the customer is projected to be downgraded. </value>
        [DataMember(Name="stayInTierPoints", EmitDefaultValue=false)]
        public decimal StayInTierPoints { get; set; }

        /// <summary>
        /// The name of the tier the user will enter once their current tier expires.
        /// </summary>
        /// <value>The name of the tier the user will enter once their current tier expires.</value>
        [DataMember(Name="projectedTierName", EmitDefaultValue=false)]
        public string ProjectedTierName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectedTier {\n");
            sb.Append("  ProjectedActivePoints: ").Append(ProjectedActivePoints).Append("\n");
            sb.Append("  StayInTierPoints: ").Append(StayInTierPoints).Append("\n");
            sb.Append("  ProjectedTierName: ").Append(ProjectedTierName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectedTier);
        }

        /// <summary>
        /// Returns true if ProjectedTier instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectedTier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectedTier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProjectedActivePoints == input.ProjectedActivePoints ||
                    this.ProjectedActivePoints.Equals(input.ProjectedActivePoints)
                ) && 
                (
                    this.StayInTierPoints == input.StayInTierPoints ||
                    this.StayInTierPoints.Equals(input.StayInTierPoints)
                ) && 
                (
                    this.ProjectedTierName == input.ProjectedTierName ||
                    (this.ProjectedTierName != null &&
                    this.ProjectedTierName.Equals(input.ProjectedTierName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ProjectedActivePoints.GetHashCode();
                hashCode = hashCode * 59 + this.StayInTierPoints.GetHashCode();
                if (this.ProjectedTierName != null)
                    hashCode = hashCode * 59 + this.ProjectedTierName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
