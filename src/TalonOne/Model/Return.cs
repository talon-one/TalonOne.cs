/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Return
    /// </summary>
    [DataContract]
    public partial class Return :  IEquatable<Return>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Return" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Return() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Return" /> class.
        /// </summary>
        /// <param name="id">Unique ID for this entity. (required).</param>
        /// <param name="created">The exact moment this entity was created. (required).</param>
        /// <param name="applicationId">The ID of the application that owns this entity. (required).</param>
        /// <param name="accountId">The ID of the account that owns this entity. (required).</param>
        /// <param name="returnedCartItems">List of cart items to be returned (required).</param>
        /// <param name="eventId">The event ID of that was generated for this return. (required).</param>
        /// <param name="sessionId">The internal ID of the session this return was requested on. (required).</param>
        /// <param name="sessionIntegrationId">The integration ID of the session this return was requested on. (required).</param>
        /// <param name="profileId">The internal ID of the profile this return was requested on..</param>
        /// <param name="profileIntegrationId">The integration ID of the profile this return was requested on..</param>
        /// <param name="createdBy">ID of the user who requested this return..</param>
        public Return(int id = default(int), DateTime created = default(DateTime), int applicationId = default(int), int accountId = default(int), List<ReturnedCartItem> returnedCartItems = default(List<ReturnedCartItem>), int eventId = default(int), int sessionId = default(int), string sessionIntegrationId = default(string), int profileId = default(int), string profileIntegrationId = default(string), int createdBy = default(int))
        {
            this.Id = id;
            this.Created = created;
            this.ApplicationId = applicationId;
            this.AccountId = accountId;
            // to ensure "returnedCartItems" is required (not null)
            this.ReturnedCartItems = returnedCartItems ?? throw new ArgumentNullException("returnedCartItems is a required property for Return and cannot be null");
            this.EventId = eventId;
            this.SessionId = sessionId;
            // to ensure "sessionIntegrationId" is required (not null)
            this.SessionIntegrationId = sessionIntegrationId ?? throw new ArgumentNullException("sessionIntegrationId is a required property for Return and cannot be null");
            this.ProfileId = profileId;
            this.ProfileIntegrationId = profileIntegrationId;
            this.CreatedBy = createdBy;
        }
        
        /// <summary>
        /// Unique ID for this entity.
        /// </summary>
        /// <value>Unique ID for this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The exact moment this entity was created.
        /// </summary>
        /// <value>The exact moment this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The ID of the application that owns this entity.
        /// </summary>
        /// <value>The ID of the application that owns this entity.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int ApplicationId { get; set; }

        /// <summary>
        /// The ID of the account that owns this entity.
        /// </summary>
        /// <value>The ID of the account that owns this entity.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int AccountId { get; set; }

        /// <summary>
        /// List of cart items to be returned
        /// </summary>
        /// <value>List of cart items to be returned</value>
        [DataMember(Name="returnedCartItems", EmitDefaultValue=false)]
        public List<ReturnedCartItem> ReturnedCartItems { get; set; }

        /// <summary>
        /// The event ID of that was generated for this return.
        /// </summary>
        /// <value>The event ID of that was generated for this return.</value>
        [DataMember(Name="eventId", EmitDefaultValue=false)]
        public int EventId { get; set; }

        /// <summary>
        /// The internal ID of the session this return was requested on.
        /// </summary>
        /// <value>The internal ID of the session this return was requested on.</value>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public int SessionId { get; set; }

        /// <summary>
        /// The integration ID of the session this return was requested on.
        /// </summary>
        /// <value>The integration ID of the session this return was requested on.</value>
        [DataMember(Name="sessionIntegrationId", EmitDefaultValue=false)]
        public string SessionIntegrationId { get; set; }

        /// <summary>
        /// The internal ID of the profile this return was requested on.
        /// </summary>
        /// <value>The internal ID of the profile this return was requested on.</value>
        [DataMember(Name="profileId", EmitDefaultValue=false)]
        public int ProfileId { get; set; }

        /// <summary>
        /// The integration ID of the profile this return was requested on.
        /// </summary>
        /// <value>The integration ID of the profile this return was requested on.</value>
        [DataMember(Name="profileIntegrationId", EmitDefaultValue=false)]
        public string ProfileIntegrationId { get; set; }

        /// <summary>
        /// ID of the user who requested this return.
        /// </summary>
        /// <value>ID of the user who requested this return.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public int CreatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Return {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ReturnedCartItems: ").Append(ReturnedCartItems).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  SessionIntegrationId: ").Append(SessionIntegrationId).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ProfileIntegrationId: ").Append(ProfileIntegrationId).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Return);
        }

        /// <summary>
        /// Returns true if Return instances are equal
        /// </summary>
        /// <param name="input">Instance of Return to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Return input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    this.ApplicationId.Equals(input.ApplicationId)
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId.Equals(input.AccountId)
                ) && 
                (
                    this.ReturnedCartItems == input.ReturnedCartItems ||
                    this.ReturnedCartItems != null &&
                    input.ReturnedCartItems != null &&
                    this.ReturnedCartItems.SequenceEqual(input.ReturnedCartItems)
                ) && 
                (
                    this.EventId == input.EventId ||
                    this.EventId.Equals(input.EventId)
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    this.SessionId.Equals(input.SessionId)
                ) && 
                (
                    this.SessionIntegrationId == input.SessionIntegrationId ||
                    (this.SessionIntegrationId != null &&
                    this.SessionIntegrationId.Equals(input.SessionIntegrationId))
                ) && 
                (
                    this.ProfileId == input.ProfileId ||
                    this.ProfileId.Equals(input.ProfileId)
                ) && 
                (
                    this.ProfileIntegrationId == input.ProfileIntegrationId ||
                    (this.ProfileIntegrationId != null &&
                    this.ProfileIntegrationId.Equals(input.ProfileIntegrationId))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.ReturnedCartItems != null)
                    hashCode = hashCode * 59 + this.ReturnedCartItems.GetHashCode();
                hashCode = hashCode * 59 + this.EventId.GetHashCode();
                hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.SessionIntegrationId != null)
                    hashCode = hashCode * 59 + this.SessionIntegrationId.GetHashCode();
                hashCode = hashCode * 59 + this.ProfileId.GetHashCode();
                if (this.ProfileIntegrationId != null)
                    hashCode = hashCode * 59 + this.ProfileIntegrationId.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
