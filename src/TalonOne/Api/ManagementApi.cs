/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TalonOne.Client;
using TalonOne.Model;
using Attribute = TalonOne.Model.Attribute;

namespace TalonOne.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add points to card
        /// </summary>
        /// <remarks>
        /// Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void AddLoyaltyCardPoints (int loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body);

        /// <summary>
        /// Add points to card
        /// </summary>
        /// <remarks>
        /// Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLoyaltyCardPointsWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body);
        /// <summary>
        /// Add points to customer profile
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void AddLoyaltyPoints (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body);

        /// <summary>
        /// Add points to customer profile
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body);
        /// <summary>
        /// Copy the campaign into the specified Application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into all specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 CopyCampaignToApplications (int applicationId, int campaignId, CampaignCopy body);

        /// <summary>
        /// Copy the campaign into the specified Application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into all specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> CopyCampaignToApplicationsWithHttpInfo (int applicationId, int campaignId, CampaignCopy body);
        /// <summary>
        /// Create account-level collection
        /// </summary>
        /// <remarks>
        /// Create account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        Collection CreateAccountCollection (NewCollection body);

        /// <summary>
        /// Create account-level collection
        /// </summary>
        /// <remarks>
        /// Create account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> CreateAccountCollectionWithHttpInfo (NewCollection body);
        /// <summary>
        /// Create additional cost
        /// </summary>
        /// <remarks>
        /// Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost CreateAdditionalCost (NewAdditionalCost body);

        /// <summary>
        /// Create additional cost
        /// </summary>
        /// <remarks>
        /// Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> CreateAdditionalCostWithHttpInfo (NewAdditionalCost body);
        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Attribute</returns>
        Attribute CreateAttribute (NewAttribute body);

        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> CreateAttributeWithHttpInfo (NewAttribute body);
        /// <summary>
        /// Create campaign from campaign template
        /// </summary>
        /// <remarks>
        /// Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>CreateTemplateCampaignResponse</returns>
        CreateTemplateCampaignResponse CreateCampaignFromTemplate (int applicationId, CreateTemplateCampaign body);

        /// <summary>
        /// Create campaign from campaign template
        /// </summary>
        /// <remarks>
        /// Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of CreateTemplateCampaignResponse</returns>
        ApiResponse<CreateTemplateCampaignResponse> CreateCampaignFromTemplateWithHttpInfo (int applicationId, CreateTemplateCampaign body);
        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Create a collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        Collection CreateCollection (int applicationId, int campaignId, NewCampaignCollection body);

        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Create a collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> CreateCollectionWithHttpInfo (int applicationId, int campaignId, NewCampaignCollection body);
        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 CreateCoupons (int applicationId, int campaignId, NewCoupons body, string silent = default(string));

        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> CreateCouponsWithHttpInfo (int applicationId, int campaignId, NewCoupons body, string silent = default(string));
        /// <summary>
        /// Create coupons asynchronously
        /// </summary>
        /// <remarks>
        /// Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>AsyncCouponCreationResponse</returns>
        AsyncCouponCreationResponse CreateCouponsAsync (int applicationId, int campaignId, NewCouponCreationJob body);

        /// <summary>
        /// Create coupons asynchronously
        /// </summary>
        /// <remarks>
        /// Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AsyncCouponCreationResponse</returns>
        ApiResponse<AsyncCouponCreationResponse> CreateCouponsAsyncWithHttpInfo (int applicationId, int campaignId, NewCouponCreationJob body);
        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 CreateCouponsForMultipleRecipients (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));

        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> CreateCouponsForMultipleRecipientsWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));
        /// <summary>
        /// Create notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>NotificationWebhook</returns>
        NotificationWebhook CreateNotificationWebhook (int applicationId, NewNotificationWebhook body);

        /// <summary>
        /// Create notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NotificationWebhook</returns>
        ApiResponse<NotificationWebhook> CreateNotificationWebhookWithHttpInfo (int applicationId, NewNotificationWebhook body);
        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>NewPasswordEmail</returns>
        NewPasswordEmail CreatePasswordRecoveryEmail (NewPasswordEmail body);

        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NewPasswordEmail</returns>
        ApiResponse<NewPasswordEmail> CreatePasswordRecoveryEmailWithHttpInfo (NewPasswordEmail body);
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Session</returns>
        Session CreateSession (LoginParams body);

        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Session</returns>
        ApiResponse<Session> CreateSessionWithHttpInfo (LoginParams body);
        /// <summary>
        /// Deduct points from card
        /// </summary>
        /// <remarks>
        /// Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void DeductLoyaltyCardPoints (int loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body);

        /// <summary>
        /// Deduct points from card
        /// </summary>
        /// <remarks>
        /// Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeductLoyaltyCardPointsWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body);
        /// <summary>
        /// Delete account-level collection
        /// </summary>
        /// <remarks>
        /// Delete the given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns></returns>
        void DeleteAccountCollection (int collectionId);

        /// <summary>
        /// Delete account-level collection
        /// </summary>
        /// <remarks>
        /// Delete the given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountCollectionWithHttpInfo (int collectionId);
        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns></returns>
        void DeleteCampaign (int applicationId, int campaignId);

        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCampaignWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Delete collection
        /// </summary>
        /// <remarks>
        /// Delete the given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns></returns>
        void DeleteCollection (int applicationId, int campaignId, int collectionId);

        /// <summary>
        /// Delete collection
        /// </summary>
        /// <remarks>
        /// Delete the given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCollectionWithHttpInfo (int applicationId, int campaignId, int collectionId);
        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns></returns>
        void DeleteCoupon (int applicationId, int campaignId, string couponId);

        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponWithHttpInfo (int applicationId, int campaignId, string couponId);
        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns></returns>
        void DeleteCoupons (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponsWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Delete loyalty card
        /// </summary>
        /// <remarks>
        /// Delete the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns></returns>
        void DeleteLoyaltyCard (int loyaltyProgramId, string loyaltyCardId);

        /// <summary>
        /// Delete loyalty card
        /// </summary>
        /// <remarks>
        /// Delete the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLoyaltyCardWithHttpInfo (int loyaltyProgramId, string loyaltyCardId);
        /// <summary>
        /// Delete notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns></returns>
        void DeleteNotificationWebhook (int applicationId, int notificationWebhookId);

        /// <summary>
        /// Delete notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNotificationWebhookWithHttpInfo (int applicationId, int notificationWebhookId);
        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns></returns>
        void DeleteReferral (int applicationId, int campaignId, string referralId);

        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReferralWithHttpInfo (int applicationId, int campaignId, string referralId);
        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DestroySession ();

        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroySessionWithHttpInfo ();
        /// <summary>
        /// Export account-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>string</returns>
        string ExportAccountCollectionItems (int collectionId);

        /// <summary>
        /// Export account-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportAccountCollectionItemsWithHttpInfo (int collectionId);
        /// <summary>
        /// Export a collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a collection&#39;s items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>string</returns>
        string ExportCollectionItems (int applicationId, int campaignId, int collectionId);

        /// <summary>
        /// Export a collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a collection&#39;s items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCollectionItemsWithHttpInfo (int applicationId, int campaignId, int collectionId);
        /// <summary>
        /// Export coupons
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon is reserved. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>string</returns>
        string ExportCoupons (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));

        /// <summary>
        /// Export coupons
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon is reserved. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCouponsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));
        /// <summary>
        /// Export customer sessions
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of the session. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>string</returns>
        string ExportCustomerSessions (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));

        /// <summary>
        /// Export customer sessions
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of the session. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCustomerSessionsWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));
        /// <summary>
        /// Export triggered effects
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportEffects (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));

        /// <summary>
        /// Export triggered effects
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportEffectsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));
        /// <summary>
        /// Export customer loyalty balance to CSV
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyBalance (string loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export customer loyalty balance to CSV
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyBalanceWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export customer loyalty balances
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyBalances (string loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export customer loyalty balances
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyBalancesWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export all card transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyCardBalances (int loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export all card transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyCardBalancesWithHttpInfo (int loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export card&#39;s ledger log
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyCardLedger (int loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));

        /// <summary>
        /// Export card&#39;s ledger log
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyCardLedgerWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));
        /// <summary>
        /// Export customer&#39;s transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The type of the loyalty program. - &#x60;name&#x60;: The name of the loyalty program. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyLedger (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string));

        /// <summary>
        /// Export customer&#39;s transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The type of the loyalty program. - &#x60;name&#x60;: The name of the loyalty program. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyLedgerWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string));
        /// <summary>
        /// Export referrals
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportReferrals (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string));

        /// <summary>
        /// Export referrals
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportReferralsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string));
        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls sent to the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 GetAccessLogsWithoutTotalCount (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls sent to the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> GetAccessLogsWithoutTotalCountWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Account</returns>
        Account GetAccount (int accountId);

        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> GetAccountWithHttpInfo (int accountId);
        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>AccountAnalytics</returns>
        AccountAnalytics GetAccountAnalytics (int accountId);

        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>ApiResponse of AccountAnalytics</returns>
        ApiResponse<AccountAnalytics> GetAccountAnalyticsWithHttpInfo (int accountId);
        /// <summary>
        /// Get account-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Collection</returns>
        Collection GetAccountCollection (int collectionId);

        /// <summary>
        /// Get account-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> GetAccountCollectionWithHttpInfo (int collectionId);
        /// <summary>
        /// Get additional cost
        /// </summary>
        /// <remarks>
        /// Returns the additional cost. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost GetAdditionalCost (int additionalCostId);

        /// <summary>
        /// Get additional cost
        /// </summary>
        /// <remarks>
        /// Returns the additional cost. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> GetAdditionalCostWithHttpInfo (int additionalCostId);
        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 GetAdditionalCosts (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> GetAdditionalCostsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 GetAllAccessLogs (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> GetAllAccessLogsWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20040</returns>
        InlineResponse20040 GetAllRoles ();

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        ApiResponse<InlineResponse20040> GetAllRolesWithHttpInfo ();
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Application</returns>
        Application GetApplication (int applicationId);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> GetApplicationWithHttpInfo (int applicationId);
        /// <summary>
        /// Get Application health
        /// </summary>
        /// <remarks>
        /// Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApplicationApiHealth</returns>
        ApplicationApiHealth GetApplicationApiHealth (int applicationId);

        /// <summary>
        /// Get Application health
        /// </summary>
        /// <remarks>
        /// Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of ApplicationApiHealth</returns>
        ApiResponse<ApplicationApiHealth> GetApplicationApiHealthWithHttpInfo (int applicationId);
        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApplicationCustomer</returns>
        ApplicationCustomer GetApplicationCustomer (int applicationId, int customerId);

        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApiResponse of ApplicationCustomer</returns>
        ApiResponse<ApplicationCustomer> GetApplicationCustomerWithHttpInfo (int applicationId, int customerId);
        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20030</returns>
        InlineResponse20030 GetApplicationCustomerFriends (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        ApiResponse<InlineResponse20030> GetApplicationCustomerFriendsWithHttpInfo (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GetApplicationCustomers (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GetApplicationCustomersWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GetApplicationCustomersByAttributes (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GetApplicationCustomersByAttributesWithHttpInfo (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 GetApplicationEventTypes (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> GetApplicationEventTypesWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GetApplicationEventsWithoutTotalCount (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));

        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GetApplicationEventsWithoutTotalCountWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));
        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>ApplicationSession</returns>
        ApplicationSession GetApplicationSession (int applicationId, int sessionId);

        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>ApiResponse of ApplicationSession</returns>
        ApiResponse<ApplicationSession> GetApplicationSessionWithHttpInfo (int applicationId, int sessionId);
        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GetApplicationSessions (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));

        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GetApplicationSessionsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all applications in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetApplications (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all applications in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetApplicationsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get custom attribute
        /// </summary>
        /// <remarks>
        /// Retrieve the specified custom attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Attribute</returns>
        Attribute GetAttribute (int attributeId);

        /// <summary>
        /// Get custom attribute
        /// </summary>
        /// <remarks>
        /// Retrieve the specified custom attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> GetAttributeWithHttpInfo (int attributeId);
        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Return all the custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 GetAttributes (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));

        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Return all the custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> GetAttributesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));
        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 GetAudiences (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> GetAudiencesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Campaign</returns>
        Campaign GetCampaign (int applicationId, int campaignId);

        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> GetCampaignWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GetCampaignAnalytics (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));

        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GetCampaignAnalyticsWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));
        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetCampaignByAttributes (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));

        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetCampaignByAttributesWithHttpInfo (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));
        /// <summary>
        /// List campaign templates
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaign templates.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 GetCampaignTemplates (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), int? userId = default(int?));

        /// <summary>
        /// List campaign templates
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaign templates.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> GetCampaignTemplatesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), int? userId = default(int?));
        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List the campaigns of the specified application that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetCampaigns (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?));

        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List the campaigns of the specified application that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetCampaignsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?));
        /// <summary>
        /// Get audit logs for an account
        /// </summary>
        /// <remarks>
        /// Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>InlineResponse20038</returns>
        InlineResponse20038 GetChanges (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), int? managementKeyId = default(int?), bool? includeOld = default(bool?));

        /// <summary>
        /// Get audit logs for an account
        /// </summary>
        /// <remarks>
        /// Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        ApiResponse<InlineResponse20038> GetChangesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), int? managementKeyId = default(int?), bool? includeOld = default(bool?));
        /// <summary>
        /// Get collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Collection</returns>
        Collection GetCollection (int applicationId, int campaignId, int collectionId);

        /// <summary>
        /// Get collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> GetCollectionWithHttpInfo (int applicationId, int campaignId, int collectionId);
        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Retrieve the items from the given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 GetCollectionItems (int collectionId, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Retrieve the items from the given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> GetCollectionItemsWithHttpInfo (int collectionId, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetCouponsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetCouponsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>CustomerActivityReport</returns>
        CustomerActivityReport GetCustomerActivityReport (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of CustomerActivityReport</returns>
        ApiResponse<CustomerActivityReport> GetCustomerActivityReportWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GetCustomerActivityReportsWithoutTotalCount (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));

        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GetCustomerActivityReportsWithoutTotalCountWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));
        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>CustomerAnalytics</returns>
        CustomerAnalytics GetCustomerAnalytics (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of CustomerAnalytics</returns>
        ApiResponse<CustomerAnalytics> GetCustomerAnalyticsWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>CustomerProfile</returns>
        CustomerProfile GetCustomerProfile (int customerId);

        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApiResponse of CustomerProfile</returns>
        ApiResponse<CustomerProfile> GetCustomerProfileWithHttpInfo (int customerId);
        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GetCustomerProfiles (int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?));

        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GetCustomerProfilesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?));
        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 GetCustomersByAttributes (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?));

        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> GetCustomersByAttributesWithHttpInfo (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?));
        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 GetEventTypes (string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> GetEventTypesWithHttpInfo (string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>InlineResponse20039</returns>
        InlineResponse20039 GetExports (int? pageSize = default(int?), int? skip = default(int?), decimal? applicationId = default(decimal?), int? campaignId = default(int?), string entity = default(string));

        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        ApiResponse<InlineResponse20039> GetExportsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), decimal? applicationId = default(decimal?), int? campaignId = default(int?), string entity = default(string));
        /// <summary>
        /// Get loyalty card
        /// </summary>
        /// <remarks>
        /// Get the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>LoyaltyCard</returns>
        LoyaltyCard GetLoyaltyCard (int loyaltyProgramId, string loyaltyCardId);

        /// <summary>
        /// Get loyalty card
        /// </summary>
        /// <remarks>
        /// Get the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyCard</returns>
        ApiResponse<LoyaltyCard> GetLoyaltyCardWithHttpInfo (int loyaltyProgramId, string loyaltyCardId);
        /// <summary>
        /// List card&#39;s transactions
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 GetLoyaltyCardTransactionLogs (int loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?), string subledgerId = default(string));

        /// <summary>
        /// List card&#39;s transactions
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> GetLoyaltyCardTransactionLogsWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?), string subledgerId = default(string));
        /// <summary>
        /// List loyalty cards
        /// </summary>
        /// <remarks>
        /// For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="identifier">Optional query parameter to search cards by identifier. (optional)</param>
        /// <param name="profileId">Filter by the profile ID. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetLoyaltyCards (int loyaltyProgramId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string identifier = default(string), int? profileId = default(int?));

        /// <summary>
        /// List loyalty cards
        /// </summary>
        /// <remarks>
        /// For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="identifier">Optional query parameter to search cards by identifier. (optional)</param>
        /// <param name="profileId">Filter by the profile ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetLoyaltyCardsWithHttpInfo (int loyaltyProgramId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string identifier = default(string), int? profileId = default(int?));
        /// <summary>
        /// Get customer&#39;s full loyalty ledger
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <returns>LoyaltyLedger</returns>
        LoyaltyLedger GetLoyaltyPoints (string loyaltyProgramId, string integrationId);

        /// <summary>
        /// Get customer&#39;s full loyalty ledger
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <returns>ApiResponse of LoyaltyLedger</returns>
        ApiResponse<LoyaltyLedger> GetLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId);
        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>LoyaltyProgram</returns>
        LoyaltyProgram GetLoyaltyProgram (int loyaltyProgramId);

        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        ApiResponse<LoyaltyProgram> GetLoyaltyProgramWithHttpInfo (int loyaltyProgramId);
        /// <summary>
        /// List loyalty program transactions
        /// </summary>
        /// <remarks>
        /// Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 50)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetLoyaltyProgramTransactions (int loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List loyalty program transactions
        /// </summary>
        /// <remarks>
        /// Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 50)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetLoyaltyProgramTransactionsWithHttpInfo (int loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetLoyaltyPrograms ();

        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetLoyaltyProgramsWithHttpInfo ();
        /// <summary>
        /// Get loyalty program statistics
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>LoyaltyStatistics</returns>
        LoyaltyStatistics GetLoyaltyStatistics (int loyaltyProgramId);

        /// <summary>
        /// Get loyalty program statistics
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyStatistics</returns>
        ApiResponse<LoyaltyStatistics> GetLoyaltyStatisticsWithHttpInfo (int loyaltyProgramId);
        /// <summary>
        /// Get notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>NotificationWebhook</returns>
        NotificationWebhook GetNotificationWebhook (int applicationId, int notificationWebhookId);

        /// <summary>
        /// Get notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>ApiResponse of NotificationWebhook</returns>
        ApiResponse<NotificationWebhook> GetNotificationWebhookWithHttpInfo (int applicationId, int notificationWebhookId);
        /// <summary>
        /// List notifications about campaign-related changes
        /// </summary>
        /// <remarks>
        /// List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetNotificationWebhooks (int applicationId);

        /// <summary>
        /// List notifications about campaign-related changes
        /// </summary>
        /// <remarks>
        /// List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetNotificationWebhooksWithHttpInfo (int applicationId);
        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetReferralsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));

        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetReferralsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));
        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The Id of role. </param>
        /// <returns>Role</returns>
        Role GetRole (int roleId);

        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The Id of role. </param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleWithHttpInfo (int roleId);
        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Ruleset</returns>
        Ruleset GetRuleset (int applicationId, int campaignId, int rulesetId);

        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>ApiResponse of Ruleset</returns>
        ApiResponse<Ruleset> GetRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId);
        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetRulesets (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetRulesetsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>User</returns>
        User GetUser (int userId);

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo (int userId);
        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20037</returns>
        InlineResponse20037 GetUsers (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        ApiResponse<InlineResponse20037> GetUsersWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get webhook
        /// </summary>
        /// <remarks>
        /// Returns a webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Webhook</returns>
        Webhook GetWebhook (int webhookId);

        /// <summary>
        /// Get webhook
        /// </summary>
        /// <remarks>
        /// Returns a webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> GetWebhookWithHttpInfo (int webhookId);
        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20034</returns>
        InlineResponse20034 GetWebhookActivationLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        ApiResponse<InlineResponse20034> GetWebhookActivationLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 GetWebhookLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> GetWebhookLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application IDs separated by a comma. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 GetWebhooks (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application IDs separated by a comma. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> GetWebhooksWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Import data in existing account-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportAccountCollection (int collectionId, string upFile = default(string));

        /// <summary>
        /// Import data in existing account-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportAccountCollectionWithHttpInfo (int collectionId, string upFile = default(string));
        /// <summary>
        /// Import allowed values for attribute
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportAllowedList (int attributeId, string upFile = default(string));

        /// <summary>
        /// Import allowed values for attribute
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportAllowedListWithHttpInfo (int attributeId, string upFile = default(string));
        /// <summary>
        /// Import data in existing collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportCollection (int applicationId, int campaignId, int collectionId, string upFile = default(string));

        /// <summary>
        /// Import data in existing collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportCollectionWithHttpInfo (int applicationId, int campaignId, int collectionId, string upFile = default(string));
        /// <summary>
        /// Import coupons
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the coupon entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportCoupons (int applicationId, int campaignId, string upFile = default(string));

        /// <summary>
        /// Import coupons
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the coupon entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportCouponsWithHttpInfo (int applicationId, int campaignId, string upFile = default(string));
        /// <summary>
        /// Import loyalty cards
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportLoyaltyCards (int loyaltyProgramId, string upFile = default(string));

        /// <summary>
        /// Import loyalty cards
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportLoyaltyCardsWithHttpInfo (int loyaltyProgramId, string upFile = default(string));
        /// <summary>
        /// Import loyalty points
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60;: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are &#x60;active&#x60;. - &#x60;expirydate&#x60;: The latest date when the points can be redeemed. After this date, the points are &#x60;expired&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportLoyaltyPoints (int loyaltyProgramId, string upFile = default(string));

        /// <summary>
        /// Import loyalty points
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60;: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are &#x60;active&#x60;. - &#x60;expirydate&#x60;: The latest date when the points can be redeemed. After this date, the points are &#x60;expired&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportLoyaltyPointsWithHttpInfo (int loyaltyProgramId, string upFile = default(string));
        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated to the giveaway entity, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportPoolGiveaways (int poolId, string upFile = default(string));

        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated to the giveaway entity, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportPoolGiveawaysWithHttpInfo (int poolId, string upFile = default(string));
        /// <summary>
        /// Import referrals
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the referral entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportReferrals (int applicationId, int campaignId, string upFile = default(string));

        /// <summary>
        /// Import referrals
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the referral entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportReferralsWithHttpInfo (int applicationId, int campaignId, string upFile = default(string));
        /// <summary>
        /// List collections in account
        /// </summary>
        /// <remarks>
        /// List collections in account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 ListAccountCollections (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections in account
        /// </summary>
        /// <remarks>
        /// List collections in account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> ListAccountCollectionsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// List collections
        /// </summary>
        /// <remarks>
        /// List collections in the campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 ListCollections (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections
        /// </summary>
        /// <remarks>
        /// List collections in the campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> ListCollectionsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// List collections in application
        /// </summary>
        /// <remarks>
        /// List collections from all campaigns in the Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 ListCollectionsInApplication (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections in application
        /// </summary>
        /// <remarks>
        /// List collections from all campaigns in the Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> ListCollectionsInApplicationWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// Create notification about added or deducted loyalty points
        /// </summary>
        /// <remarks>
        /// Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>BaseNotification</returns>
        BaseNotification PostAddedDeductedPointsNotification (int loyaltyProgramId, NewBaseNotification body);

        /// <summary>
        /// Create notification about added or deducted loyalty points
        /// </summary>
        /// <remarks>
        /// Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of BaseNotification</returns>
        ApiResponse<BaseNotification> PostAddedDeductedPointsNotificationWithHttpInfo (int loyaltyProgramId, NewBaseNotification body);
        /// <summary>
        /// Create strikethrough notification
        /// </summary>
        /// <remarks>
        /// Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>BaseNotification</returns>
        BaseNotification PostCatalogsStrikethroughNotification (int applicationId, NewBaseNotification body);

        /// <summary>
        /// Create strikethrough notification
        /// </summary>
        /// <remarks>
        /// Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of BaseNotification</returns>
        ApiResponse<BaseNotification> PostCatalogsStrikethroughNotificationWithHttpInfo (int applicationId, NewBaseNotification body);
        /// <summary>
        /// Deduct points from customer profile
        /// </summary>
        /// <remarks>
        /// Deduct points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void RemoveLoyaltyPoints (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body);

        /// <summary>
        /// Deduct points from customer profile
        /// </summary>
        /// <remarks>
        /// Deduct points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body);
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>NewPassword</returns>
        NewPassword ResetPassword (NewPassword body);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NewPassword</returns>
        ApiResponse<NewPassword> ResetPasswordWithHttpInfo (NewPassword body);
        /// <summary>
        /// List coupons that match the given attributes (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 SearchCouponsAdvancedApplicationWideWithoutTotalCount (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 SearchCouponsAdvancedWithoutTotalCount (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> SearchCouponsAdvancedWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// Transfer card data
        /// </summary>
        /// <remarks>
        /// Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void TransferLoyaltyCard (int loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body);

        /// <summary>
        /// Transfer card data
        /// </summary>
        /// <remarks>
        /// Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TransferLoyaltyCardWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body);
        /// <summary>
        /// Update account-level collection
        /// </summary>
        /// <remarks>
        /// Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        Collection UpdateAccountCollection (int collectionId, UpdateCollection body);

        /// <summary>
        /// Update account-level collection
        /// </summary>
        /// <remarks>
        /// Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> UpdateAccountCollectionWithHttpInfo (int collectionId, UpdateCollection body);
        /// <summary>
        /// Update additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost UpdateAdditionalCost (int additionalCostId, NewAdditionalCost body);

        /// <summary>
        /// Update additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> UpdateAdditionalCostWithHttpInfo (int additionalCostId, NewAdditionalCost body);
        /// <summary>
        /// Update custom attribute
        /// </summary>
        /// <remarks>
        /// Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Attribute</returns>
        Attribute UpdateAttribute (int attributeId, NewAttribute body);

        /// <summary>
        /// Update custom attribute
        /// </summary>
        /// <remarks>
        /// Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> UpdateAttributeWithHttpInfo (int attributeId, NewAttribute body);
        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Campaign</returns>
        Campaign UpdateCampaign (int applicationId, int campaignId, UpdateCampaign body);

        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> UpdateCampaignWithHttpInfo (int applicationId, int campaignId, UpdateCampaign body);
        /// <summary>
        /// Update collection description
        /// </summary>
        /// <remarks>
        /// Edit the description of the collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        Collection UpdateCollection (int applicationId, int campaignId, int collectionId, UpdateCampaignCollection body);

        /// <summary>
        /// Update collection description
        /// </summary>
        /// <remarks>
        /// Edit the description of the collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> UpdateCollectionWithHttpInfo (int applicationId, int campaignId, int collectionId, UpdateCampaignCollection body);
        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this PUT endpoint only, any property you do not explicitly set in your request   will be set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Coupon</returns>
        Coupon UpdateCoupon (int applicationId, int campaignId, string couponId, UpdateCoupon body);

        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this PUT endpoint only, any property you do not explicitly set in your request   will be set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Coupon</returns>
        ApiResponse<Coupon> UpdateCouponWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon body);
        /// <summary>
        /// Update coupons
        /// </summary>
        /// <remarks>
        /// Update all coupons, or a specific batch of coupons, in a campaign. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void UpdateCouponBatch (int applicationId, int campaignId, UpdateCouponBatch body);

        /// <summary>
        /// Update coupons
        /// </summary>
        /// <remarks>
        /// Update all coupons, or a specific batch of coupons, in a campaign. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCouponBatchWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch body);
        /// <summary>
        /// Update loyalty card status
        /// </summary>
        /// <remarks>
        /// Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>LoyaltyCard</returns>
        LoyaltyCard UpdateLoyaltyCard (int loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body);

        /// <summary>
        /// Update loyalty card status
        /// </summary>
        /// <remarks>
        /// Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of LoyaltyCard</returns>
        ApiResponse<LoyaltyCard> UpdateLoyaltyCardWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body);
        /// <summary>
        /// Update notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>NotificationWebhook</returns>
        NotificationWebhook UpdateNotificationWebhook (int applicationId, int notificationWebhookId, NewNotificationWebhook body);

        /// <summary>
        /// Update notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NotificationWebhook</returns>
        ApiResponse<NotificationWebhook> UpdateNotificationWebhookWithHttpInfo (int applicationId, int notificationWebhookId, NewNotificationWebhook body);
        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Referral</returns>
        Referral UpdateReferral (int applicationId, int campaignId, string referralId, UpdateReferral body);

        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Referral</returns>
        ApiResponse<Referral> UpdateReferralWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add points to card
        /// </summary>
        /// <remarks>
        /// Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLoyaltyCardPointsAsync (int loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body);

        /// <summary>
        /// Add points to card
        /// </summary>
        /// <remarks>
        /// Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLoyaltyCardPointsAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body);
        /// <summary>
        /// Add points to customer profile
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLoyaltyPointsAsync (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body);

        /// <summary>
        /// Add points to customer profile
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body);
        /// <summary>
        /// Copy the campaign into the specified Application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into all specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> CopyCampaignToApplicationsAsync (int applicationId, int campaignId, CampaignCopy body);

        /// <summary>
        /// Copy the campaign into the specified Application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into all specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> CopyCampaignToApplicationsAsyncWithHttpInfo (int applicationId, int campaignId, CampaignCopy body);
        /// <summary>
        /// Create account-level collection
        /// </summary>
        /// <remarks>
        /// Create account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> CreateAccountCollectionAsync (NewCollection body);

        /// <summary>
        /// Create account-level collection
        /// </summary>
        /// <remarks>
        /// Create account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> CreateAccountCollectionAsyncWithHttpInfo (NewCollection body);
        /// <summary>
        /// Create additional cost
        /// </summary>
        /// <remarks>
        /// Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> CreateAdditionalCostAsync (NewAdditionalCost body);

        /// <summary>
        /// Create additional cost
        /// </summary>
        /// <remarks>
        /// Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> CreateAdditionalCostAsyncWithHttpInfo (NewAdditionalCost body);
        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> CreateAttributeAsync (NewAttribute body);

        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> CreateAttributeAsyncWithHttpInfo (NewAttribute body);
        /// <summary>
        /// Create campaign from campaign template
        /// </summary>
        /// <remarks>
        /// Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of CreateTemplateCampaignResponse</returns>
        System.Threading.Tasks.Task<CreateTemplateCampaignResponse> CreateCampaignFromTemplateAsync (int applicationId, CreateTemplateCampaign body);

        /// <summary>
        /// Create campaign from campaign template
        /// </summary>
        /// <remarks>
        /// Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (CreateTemplateCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTemplateCampaignResponse>> CreateCampaignFromTemplateAsyncWithHttpInfo (int applicationId, CreateTemplateCampaign body);
        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Create a collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> CreateCollectionAsync (int applicationId, int campaignId, NewCampaignCollection body);

        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Create a collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> CreateCollectionAsyncWithHttpInfo (int applicationId, int campaignId, NewCampaignCollection body);
        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> CreateCouponsAsync (int applicationId, int campaignId, NewCoupons body, string silent = default(string));

        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> CreateCouponsAsyncWithHttpInfo (int applicationId, int campaignId, NewCoupons body, string silent = default(string));
        /// <summary>
        /// Create coupons asynchronously
        /// </summary>
        /// <remarks>
        /// Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of AsyncCouponCreationResponse</returns>
        System.Threading.Tasks.Task<AsyncCouponCreationResponse> CreateCouponsAsyncAsync (int applicationId, int campaignId, NewCouponCreationJob body);

        /// <summary>
        /// Create coupons asynchronously
        /// </summary>
        /// <remarks>
        /// Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AsyncCouponCreationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncCouponCreationResponse>> CreateCouponsAsyncAsyncWithHttpInfo (int applicationId, int campaignId, NewCouponCreationJob body);
        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> CreateCouponsForMultipleRecipientsAsync (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));

        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> CreateCouponsForMultipleRecipientsAsyncWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));
        /// <summary>
        /// Create notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of NotificationWebhook</returns>
        System.Threading.Tasks.Task<NotificationWebhook> CreateNotificationWebhookAsync (int applicationId, NewNotificationWebhook body);

        /// <summary>
        /// Create notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NotificationWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationWebhook>> CreateNotificationWebhookAsyncWithHttpInfo (int applicationId, NewNotificationWebhook body);
        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of NewPasswordEmail</returns>
        System.Threading.Tasks.Task<NewPasswordEmail> CreatePasswordRecoveryEmailAsync (NewPasswordEmail body);

        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NewPasswordEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewPasswordEmail>> CreatePasswordRecoveryEmailAsyncWithHttpInfo (NewPasswordEmail body);
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Session</returns>
        System.Threading.Tasks.Task<Session> CreateSessionAsync (LoginParams body);

        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Session)</returns>
        System.Threading.Tasks.Task<ApiResponse<Session>> CreateSessionAsyncWithHttpInfo (LoginParams body);
        /// <summary>
        /// Deduct points from card
        /// </summary>
        /// <remarks>
        /// Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeductLoyaltyCardPointsAsync (int loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body);

        /// <summary>
        /// Deduct points from card
        /// </summary>
        /// <remarks>
        /// Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeductLoyaltyCardPointsAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body);
        /// <summary>
        /// Delete account-level collection
        /// </summary>
        /// <remarks>
        /// Delete the given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountCollectionAsync (int collectionId);

        /// <summary>
        /// Delete account-level collection
        /// </summary>
        /// <remarks>
        /// Delete the given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountCollectionAsyncWithHttpInfo (int collectionId);
        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCampaignAsync (int applicationId, int campaignId);

        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCampaignAsyncWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Delete collection
        /// </summary>
        /// <remarks>
        /// Delete the given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCollectionAsync (int applicationId, int campaignId, int collectionId);

        /// <summary>
        /// Delete collection
        /// </summary>
        /// <remarks>
        /// Delete the given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCollectionAsyncWithHttpInfo (int applicationId, int campaignId, int collectionId);
        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponAsync (int applicationId, int campaignId, string couponId);

        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId);
        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponsAsync (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Delete loyalty card
        /// </summary>
        /// <remarks>
        /// Delete the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLoyaltyCardAsync (int loyaltyProgramId, string loyaltyCardId);

        /// <summary>
        /// Delete loyalty card
        /// </summary>
        /// <remarks>
        /// Delete the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoyaltyCardAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId);
        /// <summary>
        /// Delete notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNotificationWebhookAsync (int applicationId, int notificationWebhookId);

        /// <summary>
        /// Delete notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotificationWebhookAsyncWithHttpInfo (int applicationId, int notificationWebhookId);
        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReferralAsync (int applicationId, int campaignId, string referralId);

        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId);
        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroySessionAsync ();

        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroySessionAsyncWithHttpInfo ();
        /// <summary>
        /// Export account-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportAccountCollectionItemsAsync (int collectionId);

        /// <summary>
        /// Export account-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportAccountCollectionItemsAsyncWithHttpInfo (int collectionId);
        /// <summary>
        /// Export a collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a collection&#39;s items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCollectionItemsAsync (int applicationId, int campaignId, int collectionId);

        /// <summary>
        /// Export a collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a collection&#39;s items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCollectionItemsAsyncWithHttpInfo (int applicationId, int campaignId, int collectionId);
        /// <summary>
        /// Export coupons
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon is reserved. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCouponsAsync (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));

        /// <summary>
        /// Export coupons
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon is reserved. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCouponsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));
        /// <summary>
        /// Export customer sessions
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of the session. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCustomerSessionsAsync (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));

        /// <summary>
        /// Export customer sessions
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of the session. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCustomerSessionsAsyncWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));
        /// <summary>
        /// Export triggered effects
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportEffectsAsync (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));

        /// <summary>
        /// Export triggered effects
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportEffectsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));
        /// <summary>
        /// Export customer loyalty balance to CSV
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyBalanceAsync (string loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export customer loyalty balance to CSV
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyBalanceAsyncWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export customer loyalty balances
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyBalancesAsync (string loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export customer loyalty balances
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyBalancesAsyncWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export all card transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyCardBalancesAsync (int loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export all card transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyCardBalancesAsyncWithHttpInfo (int loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export card&#39;s ledger log
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyCardLedgerAsync (int loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));

        /// <summary>
        /// Export card&#39;s ledger log
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyCardLedgerAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));
        /// <summary>
        /// Export customer&#39;s transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The type of the loyalty program. - &#x60;name&#x60;: The name of the loyalty program. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyLedgerAsync (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string));

        /// <summary>
        /// Export customer&#39;s transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The type of the loyalty program. - &#x60;name&#x60;: The name of the loyalty program. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyLedgerAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string));
        /// <summary>
        /// Export referrals
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportReferralsAsync (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string));

        /// <summary>
        /// Export referrals
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportReferralsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string));
        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls sent to the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> GetAccessLogsWithoutTotalCountAsync (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls sent to the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetAccessLogsWithoutTotalCountAsyncWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> GetAccountAsync (int accountId);

        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> GetAccountAsyncWithHttpInfo (int accountId);
        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of AccountAnalytics</returns>
        System.Threading.Tasks.Task<AccountAnalytics> GetAccountAnalyticsAsync (int accountId);

        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of ApiResponse (AccountAnalytics)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAnalytics>> GetAccountAnalyticsAsyncWithHttpInfo (int accountId);
        /// <summary>
        /// Get account-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> GetAccountCollectionAsync (int collectionId);

        /// <summary>
        /// Get account-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> GetAccountCollectionAsyncWithHttpInfo (int collectionId);
        /// <summary>
        /// Get additional cost
        /// </summary>
        /// <remarks>
        /// Returns the additional cost. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> GetAdditionalCostAsync (int additionalCostId);

        /// <summary>
        /// Get additional cost
        /// </summary>
        /// <remarks>
        /// Returns the additional cost. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> GetAdditionalCostAsyncWithHttpInfo (int additionalCostId);
        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> GetAdditionalCostsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetAdditionalCostsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> GetAllAccessLogsAsync (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetAllAccessLogsAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20040</returns>
        System.Threading.Tasks.Task<InlineResponse20040> GetAllRolesAsync ();

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> GetAllRolesAsyncWithHttpInfo ();
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> GetApplicationAsync (int applicationId);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationAsyncWithHttpInfo (int applicationId);
        /// <summary>
        /// Get Application health
        /// </summary>
        /// <remarks>
        /// Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApplicationApiHealth</returns>
        System.Threading.Tasks.Task<ApplicationApiHealth> GetApplicationApiHealthAsync (int applicationId);

        /// <summary>
        /// Get Application health
        /// </summary>
        /// <remarks>
        /// Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (ApplicationApiHealth)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiHealth>> GetApplicationApiHealthAsyncWithHttpInfo (int applicationId);
        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApplicationCustomer</returns>
        System.Threading.Tasks.Task<ApplicationCustomer> GetApplicationCustomerAsync (int applicationId, int customerId);

        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApiResponse (ApplicationCustomer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationCustomer>> GetApplicationCustomerAsyncWithHttpInfo (int applicationId, int customerId);
        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20030</returns>
        System.Threading.Tasks.Task<InlineResponse20030> GetApplicationCustomerFriendsAsync (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> GetApplicationCustomerFriendsAsyncWithHttpInfo (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GetApplicationCustomersAsync (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetApplicationCustomersAsyncWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GetApplicationCustomersByAttributesAsync (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetApplicationCustomersByAttributesAsyncWithHttpInfo (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> GetApplicationEventTypesAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GetApplicationEventTypesAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GetApplicationEventsWithoutTotalCountAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));

        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));
        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>Task of ApplicationSession</returns>
        System.Threading.Tasks.Task<ApplicationSession> GetApplicationSessionAsync (int applicationId, int sessionId);

        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>Task of ApiResponse (ApplicationSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationSession>> GetApplicationSessionAsyncWithHttpInfo (int applicationId, int sessionId);
        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GetApplicationSessionsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));

        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GetApplicationSessionsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all applications in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetApplicationsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all applications in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetApplicationsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get custom attribute
        /// </summary>
        /// <remarks>
        /// Retrieve the specified custom attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> GetAttributeAsync (int attributeId);

        /// <summary>
        /// Get custom attribute
        /// </summary>
        /// <remarks>
        /// Retrieve the specified custom attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> GetAttributeAsyncWithHttpInfo (int attributeId);
        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Return all the custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> GetAttributesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));

        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Return all the custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GetAttributesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));
        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> GetAudiencesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetAudiencesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> GetCampaignAsync (int applicationId, int campaignId);

        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> GetCampaignAsyncWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GetCampaignAnalyticsAsync (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));

        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetCampaignAnalyticsAsyncWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));
        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetCampaignByAttributesAsync (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));

        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetCampaignByAttributesAsyncWithHttpInfo (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));
        /// <summary>
        /// List campaign templates
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaign templates.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> GetCampaignTemplatesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), int? userId = default(int?));

        /// <summary>
        /// List campaign templates
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaign templates.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> GetCampaignTemplatesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), int? userId = default(int?));
        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List the campaigns of the specified application that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetCampaignsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?));

        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List the campaigns of the specified application that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetCampaignsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?));
        /// <summary>
        /// Get audit logs for an account
        /// </summary>
        /// <remarks>
        /// Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of InlineResponse20038</returns>
        System.Threading.Tasks.Task<InlineResponse20038> GetChangesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), int? managementKeyId = default(int?), bool? includeOld = default(bool?));

        /// <summary>
        /// Get audit logs for an account
        /// </summary>
        /// <remarks>
        /// Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> GetChangesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), int? managementKeyId = default(int?), bool? includeOld = default(bool?));
        /// <summary>
        /// Get collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> GetCollectionAsync (int applicationId, int campaignId, int collectionId);

        /// <summary>
        /// Get collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> GetCollectionAsyncWithHttpInfo (int applicationId, int campaignId, int collectionId);
        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Retrieve the items from the given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> GetCollectionItemsAsync (int collectionId, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Retrieve the items from the given collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetCollectionItemsAsyncWithHttpInfo (int collectionId, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetCouponsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetCouponsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of CustomerActivityReport</returns>
        System.Threading.Tasks.Task<CustomerActivityReport> GetCustomerActivityReportAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (CustomerActivityReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerActivityReport>> GetCustomerActivityReportAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GetCustomerActivityReportsWithoutTotalCountAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));

        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));
        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of CustomerAnalytics</returns>
        System.Threading.Tasks.Task<CustomerAnalytics> GetCustomerAnalyticsAsync (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (CustomerAnalytics)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerAnalytics>> GetCustomerAnalyticsAsyncWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of CustomerProfile</returns>
        System.Threading.Tasks.Task<CustomerProfile> GetCustomerProfileAsync (int customerId);

        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApiResponse (CustomerProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerProfile>> GetCustomerProfileAsyncWithHttpInfo (int customerId);
        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GetCustomerProfilesAsync (int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?));

        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetCustomerProfilesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?));
        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> GetCustomersByAttributesAsync (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?));

        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetCustomersByAttributesAsyncWithHttpInfo (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?));
        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> GetEventTypesAsync (string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> GetEventTypesAsyncWithHttpInfo (string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of InlineResponse20039</returns>
        System.Threading.Tasks.Task<InlineResponse20039> GetExportsAsync (int? pageSize = default(int?), int? skip = default(int?), decimal? applicationId = default(decimal?), int? campaignId = default(int?), string entity = default(string));

        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> GetExportsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), decimal? applicationId = default(decimal?), int? campaignId = default(int?), string entity = default(string));
        /// <summary>
        /// Get loyalty card
        /// </summary>
        /// <remarks>
        /// Get the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of LoyaltyCard</returns>
        System.Threading.Tasks.Task<LoyaltyCard> GetLoyaltyCardAsync (int loyaltyProgramId, string loyaltyCardId);

        /// <summary>
        /// Get loyalty card
        /// </summary>
        /// <remarks>
        /// Get the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyCard>> GetLoyaltyCardAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId);
        /// <summary>
        /// List card&#39;s transactions
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> GetLoyaltyCardTransactionLogsAsync (int loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?), string subledgerId = default(string));

        /// <summary>
        /// List card&#39;s transactions
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetLoyaltyCardTransactionLogsAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?), string subledgerId = default(string));
        /// <summary>
        /// List loyalty cards
        /// </summary>
        /// <remarks>
        /// For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="identifier">Optional query parameter to search cards by identifier. (optional)</param>
        /// <param name="profileId">Filter by the profile ID. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetLoyaltyCardsAsync (int loyaltyProgramId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string identifier = default(string), int? profileId = default(int?));

        /// <summary>
        /// List loyalty cards
        /// </summary>
        /// <remarks>
        /// For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="identifier">Optional query parameter to search cards by identifier. (optional)</param>
        /// <param name="profileId">Filter by the profile ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetLoyaltyCardsAsyncWithHttpInfo (int loyaltyProgramId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string identifier = default(string), int? profileId = default(int?));
        /// <summary>
        /// Get customer&#39;s full loyalty ledger
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <returns>Task of LoyaltyLedger</returns>
        System.Threading.Tasks.Task<LoyaltyLedger> GetLoyaltyPointsAsync (string loyaltyProgramId, string integrationId);

        /// <summary>
        /// Get customer&#39;s full loyalty ledger
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <returns>Task of ApiResponse (LoyaltyLedger)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyLedger>> GetLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId);
        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of LoyaltyProgram</returns>
        System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramAsync (int loyaltyProgramId);

        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> GetLoyaltyProgramAsyncWithHttpInfo (int loyaltyProgramId);
        /// <summary>
        /// List loyalty program transactions
        /// </summary>
        /// <remarks>
        /// Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 50)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetLoyaltyProgramTransactionsAsync (int loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List loyalty program transactions
        /// </summary>
        /// <remarks>
        /// Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 50)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetLoyaltyProgramTransactionsAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetLoyaltyProgramsAsync ();

        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetLoyaltyProgramsAsyncWithHttpInfo ();
        /// <summary>
        /// Get loyalty program statistics
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of LoyaltyStatistics</returns>
        System.Threading.Tasks.Task<LoyaltyStatistics> GetLoyaltyStatisticsAsync (int loyaltyProgramId);

        /// <summary>
        /// Get loyalty program statistics
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyStatistics>> GetLoyaltyStatisticsAsyncWithHttpInfo (int loyaltyProgramId);
        /// <summary>
        /// Get notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>Task of NotificationWebhook</returns>
        System.Threading.Tasks.Task<NotificationWebhook> GetNotificationWebhookAsync (int applicationId, int notificationWebhookId);

        /// <summary>
        /// Get notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>Task of ApiResponse (NotificationWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationWebhook>> GetNotificationWebhookAsyncWithHttpInfo (int applicationId, int notificationWebhookId);
        /// <summary>
        /// List notifications about campaign-related changes
        /// </summary>
        /// <remarks>
        /// List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetNotificationWebhooksAsync (int applicationId);

        /// <summary>
        /// List notifications about campaign-related changes
        /// </summary>
        /// <remarks>
        /// List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetNotificationWebhooksAsyncWithHttpInfo (int applicationId);
        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetReferralsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));

        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetReferralsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));
        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The Id of role. </param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleAsync (int roleId);

        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The Id of role. </param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (int roleId);
        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Task of Ruleset</returns>
        System.Threading.Tasks.Task<Ruleset> GetRulesetAsync (int applicationId, int campaignId, int rulesetId);

        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ruleset>> GetRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId);
        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetRulesetsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetRulesetsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync (int userId);

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (int userId);
        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20037</returns>
        System.Threading.Tasks.Task<InlineResponse20037> GetUsersAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> GetUsersAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get webhook
        /// </summary>
        /// <remarks>
        /// Returns a webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> GetWebhookAsync (int webhookId);

        /// <summary>
        /// Get webhook
        /// </summary>
        /// <remarks>
        /// Returns a webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (int webhookId);
        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20034</returns>
        System.Threading.Tasks.Task<InlineResponse20034> GetWebhookActivationLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GetWebhookActivationLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> GetWebhookLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GetWebhookLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application IDs separated by a comma. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> GetWebhooksAsync (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application IDs separated by a comma. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetWebhooksAsyncWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Import data in existing account-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportAccountCollectionAsync (int collectionId, string upFile = default(string));

        /// <summary>
        /// Import data in existing account-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportAccountCollectionAsyncWithHttpInfo (int collectionId, string upFile = default(string));
        /// <summary>
        /// Import allowed values for attribute
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportAllowedListAsync (int attributeId, string upFile = default(string));

        /// <summary>
        /// Import allowed values for attribute
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportAllowedListAsyncWithHttpInfo (int attributeId, string upFile = default(string));
        /// <summary>
        /// Import data in existing collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportCollectionAsync (int applicationId, int campaignId, int collectionId, string upFile = default(string));

        /// <summary>
        /// Import data in existing collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportCollectionAsyncWithHttpInfo (int applicationId, int campaignId, int collectionId, string upFile = default(string));
        /// <summary>
        /// Import coupons
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the coupon entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportCouponsAsync (int applicationId, int campaignId, string upFile = default(string));

        /// <summary>
        /// Import coupons
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the coupon entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string upFile = default(string));
        /// <summary>
        /// Import loyalty cards
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportLoyaltyCardsAsync (int loyaltyProgramId, string upFile = default(string));

        /// <summary>
        /// Import loyalty cards
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportLoyaltyCardsAsyncWithHttpInfo (int loyaltyProgramId, string upFile = default(string));
        /// <summary>
        /// Import loyalty points
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60;: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are &#x60;active&#x60;. - &#x60;expirydate&#x60;: The latest date when the points can be redeemed. After this date, the points are &#x60;expired&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportLoyaltyPointsAsync (int loyaltyProgramId, string upFile = default(string));

        /// <summary>
        /// Import loyalty points
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60;: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are &#x60;active&#x60;. - &#x60;expirydate&#x60;: The latest date when the points can be redeemed. After this date, the points are &#x60;expired&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportLoyaltyPointsAsyncWithHttpInfo (int loyaltyProgramId, string upFile = default(string));
        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated to the giveaway entity, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportPoolGiveawaysAsync (int poolId, string upFile = default(string));

        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated to the giveaway entity, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportPoolGiveawaysAsyncWithHttpInfo (int poolId, string upFile = default(string));
        /// <summary>
        /// Import referrals
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the referral entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportReferralsAsync (int applicationId, int campaignId, string upFile = default(string));

        /// <summary>
        /// Import referrals
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the referral entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportReferralsAsyncWithHttpInfo (int applicationId, int campaignId, string upFile = default(string));
        /// <summary>
        /// List collections in account
        /// </summary>
        /// <remarks>
        /// List collections in account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> ListAccountCollectionsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections in account
        /// </summary>
        /// <remarks>
        /// List collections in account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> ListAccountCollectionsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// List collections
        /// </summary>
        /// <remarks>
        /// List collections in the campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> ListCollectionsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections
        /// </summary>
        /// <remarks>
        /// List collections in the campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> ListCollectionsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// List collections in application
        /// </summary>
        /// <remarks>
        /// List collections from all campaigns in the Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> ListCollectionsInApplicationAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections in application
        /// </summary>
        /// <remarks>
        /// List collections from all campaigns in the Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> ListCollectionsInApplicationAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// Create notification about added or deducted loyalty points
        /// </summary>
        /// <remarks>
        /// Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of BaseNotification</returns>
        System.Threading.Tasks.Task<BaseNotification> PostAddedDeductedPointsNotificationAsync (int loyaltyProgramId, NewBaseNotification body);

        /// <summary>
        /// Create notification about added or deducted loyalty points
        /// </summary>
        /// <remarks>
        /// Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (BaseNotification)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseNotification>> PostAddedDeductedPointsNotificationAsyncWithHttpInfo (int loyaltyProgramId, NewBaseNotification body);
        /// <summary>
        /// Create strikethrough notification
        /// </summary>
        /// <remarks>
        /// Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of BaseNotification</returns>
        System.Threading.Tasks.Task<BaseNotification> PostCatalogsStrikethroughNotificationAsync (int applicationId, NewBaseNotification body);

        /// <summary>
        /// Create strikethrough notification
        /// </summary>
        /// <remarks>
        /// Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (BaseNotification)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseNotification>> PostCatalogsStrikethroughNotificationAsyncWithHttpInfo (int applicationId, NewBaseNotification body);
        /// <summary>
        /// Deduct points from customer profile
        /// </summary>
        /// <remarks>
        /// Deduct points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveLoyaltyPointsAsync (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body);

        /// <summary>
        /// Deduct points from customer profile
        /// </summary>
        /// <remarks>
        /// Deduct points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body);
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of NewPassword</returns>
        System.Threading.Tasks.Task<NewPassword> ResetPasswordAsync (NewPassword body);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NewPassword)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewPassword>> ResetPasswordAsyncWithHttpInfo (NewPassword body);
        /// <summary>
        /// List coupons that match the given attributes (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsync (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> SearchCouponsAdvancedWithoutTotalCountAsync (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// Transfer card data
        /// </summary>
        /// <remarks>
        /// Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TransferLoyaltyCardAsync (int loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body);

        /// <summary>
        /// Transfer card data
        /// </summary>
        /// <remarks>
        /// Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransferLoyaltyCardAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body);
        /// <summary>
        /// Update account-level collection
        /// </summary>
        /// <remarks>
        /// Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> UpdateAccountCollectionAsync (int collectionId, UpdateCollection body);

        /// <summary>
        /// Update account-level collection
        /// </summary>
        /// <remarks>
        /// Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> UpdateAccountCollectionAsyncWithHttpInfo (int collectionId, UpdateCollection body);
        /// <summary>
        /// Update additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> UpdateAdditionalCostAsync (int additionalCostId, NewAdditionalCost body);

        /// <summary>
        /// Update additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> UpdateAdditionalCostAsyncWithHttpInfo (int additionalCostId, NewAdditionalCost body);
        /// <summary>
        /// Update custom attribute
        /// </summary>
        /// <remarks>
        /// Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> UpdateAttributeAsync (int attributeId, NewAttribute body);

        /// <summary>
        /// Update custom attribute
        /// </summary>
        /// <remarks>
        /// Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> UpdateAttributeAsyncWithHttpInfo (int attributeId, NewAttribute body);
        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> UpdateCampaignAsync (int applicationId, int campaignId, UpdateCampaign body);

        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> UpdateCampaignAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCampaign body);
        /// <summary>
        /// Update collection description
        /// </summary>
        /// <remarks>
        /// Edit the description of the collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> UpdateCollectionAsync (int applicationId, int campaignId, int collectionId, UpdateCampaignCollection body);

        /// <summary>
        /// Update collection description
        /// </summary>
        /// <remarks>
        /// Edit the description of the collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> UpdateCollectionAsyncWithHttpInfo (int applicationId, int campaignId, int collectionId, UpdateCampaignCollection body);
        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this PUT endpoint only, any property you do not explicitly set in your request   will be set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Task of Coupon</returns>
        System.Threading.Tasks.Task<Coupon> UpdateCouponAsync (int applicationId, int campaignId, string couponId, UpdateCoupon body);

        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this PUT endpoint only, any property you do not explicitly set in your request   will be set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<Coupon>> UpdateCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon body);
        /// <summary>
        /// Update coupons
        /// </summary>
        /// <remarks>
        /// Update all coupons, or a specific batch of coupons, in a campaign. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCouponBatchAsync (int applicationId, int campaignId, UpdateCouponBatch body);

        /// <summary>
        /// Update coupons
        /// </summary>
        /// <remarks>
        /// Update all coupons, or a specific batch of coupons, in a campaign. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCouponBatchAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch body);
        /// <summary>
        /// Update loyalty card status
        /// </summary>
        /// <remarks>
        /// Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of LoyaltyCard</returns>
        System.Threading.Tasks.Task<LoyaltyCard> UpdateLoyaltyCardAsync (int loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body);

        /// <summary>
        /// Update loyalty card status
        /// </summary>
        /// <remarks>
        /// Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (LoyaltyCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyCard>> UpdateLoyaltyCardAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body);
        /// <summary>
        /// Update notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of NotificationWebhook</returns>
        System.Threading.Tasks.Task<NotificationWebhook> UpdateNotificationWebhookAsync (int applicationId, int notificationWebhookId, NewNotificationWebhook body);

        /// <summary>
        /// Update notification about campaign-related changes
        /// </summary>
        /// <remarks>
        /// Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NotificationWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationWebhook>> UpdateNotificationWebhookAsyncWithHttpInfo (int applicationId, int notificationWebhookId, NewNotificationWebhook body);
        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Referral</returns>
        System.Threading.Tasks.Task<Referral> UpdateReferralAsync (int applicationId, int campaignId, string referralId, UpdateReferral body);

        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        System.Threading.Tasks.Task<ApiResponse<Referral>> UpdateReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApi : IManagementApiSync, IManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManagementApi : IManagementApi
    {
        private TalonOne.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementApi(String basePath)
        {
            this.Configuration = TalonOne.Client.Configuration.MergeConfigurations(
                TalonOne.Client.GlobalConfiguration.Instance,
                new TalonOne.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManagementApi(TalonOne.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TalonOne.Client.Configuration.MergeConfigurations(
                TalonOne.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ManagementApi(TalonOne.Client.ISynchronousClient client,TalonOne.Client.IAsynchronousClient asyncClient, TalonOne.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TalonOne.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TalonOne.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TalonOne.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TalonOne.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add points to card Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void AddLoyaltyCardPoints (int loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body)
        {
             AddLoyaltyCardPointsWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);
        }

        /// <summary>
        /// Add points to card Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> AddLoyaltyCardPointsWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->AddLoyaltyCardPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->AddLoyaltyCardPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/add_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoyaltyCardPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add points to card Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLoyaltyCardPointsAsync (int loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body)
        {
             await AddLoyaltyCardPointsAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);

        }

        /// <summary>
        /// Add points to card Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> AddLoyaltyCardPointsAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->AddLoyaltyCardPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->AddLoyaltyCardPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/add_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoyaltyCardPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add points to customer profile Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void AddLoyaltyPoints (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body)
        {
             AddLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId, body);
        }

        /// <summary>
        /// Add points to customer profile Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> AddLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->AddLoyaltyPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/add_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add points to customer profile Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLoyaltyPointsAsync (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body)
        {
             await AddLoyaltyPointsAsyncWithHttpInfo(loyaltyProgramId, integrationId, body);

        }

        /// <summary>
        /// Add points to customer profile Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> AddLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->AddLoyaltyPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/add_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy the campaign into the specified Application Copy the campaign into all specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 CopyCampaignToApplications (int applicationId, int campaignId, CampaignCopy body)
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = CopyCampaignToApplicationsWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy the campaign into the specified Application Copy the campaign into all specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2004 > CopyCampaignToApplicationsWithHttpInfo (int applicationId, int campaignId, CampaignCopy body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CopyCampaignToApplications");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2004 >("/v1/applications/{applicationId}/campaigns/{campaignId}/copy", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCampaignToApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy the campaign into the specified Application Copy the campaign into all specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> CopyCampaignToApplicationsAsync (int applicationId, int campaignId, CampaignCopy body)
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = await CopyCampaignToApplicationsAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy the campaign into the specified Application Copy the campaign into all specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2004>> CopyCampaignToApplicationsAsyncWithHttpInfo (int applicationId, int campaignId, CampaignCopy body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CopyCampaignToApplications");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2004>("/v1/applications/{applicationId}/campaigns/{campaignId}/copy", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCampaignToApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create account-level collection Create account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        public Collection CreateAccountCollection (NewCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = CreateAccountCollectionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create account-level collection Create account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > CreateAccountCollectionWithHttpInfo (NewCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAccountCollection");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Collection >("/v1/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create account-level collection Create account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> CreateAccountCollectionAsync (NewCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await CreateAccountCollectionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create account-level collection Create account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> CreateAccountCollectionAsyncWithHttpInfo (NewCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAccountCollection");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Collection>("/v1/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create additional cost Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost CreateAdditionalCost (NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = CreateAdditionalCostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create additional cost Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public TalonOne.Client.ApiResponse< AccountAdditionalCost > CreateAdditionalCostWithHttpInfo (NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAdditionalCost");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AccountAdditionalCost >("/v1/additional_costs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create additional cost Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> CreateAdditionalCostAsync (NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = await CreateAdditionalCostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create additional cost Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAdditionalCost>> CreateAdditionalCostAsyncWithHttpInfo (NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAdditionalCost");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountAdditionalCost>("/v1/additional_costs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Attribute</returns>
        public Attribute CreateAttribute (NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = CreateAttributeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Attribute</returns>
        public TalonOne.Client.ApiResponse< Attribute > CreateAttributeWithHttpInfo (NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAttribute");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Attribute >("/v1/attributes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> CreateAttributeAsync (NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = await CreateAttributeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Attribute>> CreateAttributeAsyncWithHttpInfo (NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAttribute");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Attribute>("/v1/attributes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create campaign from campaign template Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>CreateTemplateCampaignResponse</returns>
        public CreateTemplateCampaignResponse CreateCampaignFromTemplate (int applicationId, CreateTemplateCampaign body)
        {
             TalonOne.Client.ApiResponse<CreateTemplateCampaignResponse> localVarResponse = CreateCampaignFromTemplateWithHttpInfo(applicationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create campaign from campaign template Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of CreateTemplateCampaignResponse</returns>
        public TalonOne.Client.ApiResponse< CreateTemplateCampaignResponse > CreateCampaignFromTemplateWithHttpInfo (int applicationId, CreateTemplateCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCampaignFromTemplate");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateTemplateCampaignResponse >("/v1/applications/{applicationId}/create_campaign_from_template", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaignFromTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create campaign from campaign template Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of CreateTemplateCampaignResponse</returns>
        public async System.Threading.Tasks.Task<CreateTemplateCampaignResponse> CreateCampaignFromTemplateAsync (int applicationId, CreateTemplateCampaign body)
        {
             TalonOne.Client.ApiResponse<CreateTemplateCampaignResponse> localVarResponse = await CreateCampaignFromTemplateAsyncWithHttpInfo(applicationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create campaign from campaign template Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (CreateTemplateCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CreateTemplateCampaignResponse>> CreateCampaignFromTemplateAsyncWithHttpInfo (int applicationId, CreateTemplateCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCampaignFromTemplate");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTemplateCampaignResponse>("/v1/applications/{applicationId}/create_campaign_from_template", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaignFromTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create collection Create a collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        public Collection CreateCollection (int applicationId, int campaignId, NewCampaignCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = CreateCollectionWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create collection Create a collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > CreateCollectionWithHttpInfo (int applicationId, int campaignId, NewCampaignCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCollection");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Collection >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create collection Create a collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> CreateCollectionAsync (int applicationId, int campaignId, NewCampaignCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await CreateCollectionAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create collection Create a collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> CreateCollectionAsyncWithHttpInfo (int applicationId, int campaignId, NewCampaignCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCollection");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Collection>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 CreateCoupons (int applicationId, int campaignId, NewCoupons body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2007> localVarResponse = CreateCouponsWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2007 > CreateCouponsWithHttpInfo (int applicationId, int campaignId, NewCoupons body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCoupons");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2007 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> CreateCouponsAsync (int applicationId, int campaignId, NewCoupons body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2007> localVarResponse = await CreateCouponsAsyncWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2007>> CreateCouponsAsyncWithHttpInfo (int applicationId, int campaignId, NewCoupons body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCoupons");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2007>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons asynchronously Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>AsyncCouponCreationResponse</returns>
        public AsyncCouponCreationResponse CreateCouponsAsync (int applicationId, int campaignId, NewCouponCreationJob body)
        {
             TalonOne.Client.ApiResponse<AsyncCouponCreationResponse> localVarResponse = CreateCouponsAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupons asynchronously Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AsyncCouponCreationResponse</returns>
        public TalonOne.Client.ApiResponse< AsyncCouponCreationResponse > CreateCouponsAsyncWithHttpInfo (int applicationId, int campaignId, NewCouponCreationJob body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsAsync");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AsyncCouponCreationResponse >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_async", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons asynchronously Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of AsyncCouponCreationResponse</returns>
        public async System.Threading.Tasks.Task<AsyncCouponCreationResponse> CreateCouponsAsyncAsync (int applicationId, int campaignId, NewCouponCreationJob body)
        {
             TalonOne.Client.ApiResponse<AsyncCouponCreationResponse> localVarResponse = await CreateCouponsAsyncAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupons asynchronously Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AsyncCouponCreationResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AsyncCouponCreationResponse>> CreateCouponsAsyncAsyncWithHttpInfo (int applicationId, int campaignId, NewCouponCreationJob body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsAsync");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AsyncCouponCreationResponse>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_async", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 CreateCouponsForMultipleRecipients (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2007> localVarResponse = CreateCouponsForMultipleRecipientsWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2007 > CreateCouponsForMultipleRecipientsWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsForMultipleRecipients");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2007 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_with_recipients", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsForMultipleRecipients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> CreateCouponsForMultipleRecipientsAsync (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2007> localVarResponse = await CreateCouponsForMultipleRecipientsAsyncWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2007>> CreateCouponsForMultipleRecipientsAsyncWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsForMultipleRecipients");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2007>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_with_recipients", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsForMultipleRecipients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create notification about campaign-related changes Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>NotificationWebhook</returns>
        public NotificationWebhook CreateNotificationWebhook (int applicationId, NewNotificationWebhook body)
        {
             TalonOne.Client.ApiResponse<NotificationWebhook> localVarResponse = CreateNotificationWebhookWithHttpInfo(applicationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create notification about campaign-related changes Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NotificationWebhook</returns>
        public TalonOne.Client.ApiResponse< NotificationWebhook > CreateNotificationWebhookWithHttpInfo (int applicationId, NewNotificationWebhook body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateNotificationWebhook");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< NotificationWebhook >("/v1/applications/{applicationId}/notification_webhooks", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNotificationWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create notification about campaign-related changes Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of NotificationWebhook</returns>
        public async System.Threading.Tasks.Task<NotificationWebhook> CreateNotificationWebhookAsync (int applicationId, NewNotificationWebhook body)
        {
             TalonOne.Client.ApiResponse<NotificationWebhook> localVarResponse = await CreateNotificationWebhookAsyncWithHttpInfo(applicationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create notification about campaign-related changes Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NotificationWebhook)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<NotificationWebhook>> CreateNotificationWebhookAsyncWithHttpInfo (int applicationId, NewNotificationWebhook body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateNotificationWebhook");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NotificationWebhook>("/v1/applications/{applicationId}/notification_webhooks", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNotificationWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>NewPasswordEmail</returns>
        public NewPasswordEmail CreatePasswordRecoveryEmail (NewPasswordEmail body)
        {
             TalonOne.Client.ApiResponse<NewPasswordEmail> localVarResponse = CreatePasswordRecoveryEmailWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NewPasswordEmail</returns>
        public TalonOne.Client.ApiResponse< NewPasswordEmail > CreatePasswordRecoveryEmailWithHttpInfo (NewPasswordEmail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreatePasswordRecoveryEmail");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< NewPasswordEmail >("/v1/password_recovery_emails", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePasswordRecoveryEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of NewPasswordEmail</returns>
        public async System.Threading.Tasks.Task<NewPasswordEmail> CreatePasswordRecoveryEmailAsync (NewPasswordEmail body)
        {
             TalonOne.Client.ApiResponse<NewPasswordEmail> localVarResponse = await CreatePasswordRecoveryEmailAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NewPasswordEmail)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<NewPasswordEmail>> CreatePasswordRecoveryEmailAsyncWithHttpInfo (NewPasswordEmail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreatePasswordRecoveryEmail");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NewPasswordEmail>("/v1/password_recovery_emails", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePasswordRecoveryEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Session</returns>
        public Session CreateSession (LoginParams body)
        {
             TalonOne.Client.ApiResponse<Session> localVarResponse = CreateSessionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Session</returns>
        public TalonOne.Client.ApiResponse< Session > CreateSessionWithHttpInfo (LoginParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateSession");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Session >("/v1/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Session</returns>
        public async System.Threading.Tasks.Task<Session> CreateSessionAsync (LoginParams body)
        {
             TalonOne.Client.ApiResponse<Session> localVarResponse = await CreateSessionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Session)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Session>> CreateSessionAsyncWithHttpInfo (LoginParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateSession");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Session>("/v1/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deduct points from card Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void DeductLoyaltyCardPoints (int loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body)
        {
             DeductLoyaltyCardPointsWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);
        }

        /// <summary>
        /// Deduct points from card Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeductLoyaltyCardPointsWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->DeductLoyaltyCardPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->DeductLoyaltyCardPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/deduct_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeductLoyaltyCardPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deduct points from card Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeductLoyaltyCardPointsAsync (int loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body)
        {
             await DeductLoyaltyCardPointsAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);

        }

        /// <summary>
        /// Deduct points from card Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeductLoyaltyCardPointsAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->DeductLoyaltyCardPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->DeductLoyaltyCardPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/deduct_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeductLoyaltyCardPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete account-level collection Delete the given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns></returns>
        public void DeleteAccountCollection (int collectionId)
        {
             DeleteAccountCollectionWithHttpInfo(collectionId);
        }

        /// <summary>
        /// Delete account-level collection Delete the given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteAccountCollectionWithHttpInfo (int collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete account-level collection Delete the given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountCollectionAsync (int collectionId)
        {
             await DeleteAccountCollectionAsyncWithHttpInfo(collectionId);

        }

        /// <summary>
        /// Delete account-level collection Delete the given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteAccountCollectionAsyncWithHttpInfo (int collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns></returns>
        public void DeleteCampaign (int applicationId, int campaignId)
        {
             DeleteCampaignWithHttpInfo(applicationId, campaignId);
        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCampaignWithHttpInfo (int applicationId, int campaignId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCampaignAsync (int applicationId, int campaignId)
        {
             await DeleteCampaignAsyncWithHttpInfo(applicationId, campaignId);

        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCampaignAsyncWithHttpInfo (int applicationId, int campaignId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete collection Delete the given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns></returns>
        public void DeleteCollection (int applicationId, int campaignId, int collectionId)
        {
             DeleteCollectionWithHttpInfo(applicationId, campaignId, collectionId);
        }

        /// <summary>
        /// Delete collection Delete the given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCollectionWithHttpInfo (int applicationId, int campaignId, int collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete collection Delete the given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCollectionAsync (int applicationId, int campaignId, int collectionId)
        {
             await DeleteCollectionAsyncWithHttpInfo(applicationId, campaignId, collectionId);

        }

        /// <summary>
        /// Delete collection Delete the given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCollectionAsyncWithHttpInfo (int applicationId, int campaignId, int collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns></returns>
        public void DeleteCoupon (int applicationId, int campaignId, string couponId)
        {
             DeleteCouponWithHttpInfo(applicationId, campaignId, couponId);
        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCouponWithHttpInfo (int applicationId, int campaignId, string couponId)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->DeleteCoupon");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponAsync (int applicationId, int campaignId, string couponId)
        {
             await DeleteCouponAsyncWithHttpInfo(applicationId, campaignId, couponId);

        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->DeleteCoupon");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteCoupons (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
             DeleteCouponsWithHttpInfo(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);
        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCouponsWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (startsAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsAfter", startsAfter));
            }
            if (startsBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsBefore", startsBefore));
            }
            if (expiresAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresAfter", expiresAfter));
            }
            if (expiresBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresBefore", expiresBefore));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponsAsync (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
             await DeleteCouponsAsyncWithHttpInfo(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);

        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (startsAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsAfter", startsAfter));
            }
            if (startsBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsBefore", startsBefore));
            }
            if (expiresAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresAfter", expiresAfter));
            }
            if (expiresBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresBefore", expiresBefore));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete loyalty card Delete the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns></returns>
        public void DeleteLoyaltyCard (int loyaltyProgramId, string loyaltyCardId)
        {
             DeleteLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId);
        }

        /// <summary>
        /// Delete loyalty card Delete the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteLoyaltyCardWithHttpInfo (int loyaltyProgramId, string loyaltyCardId)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->DeleteLoyaltyCard");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete loyalty card Delete the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLoyaltyCardAsync (int loyaltyProgramId, string loyaltyCardId)
        {
             await DeleteLoyaltyCardAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId);

        }

        /// <summary>
        /// Delete loyalty card Delete the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteLoyaltyCardAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->DeleteLoyaltyCard");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete notification about campaign-related changes Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns></returns>
        public void DeleteNotificationWebhook (int applicationId, int notificationWebhookId)
        {
             DeleteNotificationWebhookWithHttpInfo(applicationId, notificationWebhookId);
        }

        /// <summary>
        /// Delete notification about campaign-related changes Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteNotificationWebhookWithHttpInfo (int applicationId, int notificationWebhookId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notificationWebhookId", TalonOne.Client.ClientUtils.ParameterToString(notificationWebhookId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/notification_webhooks/{notificationWebhookId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNotificationWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete notification about campaign-related changes Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNotificationWebhookAsync (int applicationId, int notificationWebhookId)
        {
             await DeleteNotificationWebhookAsyncWithHttpInfo(applicationId, notificationWebhookId);

        }

        /// <summary>
        /// Delete notification about campaign-related changes Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteNotificationWebhookAsyncWithHttpInfo (int applicationId, int notificationWebhookId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notificationWebhookId", TalonOne.Client.ClientUtils.ParameterToString(notificationWebhookId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/notification_webhooks/{notificationWebhookId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNotificationWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns></returns>
        public void DeleteReferral (int applicationId, int campaignId, string referralId)
        {
             DeleteReferralWithHttpInfo(applicationId, campaignId, referralId);
        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteReferralWithHttpInfo (int applicationId, int campaignId, string referralId)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->DeleteReferral");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReferralAsync (int applicationId, int campaignId, string referralId)
        {
             await DeleteReferralAsyncWithHttpInfo(applicationId, campaignId, referralId);

        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->DeleteReferral");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DestroySession ()
        {
             DestroySessionWithHttpInfo();
        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DestroySessionWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroySessionAsync ()
        {
             await DestroySessionAsyncWithHttpInfo();

        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DestroySessionAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export account-level collection&#39;s items Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>string</returns>
        public string ExportAccountCollectionItems (int collectionId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportAccountCollectionItemsWithHttpInfo(collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export account-level collection&#39;s items Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportAccountCollectionItemsWithHttpInfo (int collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/collections/{collectionId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAccountCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export account-level collection&#39;s items Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportAccountCollectionItemsAsync (int collectionId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportAccountCollectionItemsAsyncWithHttpInfo(collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export account-level collection&#39;s items Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportAccountCollectionItemsAsyncWithHttpInfo (int collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/collections/{collectionId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAccountCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a collection&#39;s items Download a CSV file containing a collection&#39;s items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>string</returns>
        public string ExportCollectionItems (int applicationId, int campaignId, int collectionId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCollectionItemsWithHttpInfo(applicationId, campaignId, collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export a collection&#39;s items Download a CSV file containing a collection&#39;s items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCollectionItemsWithHttpInfo (int applicationId, int campaignId, int collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a collection&#39;s items Download a CSV file containing a collection&#39;s items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCollectionItemsAsync (int applicationId, int campaignId, int collectionId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCollectionItemsAsyncWithHttpInfo(applicationId, campaignId, collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export a collection&#39;s items Download a CSV file containing a collection&#39;s items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCollectionItemsAsyncWithHttpInfo (int applicationId, int campaignId, int collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export coupons Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon is reserved. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>string</returns>
        public string ExportCoupons (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCouponsWithHttpInfo(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export coupons Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon is reserved. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCouponsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export coupons Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon is reserved. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCouponsAsync (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCouponsAsyncWithHttpInfo(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export coupons Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon is reserved. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCouponsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer sessions Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of the session. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>string</returns>
        public string ExportCustomerSessions (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCustomerSessionsWithHttpInfo(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer sessions Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of the session. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCustomerSessionsWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (profileIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileIntegrationId", profileIntegrationId));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (customerSessionState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerSessionState", customerSessionState));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_customer_sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCustomerSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer sessions Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of the session. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCustomerSessionsAsync (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCustomerSessionsAsyncWithHttpInfo(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer sessions Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of the session. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCustomerSessionsAsyncWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (profileIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileIntegrationId", profileIntegrationId));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (customerSessionState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerSessionState", customerSessionState));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_customer_sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCustomerSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export triggered effects Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportEffects (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportEffectsWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export triggered effects Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportEffectsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_effects", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportEffects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export triggered effects Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportEffectsAsync (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportEffectsAsyncWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export triggered effects Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportEffectsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_effects", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportEffects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer loyalty balance to CSV ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyBalance (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyBalanceWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer loyalty balance to CSV ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyBalanceWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyBalance");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/export_customer_balance", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer loyalty balance to CSV ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyBalanceAsync (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyBalanceAsyncWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer loyalty balance to CSV ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyBalanceAsyncWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyBalance");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/export_customer_balance", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer loyalty balances Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyBalances (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyBalancesWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer loyalty balances Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyBalancesWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyBalances");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/export_customer_balances", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer loyalty balances Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyBalancesAsync (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyBalancesAsyncWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer loyalty balances Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyBalancesAsyncWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyBalances");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/export_customer_balances", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export all card transaction logs Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyCardBalances (int loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyCardBalancesWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export all card transaction logs Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyCardBalancesWithHttpInfo (int loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/export_card_balances", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export all card transaction logs Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyCardBalancesAsync (int loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyCardBalancesAsyncWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export all card transaction logs Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyCardBalancesAsyncWithHttpInfo (int loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/export_card_balances", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export card&#39;s ledger log Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyCardLedger (int loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyCardLedgerWithHttpInfo(loyaltyProgramId, loyaltyCardId, rangeStart, rangeEnd, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export card&#39;s ledger log Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyCardLedgerWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->ExportLoyaltyCardLedger");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/export_log", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export card&#39;s ledger log Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyCardLedgerAsync (int loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyCardLedgerAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, rangeStart, rangeEnd, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export card&#39;s ledger log Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyCardLedgerAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->ExportLoyaltyCardLedger");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/export_log", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer&#39;s transaction logs Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The type of the loyalty program. - &#x60;name&#x60;: The name of the loyalty program. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyLedger (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyLedgerWithHttpInfo(rangeStart, rangeEnd, loyaltyProgramId, integrationId, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer&#39;s transaction logs Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The type of the loyalty program. - &#x60;name&#x60;: The name of the loyalty program. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyLedgerWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyLedger");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->ExportLoyaltyLedger");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/export_log", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer&#39;s transaction logs Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The type of the loyalty program. - &#x60;name&#x60;: The name of the loyalty program. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyLedgerAsync (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyLedgerAsyncWithHttpInfo(rangeStart, rangeEnd, loyaltyProgramId, integrationId, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer&#39;s transaction logs Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The type of the loyalty program. - &#x60;name&#x60;: The name of the loyalty program. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyLedgerAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyLedger");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->ExportLoyaltyLedger");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/export_log", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export referrals Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportReferrals (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportReferralsWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, valid, usable, batchId, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export referrals Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportReferralsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_referrals", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportReferrals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export referrals Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportReferralsAsync (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportReferralsAsyncWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, valid, usable, batchId, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export referrals Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportReferralsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_referrals", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportReferrals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls sent to the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 GetAccessLogsWithoutTotalCount (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20018> localVarResponse = GetAccessLogsWithoutTotalCountWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls sent to the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20018 > GetAccessLogsWithoutTotalCountWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20018 >("/v1/applications/{applicationId}/access_logs/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccessLogsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls sent to the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> GetAccessLogsWithoutTotalCountAsync (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20018> localVarResponse = await GetAccessLogsWithoutTotalCountAsyncWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls sent to the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20018>> GetAccessLogsWithoutTotalCountAsyncWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20018>("/v1/applications/{applicationId}/access_logs/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccessLogsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Account</returns>
        public Account GetAccount (int accountId)
        {
             TalonOne.Client.ApiResponse<Account> localVarResponse = GetAccountWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>ApiResponse of Account</returns>
        public TalonOne.Client.ApiResponse< Account > GetAccountWithHttpInfo (int accountId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Account >("/v1/accounts/{accountId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> GetAccountAsync (int accountId)
        {
             TalonOne.Client.ApiResponse<Account> localVarResponse = await GetAccountAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Account>> GetAccountAsyncWithHttpInfo (int accountId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Account>("/v1/accounts/{accountId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account analytics Return the analytics of your Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>AccountAnalytics</returns>
        public AccountAnalytics GetAccountAnalytics (int accountId)
        {
             TalonOne.Client.ApiResponse<AccountAnalytics> localVarResponse = GetAccountAnalyticsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account analytics Return the analytics of your Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>ApiResponse of AccountAnalytics</returns>
        public TalonOne.Client.ApiResponse< AccountAnalytics > GetAccountAnalyticsWithHttpInfo (int accountId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountAnalytics >("/v1/accounts/{accountId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account analytics Return the analytics of your Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of AccountAnalytics</returns>
        public async System.Threading.Tasks.Task<AccountAnalytics> GetAccountAnalyticsAsync (int accountId)
        {
             TalonOne.Client.ApiResponse<AccountAnalytics> localVarResponse = await GetAccountAnalyticsAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account analytics Return the analytics of your Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of ApiResponse (AccountAnalytics)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAnalytics>> GetAccountAnalyticsAsyncWithHttpInfo (int accountId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountAnalytics>("/v1/accounts/{accountId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account-level collection Retrieve a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Collection</returns>
        public Collection GetAccountCollection (int collectionId)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = GetAccountCollectionWithHttpInfo(collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account-level collection Retrieve a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > GetAccountCollectionWithHttpInfo (int collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Collection >("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account-level collection Retrieve a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> GetAccountCollectionAsync (int collectionId)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await GetAccountCollectionAsyncWithHttpInfo(collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account-level collection Retrieve a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> GetAccountCollectionAsyncWithHttpInfo (int collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Collection>("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get additional cost Returns the additional cost. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost GetAdditionalCost (int additionalCostId)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = GetAdditionalCostWithHttpInfo(additionalCostId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get additional cost Returns the additional cost. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public TalonOne.Client.ApiResponse< AccountAdditionalCost > GetAdditionalCostWithHttpInfo (int additionalCostId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountAdditionalCost >("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get additional cost Returns the additional cost. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> GetAdditionalCostAsync (int additionalCostId)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = await GetAdditionalCostAsyncWithHttpInfo(additionalCostId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get additional cost Returns the additional cost. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAdditionalCost>> GetAdditionalCostAsyncWithHttpInfo (int additionalCostId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountAdditionalCost>("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 GetAdditionalCosts (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20032> localVarResponse = GetAdditionalCostsWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20032 > GetAdditionalCostsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20032 >("/v1/additional_costs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032> GetAdditionalCostsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20032> localVarResponse = await GetAdditionalCostsAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20032>> GetAdditionalCostsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20032>("/v1/additional_costs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 GetAllAccessLogs (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20019> localVarResponse = GetAllAccessLogsWithHttpInfo(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20019 > GetAllAccessLogsWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20019 >("/v1/access_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAccessLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> GetAllAccessLogsAsync (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20019> localVarResponse = await GetAllAccessLogsAsyncWithHttpInfo(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20019>> GetAllAccessLogsAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20019>("/v1/access_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAccessLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20040</returns>
        public InlineResponse20040 GetAllRoles ()
        {
             TalonOne.Client.ApiResponse<InlineResponse20040> localVarResponse = GetAllRolesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20040 > GetAllRolesWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20040 >("/v1/roles", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20040</returns>
        public async System.Threading.Tasks.Task<InlineResponse20040> GetAllRolesAsync ()
        {
             TalonOne.Client.ApiResponse<InlineResponse20040> localVarResponse = await GetAllRolesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20040>> GetAllRolesAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20040>("/v1/roles", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Application</returns>
        public Application GetApplication (int applicationId)
        {
             TalonOne.Client.ApiResponse<Application> localVarResponse = GetApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Application</returns>
        public TalonOne.Client.ApiResponse< Application > GetApplicationWithHttpInfo (int applicationId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Application >("/v1/applications/{applicationId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> GetApplicationAsync (int applicationId)
        {
             TalonOne.Client.ApiResponse<Application> localVarResponse = await GetApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Application>> GetApplicationAsyncWithHttpInfo (int applicationId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Application>("/v1/applications/{applicationId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application health Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApplicationApiHealth</returns>
        public ApplicationApiHealth GetApplicationApiHealth (int applicationId)
        {
             TalonOne.Client.ApiResponse<ApplicationApiHealth> localVarResponse = GetApplicationApiHealthWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application health Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of ApplicationApiHealth</returns>
        public TalonOne.Client.ApiResponse< ApplicationApiHealth > GetApplicationApiHealthWithHttpInfo (int applicationId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApplicationApiHealth >("/v1/applications/{applicationId}/health_report", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationApiHealth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application health Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApplicationApiHealth</returns>
        public async System.Threading.Tasks.Task<ApplicationApiHealth> GetApplicationApiHealthAsync (int applicationId)
        {
             TalonOne.Client.ApiResponse<ApplicationApiHealth> localVarResponse = await GetApplicationApiHealthAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application health Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (ApplicationApiHealth)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ApplicationApiHealth>> GetApplicationApiHealthAsyncWithHttpInfo (int applicationId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationApiHealth>("/v1/applications/{applicationId}/health_report", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationApiHealth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApplicationCustomer</returns>
        public ApplicationCustomer GetApplicationCustomer (int applicationId, int customerId)
        {
             TalonOne.Client.ApiResponse<ApplicationCustomer> localVarResponse = GetApplicationCustomerWithHttpInfo(applicationId, customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApiResponse of ApplicationCustomer</returns>
        public TalonOne.Client.ApiResponse< ApplicationCustomer > GetApplicationCustomerWithHttpInfo (int applicationId, int customerId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApplicationCustomer >("/v1/applications/{applicationId}/customers/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApplicationCustomer</returns>
        public async System.Threading.Tasks.Task<ApplicationCustomer> GetApplicationCustomerAsync (int applicationId, int customerId)
        {
             TalonOne.Client.ApiResponse<ApplicationCustomer> localVarResponse = await GetApplicationCustomerAsyncWithHttpInfo(applicationId, customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApiResponse (ApplicationCustomer)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ApplicationCustomer>> GetApplicationCustomerAsyncWithHttpInfo (int applicationId, int customerId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationCustomer>("/v1/applications/{applicationId}/customers/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20030</returns>
        public InlineResponse20030 GetApplicationCustomerFriends (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20030> localVarResponse = GetApplicationCustomerFriendsWithHttpInfo(applicationId, integrationId, pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20030 > GetApplicationCustomerFriendsWithHttpInfo (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetApplicationCustomerFriends");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20030 >("/v1/applications/{applicationId}/profile/{integrationId}/friends", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomerFriends", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20030</returns>
        public async System.Threading.Tasks.Task<InlineResponse20030> GetApplicationCustomerFriendsAsync (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20030> localVarResponse = await GetApplicationCustomerFriendsAsyncWithHttpInfo(applicationId, integrationId, pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20030>> GetApplicationCustomerFriendsAsyncWithHttpInfo (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetApplicationCustomerFriends");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20030>("/v1/applications/{applicationId}/profile/{integrationId}/friends", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomerFriends", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GetApplicationCustomers (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20021> localVarResponse = GetApplicationCustomersWithHttpInfo(applicationId, integrationId, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20021 > GetApplicationCustomersWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20021 >("/v1/applications/{applicationId}/customers", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> GetApplicationCustomersAsync (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20021> localVarResponse = await GetApplicationCustomersAsyncWithHttpInfo(applicationId, integrationId, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20021>> GetApplicationCustomersAsyncWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20021>("/v1/applications/{applicationId}/customers", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GetApplicationCustomersByAttributes (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20022> localVarResponse = GetApplicationCustomersByAttributesWithHttpInfo(applicationId, body, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20022 > GetApplicationCustomersByAttributesWithHttpInfo (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetApplicationCustomersByAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20022 >("/v1/applications/{applicationId}/customer_search", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GetApplicationCustomersByAttributesAsync (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20022> localVarResponse = await GetApplicationCustomersByAttributesAsyncWithHttpInfo(applicationId, body, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20022>> GetApplicationCustomersByAttributesAsyncWithHttpInfo (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetApplicationCustomersByAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20022>("/v1/applications/{applicationId}/customer_search", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 GetApplicationEventTypes (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20028> localVarResponse = GetApplicationEventTypesWithHttpInfo(applicationId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20028 > GetApplicationEventTypesWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20028 >("/v1/applications/{applicationId}/event_types", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> GetApplicationEventTypesAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20028> localVarResponse = await GetApplicationEventTypesAsyncWithHttpInfo(applicationId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20028>> GetApplicationEventTypesAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20028>("/v1/applications/{applicationId}/event_types", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GetApplicationEventsWithoutTotalCount (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20027> localVarResponse = GetApplicationEventsWithoutTotalCountWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20027 > GetApplicationEventsWithoutTotalCountWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (session != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "session", session));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (customerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerName", customerName));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerEmail", customerEmail));
            }
            if (couponCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "couponCode", couponCode));
            }
            if (referralCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralCode", referralCode));
            }
            if (ruleQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "ruleQuery", ruleQuery));
            }
            if (campaignQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignQuery", campaignQuery));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20027 >("/v1/applications/{applicationId}/events/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> GetApplicationEventsWithoutTotalCountAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20027> localVarResponse = await GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20027>> GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (session != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "session", session));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (customerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerName", customerName));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerEmail", customerEmail));
            }
            if (couponCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "couponCode", couponCode));
            }
            if (referralCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralCode", referralCode));
            }
            if (ruleQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "ruleQuery", ruleQuery));
            }
            if (campaignQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignQuery", campaignQuery));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20027>("/v1/applications/{applicationId}/events/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>ApplicationSession</returns>
        public ApplicationSession GetApplicationSession (int applicationId, int sessionId)
        {
             TalonOne.Client.ApiResponse<ApplicationSession> localVarResponse = GetApplicationSessionWithHttpInfo(applicationId, sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>ApiResponse of ApplicationSession</returns>
        public TalonOne.Client.ApiResponse< ApplicationSession > GetApplicationSessionWithHttpInfo (int applicationId, int sessionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", TalonOne.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApplicationSession >("/v1/applications/{applicationId}/sessions/{sessionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>Task of ApplicationSession</returns>
        public async System.Threading.Tasks.Task<ApplicationSession> GetApplicationSessionAsync (int applicationId, int sessionId)
        {
             TalonOne.Client.ApiResponse<ApplicationSession> localVarResponse = await GetApplicationSessionAsyncWithHttpInfo(applicationId, sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>Task of ApiResponse (ApplicationSession)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ApplicationSession>> GetApplicationSessionAsyncWithHttpInfo (int applicationId, int sessionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", TalonOne.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationSession>("/v1/applications/{applicationId}/sessions/{sessionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GetApplicationSessions (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20026> localVarResponse = GetApplicationSessionsWithHttpInfo(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20026 > GetApplicationSessionsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (coupon != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "coupon", coupon));
            }
            if (referral != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referral", referral));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20026 >("/v1/applications/{applicationId}/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GetApplicationSessionsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20026> localVarResponse = await GetApplicationSessionsAsyncWithHttpInfo(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20026>> GetApplicationSessionsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (coupon != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "coupon", coupon));
            }
            if (referral != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referral", referral));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20026>("/v1/applications/{applicationId}/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications List all applications in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetApplications (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2003> localVarResponse = GetApplicationsWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications List all applications in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2003 > GetApplicationsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2003 >("/v1/applications", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications List all applications in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetApplicationsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2003> localVarResponse = await GetApplicationsAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications List all applications in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2003>> GetApplicationsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/v1/applications", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get custom attribute Retrieve the specified custom attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Attribute</returns>
        public Attribute GetAttribute (int attributeId)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = GetAttributeWithHttpInfo(attributeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get custom attribute Retrieve the specified custom attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>ApiResponse of Attribute</returns>
        public TalonOne.Client.ApiResponse< Attribute > GetAttributeWithHttpInfo (int attributeId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Attribute >("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get custom attribute Retrieve the specified custom attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> GetAttributeAsync (int attributeId)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = await GetAttributeAsyncWithHttpInfo(attributeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get custom attribute Retrieve the specified custom attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Attribute>> GetAttributeAsyncWithHttpInfo (int attributeId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Attribute>("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List custom attributes Return all the custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 GetAttributes (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20031> localVarResponse = GetAttributesWithHttpInfo(pageSize, skip, sort, entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List custom attributes Return all the custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20031 > GetAttributesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20031 >("/v1/attributes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List custom attributes Return all the custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> GetAttributesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20031> localVarResponse = await GetAttributesAsyncWithHttpInfo(pageSize, skip, sort, entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List custom attributes Return all the custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20031>> GetAttributesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20031>("/v1/attributes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List audiences Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 GetAudiences (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20029> localVarResponse = GetAudiencesWithHttpInfo(pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List audiences Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20029 > GetAudiencesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20029 >("/v1/audiences", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudiences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List audiences Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> GetAudiencesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20029> localVarResponse = await GetAudiencesAsyncWithHttpInfo(pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List audiences Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20029>> GetAudiencesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20029>("/v1/audiences", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudiences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Campaign</returns>
        public Campaign GetCampaign (int applicationId, int campaignId)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = GetCampaignWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Campaign</returns>
        public TalonOne.Client.ApiResponse< Campaign > GetCampaignWithHttpInfo (int applicationId, int campaignId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Campaign >("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> GetCampaignAsync (int applicationId, int campaignId)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = await GetCampaignAsyncWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Campaign>> GetCampaignAsyncWithHttpInfo (int applicationId, int campaignId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Campaign>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GetCampaignAnalytics (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20020> localVarResponse = GetCampaignAnalyticsWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, granularity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20020 > GetCampaignAnalyticsWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20020 >("/v1/applications/{applicationId}/campaigns/{campaignId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> GetCampaignAnalyticsAsync (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20020> localVarResponse = await GetCampaignAnalyticsAsyncWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, granularity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20020>> GetCampaignAnalyticsAsyncWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/v1/applications/{applicationId}/campaigns/{campaignId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetCampaignByAttributes (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = GetCampaignByAttributesWithHttpInfo(applicationId, body, pageSize, skip, sort, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2004 > GetCampaignByAttributesWithHttpInfo (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCampaignByAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2004 >("/v1/applications/{applicationId}/campaigns_search", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetCampaignByAttributesAsync (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = await GetCampaignByAttributesAsyncWithHttpInfo(applicationId, body, pageSize, skip, sort, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2004>> GetCampaignByAttributesAsyncWithHttpInfo (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCampaignByAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2004>("/v1/applications/{applicationId}/campaigns_search", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign templates Retrieve a list of campaign templates.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 GetCampaignTemplates (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), int? userId = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20010> localVarResponse = GetCampaignTemplatesWithHttpInfo(pageSize, skip, sort, state, name, tags, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaign templates Retrieve a list of campaign templates.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20010 > GetCampaignTemplatesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), int? userId = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20010 >("/v1/campaign_templates", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign templates Retrieve a list of campaign templates.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> GetCampaignTemplatesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), int? userId = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20010> localVarResponse = await GetCampaignTemplatesAsyncWithHttpInfo(pageSize, skip, sort, state, name, tags, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaign templates Retrieve a list of campaign templates.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20010>> GetCampaignTemplatesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), int? userId = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20010>("/v1/campaign_templates", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns List the campaigns of the specified application that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetCampaigns (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = GetCampaignsWithHttpInfo(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaigns List the campaigns of the specified application that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2004 > GetCampaignsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (campaignGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignGroupId", campaignGroupId));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2004 >("/v1/applications/{applicationId}/campaigns", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaigns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns List the campaigns of the specified application that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetCampaignsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = await GetCampaignsAsyncWithHttpInfo(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId, templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaigns List the campaigns of the specified application that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2004>> GetCampaignsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (campaignGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignGroupId", campaignGroupId));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/v1/applications/{applicationId}/campaigns", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaigns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit logs for an account Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>InlineResponse20038</returns>
        public InlineResponse20038 GetChanges (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), int? managementKeyId = default(int?), bool? includeOld = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20038> localVarResponse = GetChangesWithHttpInfo(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, managementKeyId, includeOld);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit logs for an account Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20038 > GetChangesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), int? managementKeyId = default(int?), bool? includeOld = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (entityPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entityPath", entityPath));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (managementKeyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "managementKeyId", managementKeyId));
            }
            if (includeOld != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOld", includeOld));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20038 >("/v1/changes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit logs for an account Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of InlineResponse20038</returns>
        public async System.Threading.Tasks.Task<InlineResponse20038> GetChangesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), int? managementKeyId = default(int?), bool? includeOld = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20038> localVarResponse = await GetChangesAsyncWithHttpInfo(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, managementKeyId, includeOld);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get audit logs for an account Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20038>> GetChangesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), int? managementKeyId = default(int?), bool? includeOld = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (entityPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entityPath", entityPath));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (managementKeyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "managementKeyId", managementKeyId));
            }
            if (includeOld != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOld", includeOld));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20038>("/v1/changes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get collection Retrieve a given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Collection</returns>
        public Collection GetCollection (int applicationId, int campaignId, int collectionId)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = GetCollectionWithHttpInfo(applicationId, campaignId, collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection Retrieve a given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > GetCollectionWithHttpInfo (int applicationId, int campaignId, int collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Collection >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get collection Retrieve a given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> GetCollectionAsync (int applicationId, int campaignId, int collectionId)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await GetCollectionAsyncWithHttpInfo(applicationId, campaignId, collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection Retrieve a given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> GetCollectionAsyncWithHttpInfo (int applicationId, int campaignId, int collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Collection>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get collection items Retrieve the items from the given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 GetCollectionItems (int collectionId, int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20016> localVarResponse = GetCollectionItemsWithHttpInfo(collectionId, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection items Retrieve the items from the given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20016 > GetCollectionItemsWithHttpInfo (int collectionId, int? pageSize = default(int?), int? skip = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20016 >("/v1/collections/{collectionId}/items", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get collection items Retrieve the items from the given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> GetCollectionItemsAsync (int collectionId, int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20016> localVarResponse = await GetCollectionItemsAsyncWithHttpInfo(collectionId, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection items Retrieve the items from the given collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20016>> GetCollectionItemsAsyncWithHttpInfo (int collectionId, int? pageSize = default(int?), int? skip = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20016>("/v1/collections/{collectionId}/items", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetCouponsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = GetCouponsWithoutTotalCountWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2008 > GetCouponsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2008 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCouponsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> GetCouponsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = await GetCouponsWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2008>> GetCouponsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCouponsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>CustomerActivityReport</returns>
        public CustomerActivityReport GetCustomerActivityReport (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<CustomerActivityReport> localVarResponse = GetCustomerActivityReportWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of CustomerActivityReport</returns>
        public TalonOne.Client.ApiResponse< CustomerActivityReport > GetCustomerActivityReportWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CustomerActivityReport >("/v1/applications/{applicationId}/customer_activity_reports/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of CustomerActivityReport</returns>
        public async System.Threading.Tasks.Task<CustomerActivityReport> GetCustomerActivityReportAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<CustomerActivityReport> localVarResponse = await GetCustomerActivityReportAsyncWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (CustomerActivityReport)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CustomerActivityReport>> GetCustomerActivityReportAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerActivityReport>("/v1/applications/{applicationId}/customer_activity_reports/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GetCustomerActivityReportsWithoutTotalCount (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20025> localVarResponse = GetCustomerActivityReportsWithoutTotalCountWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20025 > GetCustomerActivityReportsWithoutTotalCountWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (campaignName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignName", campaignName));
            }
            if (advocateName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocateName", advocateName));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20025 >("/v1/applications/{applicationId}/customer_activity_reports/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReportsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> GetCustomerActivityReportsWithoutTotalCountAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20025> localVarResponse = await GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="rangeEnd">Only return results from before this timestamp. This must be an RFC3339 timestamp string.</param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20025>> GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (campaignName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignName", campaignName));
            }
            if (advocateName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocateName", advocateName));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20025>("/v1/applications/{applicationId}/customer_activity_reports/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReportsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>CustomerAnalytics</returns>
        public CustomerAnalytics GetCustomerAnalytics (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<CustomerAnalytics> localVarResponse = GetCustomerAnalyticsWithHttpInfo(applicationId, customerId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of CustomerAnalytics</returns>
        public TalonOne.Client.ApiResponse< CustomerAnalytics > GetCustomerAnalyticsWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CustomerAnalytics >("/v1/applications/{applicationId}/customers/{customerId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of CustomerAnalytics</returns>
        public async System.Threading.Tasks.Task<CustomerAnalytics> GetCustomerAnalyticsAsync (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<CustomerAnalytics> localVarResponse = await GetCustomerAnalyticsAsyncWithHttpInfo(applicationId, customerId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (CustomerAnalytics)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CustomerAnalytics>> GetCustomerAnalyticsAsyncWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerAnalytics>("/v1/applications/{applicationId}/customers/{customerId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>CustomerProfile</returns>
        public CustomerProfile GetCustomerProfile (int customerId)
        {
             TalonOne.Client.ApiResponse<CustomerProfile> localVarResponse = GetCustomerProfileWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApiResponse of CustomerProfile</returns>
        public TalonOne.Client.ApiResponse< CustomerProfile > GetCustomerProfileWithHttpInfo (int customerId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CustomerProfile >("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of CustomerProfile</returns>
        public async System.Threading.Tasks.Task<CustomerProfile> GetCustomerProfileAsync (int customerId)
        {
             TalonOne.Client.ApiResponse<CustomerProfile> localVarResponse = await GetCustomerProfileAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApiResponse (CustomerProfile)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CustomerProfile>> GetCustomerProfileAsyncWithHttpInfo (int customerId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerProfile>("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GetCustomerProfiles (int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20024> localVarResponse = GetCustomerProfilesWithHttpInfo(pageSize, skip, sandbox);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20024 > GetCustomerProfilesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sandbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sandbox", sandbox));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20024 >("/v1/customers/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> GetCustomerProfilesAsync (int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20024> localVarResponse = await GetCustomerProfilesAsyncWithHttpInfo(pageSize, skip, sandbox);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20024>> GetCustomerProfilesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sandbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sandbox", sandbox));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20024>("/v1/customers/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 GetCustomersByAttributes (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20023> localVarResponse = GetCustomersByAttributesWithHttpInfo(body, pageSize, skip, sandbox);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20023 > GetCustomersByAttributesWithHttpInfo (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCustomersByAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sandbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sandbox", sandbox));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20023 >("/v1/customer_search/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> GetCustomersByAttributesAsync (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20023> localVarResponse = await GetCustomersByAttributesAsyncWithHttpInfo(body, pageSize, skip, sandbox);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or Live customer. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20023>> GetCustomersByAttributesAsyncWithHttpInfo (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? sandbox = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCustomersByAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sandbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sandbox", sandbox));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20023>("/v1/customer_search/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 GetEventTypes (string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20036> localVarResponse = GetEventTypesWithHttpInfo(name, includeOldVersions, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20036 > GetEventTypesWithHttpInfo (string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (includeOldVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOldVersions", includeOldVersions));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20036 >("/v1/event_types", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036> GetEventTypesAsync (string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20036> localVarResponse = await GetEventTypesAsyncWithHttpInfo(name, includeOldVersions, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20036>> GetEventTypesAsyncWithHttpInfo (string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (includeOldVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOldVersions", includeOldVersions));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20036>("/v1/event_types", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>InlineResponse20039</returns>
        public InlineResponse20039 GetExports (int? pageSize = default(int?), int? skip = default(int?), decimal? applicationId = default(decimal?), int? campaignId = default(int?), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20039> localVarResponse = GetExportsWithHttpInfo(pageSize, skip, applicationId, campaignId, entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20039 > GetExportsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), decimal? applicationId = default(decimal?), int? campaignId = default(int?), string entity = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20039 >("/v1/exports", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExports", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of InlineResponse20039</returns>
        public async System.Threading.Tasks.Task<InlineResponse20039> GetExportsAsync (int? pageSize = default(int?), int? skip = default(int?), decimal? applicationId = default(decimal?), int? campaignId = default(int?), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20039> localVarResponse = await GetExportsAsyncWithHttpInfo(pageSize, skip, applicationId, campaignId, entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20039>> GetExportsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), decimal? applicationId = default(decimal?), int? campaignId = default(int?), string entity = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20039>("/v1/exports", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExports", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty card Get the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>LoyaltyCard</returns>
        public LoyaltyCard GetLoyaltyCard (int loyaltyProgramId, string loyaltyCardId)
        {
             TalonOne.Client.ApiResponse<LoyaltyCard> localVarResponse = GetLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty card Get the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyCard</returns>
        public TalonOne.Client.ApiResponse< LoyaltyCard > GetLoyaltyCardWithHttpInfo (int loyaltyProgramId, string loyaltyCardId)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->GetLoyaltyCard");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyCard >("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty card Get the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of LoyaltyCard</returns>
        public async System.Threading.Tasks.Task<LoyaltyCard> GetLoyaltyCardAsync (int loyaltyProgramId, string loyaltyCardId)
        {
             TalonOne.Client.ApiResponse<LoyaltyCard> localVarResponse = await GetLoyaltyCardAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty card Get the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyCard)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyCard>> GetLoyaltyCardAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->GetLoyaltyCard");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyCard>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List card&#39;s transactions Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 GetLoyaltyCardTransactionLogs (int loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?), string subledgerId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20014> localVarResponse = GetLoyaltyCardTransactionLogsWithHttpInfo(loyaltyProgramId, loyaltyCardId, startDate, endDate, pageSize, skip, subledgerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List card&#39;s transactions Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20014 > GetLoyaltyCardTransactionLogsWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?), string subledgerId = default(string))
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->GetLoyaltyCardTransactionLogs");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (subledgerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "subledgerId", subledgerId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20014 >("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCardTransactionLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List card&#39;s transactions Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> GetLoyaltyCardTransactionLogsAsync (int loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?), string subledgerId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20014> localVarResponse = await GetLoyaltyCardTransactionLogsAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, startDate, endDate, pageSize, skip, subledgerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List card&#39;s transactions Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20014>> GetLoyaltyCardTransactionLogsAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?), string subledgerId = default(string))
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->GetLoyaltyCardTransactionLogs");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (subledgerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "subledgerId", subledgerId));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20014>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCardTransactionLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty cards For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="identifier">Optional query parameter to search cards by identifier. (optional)</param>
        /// <param name="profileId">Filter by the profile ID. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetLoyaltyCards (int loyaltyProgramId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string identifier = default(string), int? profileId = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20013> localVarResponse = GetLoyaltyCardsWithHttpInfo(loyaltyProgramId, pageSize, skip, sort, identifier, profileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loyalty cards For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="identifier">Optional query parameter to search cards by identifier. (optional)</param>
        /// <param name="profileId">Filter by the profile ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20013 > GetLoyaltyCardsWithHttpInfo (int loyaltyProgramId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string identifier = default(string), int? profileId = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (profileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileId", profileId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20013 >("/v1/loyalty_programs/{loyaltyProgramId}/cards", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty cards For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="identifier">Optional query parameter to search cards by identifier. (optional)</param>
        /// <param name="profileId">Filter by the profile ID. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetLoyaltyCardsAsync (int loyaltyProgramId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string identifier = default(string), int? profileId = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20013> localVarResponse = await GetLoyaltyCardsAsyncWithHttpInfo(loyaltyProgramId, pageSize, skip, sort, identifier, profileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loyalty cards For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="identifier">Optional query parameter to search cards by identifier. (optional)</param>
        /// <param name="profileId">Filter by the profile ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20013>> GetLoyaltyCardsAsyncWithHttpInfo (int loyaltyProgramId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string identifier = default(string), int? profileId = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (profileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileId", profileId));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20013>("/v1/loyalty_programs/{loyaltyProgramId}/cards", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s full loyalty ledger Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <returns>LoyaltyLedger</returns>
        public LoyaltyLedger GetLoyaltyPoints (string loyaltyProgramId, string integrationId)
        {
             TalonOne.Client.ApiResponse<LoyaltyLedger> localVarResponse = GetLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer&#39;s full loyalty ledger Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <returns>ApiResponse of LoyaltyLedger</returns>
        public TalonOne.Client.ApiResponse< LoyaltyLedger > GetLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->GetLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetLoyaltyPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyLedger >("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s full loyalty ledger Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <returns>Task of LoyaltyLedger</returns>
        public async System.Threading.Tasks.Task<LoyaltyLedger> GetLoyaltyPointsAsync (string loyaltyProgramId, string integrationId)
        {
             TalonOne.Client.ApiResponse<LoyaltyLedger> localVarResponse = await GetLoyaltyPointsAsyncWithHttpInfo(loyaltyProgramId, integrationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer&#39;s full loyalty ledger Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <returns>Task of ApiResponse (LoyaltyLedger)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyLedger>> GetLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->GetLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetLoyaltyPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyLedger>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>LoyaltyProgram</returns>
        public LoyaltyProgram GetLoyaltyProgram (int loyaltyProgramId)
        {
             TalonOne.Client.ApiResponse<LoyaltyProgram> localVarResponse = GetLoyaltyProgramWithHttpInfo(loyaltyProgramId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        public TalonOne.Client.ApiResponse< LoyaltyProgram > GetLoyaltyProgramWithHttpInfo (int loyaltyProgramId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyProgram >("/v1/loyalty_programs/{loyaltyProgramId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of LoyaltyProgram</returns>
        public async System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramAsync (int loyaltyProgramId)
        {
             TalonOne.Client.ApiResponse<LoyaltyProgram> localVarResponse = await GetLoyaltyProgramAsyncWithHttpInfo(loyaltyProgramId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyProgram>> GetLoyaltyProgramAsyncWithHttpInfo (int loyaltyProgramId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyProgram>("/v1/loyalty_programs/{loyaltyProgramId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty program transactions Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 50)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetLoyaltyProgramTransactions (int loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20012> localVarResponse = GetLoyaltyProgramTransactionsWithHttpInfo(loyaltyProgramId, loyaltyTransactionType, subledgerId, startDate, endDate, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loyalty program transactions Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 50)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20012 > GetLoyaltyProgramTransactionsWithHttpInfo (int loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (loyaltyTransactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "loyaltyTransactionType", loyaltyTransactionType));
            }
            if (subledgerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "subledgerId", subledgerId));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20012 >("/v1/loyalty_programs/{loyaltyProgramId}/transactions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgramTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty program transactions Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 50)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GetLoyaltyProgramTransactionsAsync (int loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20012> localVarResponse = await GetLoyaltyProgramTransactionsAsyncWithHttpInfo(loyaltyProgramId, loyaltyTransactionType, subledgerId, startDate, endDate, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loyalty program transactions Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 50)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20012>> GetLoyaltyProgramTransactionsAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? pageSize = default(int?), int? skip = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (loyaltyTransactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "loyaltyTransactionType", loyaltyTransactionType));
            }
            if (subledgerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "subledgerId", subledgerId));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/v1/loyalty_programs/{loyaltyProgramId}/transactions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgramTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetLoyaltyPrograms ()
        {
             TalonOne.Client.ApiResponse<InlineResponse20011> localVarResponse = GetLoyaltyProgramsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20011 > GetLoyaltyProgramsWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/v1/loyalty_programs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPrograms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> GetLoyaltyProgramsAsync ()
        {
             TalonOne.Client.ApiResponse<InlineResponse20011> localVarResponse = await GetLoyaltyProgramsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20011>> GetLoyaltyProgramsAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/v1/loyalty_programs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPrograms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program statistics Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>LoyaltyStatistics</returns>
        public LoyaltyStatistics GetLoyaltyStatistics (int loyaltyProgramId)
        {
             TalonOne.Client.ApiResponse<LoyaltyStatistics> localVarResponse = GetLoyaltyStatisticsWithHttpInfo(loyaltyProgramId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty program statistics Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyStatistics</returns>
        public TalonOne.Client.ApiResponse< LoyaltyStatistics > GetLoyaltyStatisticsWithHttpInfo (int loyaltyProgramId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyStatistics >("/v1/loyalty_programs/{loyaltyProgramId}/statistics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program statistics Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of LoyaltyStatistics</returns>
        public async System.Threading.Tasks.Task<LoyaltyStatistics> GetLoyaltyStatisticsAsync (int loyaltyProgramId)
        {
             TalonOne.Client.ApiResponse<LoyaltyStatistics> localVarResponse = await GetLoyaltyStatisticsAsyncWithHttpInfo(loyaltyProgramId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty program statistics Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyStatistics)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyStatistics>> GetLoyaltyStatisticsAsyncWithHttpInfo (int loyaltyProgramId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyStatistics>("/v1/loyalty_programs/{loyaltyProgramId}/statistics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get notification about campaign-related changes Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>NotificationWebhook</returns>
        public NotificationWebhook GetNotificationWebhook (int applicationId, int notificationWebhookId)
        {
             TalonOne.Client.ApiResponse<NotificationWebhook> localVarResponse = GetNotificationWebhookWithHttpInfo(applicationId, notificationWebhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get notification about campaign-related changes Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>ApiResponse of NotificationWebhook</returns>
        public TalonOne.Client.ApiResponse< NotificationWebhook > GetNotificationWebhookWithHttpInfo (int applicationId, int notificationWebhookId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notificationWebhookId", TalonOne.Client.ClientUtils.ParameterToString(notificationWebhookId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NotificationWebhook >("/v1/applications/{applicationId}/notification_webhooks/{notificationWebhookId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get notification about campaign-related changes Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>Task of NotificationWebhook</returns>
        public async System.Threading.Tasks.Task<NotificationWebhook> GetNotificationWebhookAsync (int applicationId, int notificationWebhookId)
        {
             TalonOne.Client.ApiResponse<NotificationWebhook> localVarResponse = await GetNotificationWebhookAsyncWithHttpInfo(applicationId, notificationWebhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get notification about campaign-related changes Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <returns>Task of ApiResponse (NotificationWebhook)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<NotificationWebhook>> GetNotificationWebhookAsyncWithHttpInfo (int applicationId, int notificationWebhookId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notificationWebhookId", TalonOne.Client.ClientUtils.ParameterToString(notificationWebhookId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NotificationWebhook>("/v1/applications/{applicationId}/notification_webhooks/{notificationWebhookId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List notifications about campaign-related changes List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetNotificationWebhooks (int applicationId)
        {
             TalonOne.Client.ApiResponse<InlineResponse2005> localVarResponse = GetNotificationWebhooksWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List notifications about campaign-related changes List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2005 > GetNotificationWebhooksWithHttpInfo (int applicationId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2005 >("/v1/applications/{applicationId}/notification_webhooks", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List notifications about campaign-related changes List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> GetNotificationWebhooksAsync (int applicationId)
        {
             TalonOne.Client.ApiResponse<InlineResponse2005> localVarResponse = await GetNotificationWebhooksAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List notifications about campaign-related changes List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2005>> GetNotificationWebhooksAsyncWithHttpInfo (int applicationId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/v1/applications/{applicationId}/notification_webhooks", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetReferralsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2009> localVarResponse = GetReferralsWithoutTotalCountWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2009 > GetReferralsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (advocate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocate", advocate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2009 >("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReferralsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> GetReferralsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2009> localVarResponse = await GetReferralsWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2009>> GetReferralsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (advocate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocate", advocate));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReferralsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get role Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The Id of role. </param>
        /// <returns>Role</returns>
        public Role GetRole (int roleId)
        {
             TalonOne.Client.ApiResponse<Role> localVarResponse = GetRoleWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get role Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The Id of role. </param>
        /// <returns>ApiResponse of Role</returns>
        public TalonOne.Client.ApiResponse< Role > GetRoleWithHttpInfo (int roleId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleId", TalonOne.Client.ClientUtils.ParameterToString(roleId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Role >("/v1/roles/{roleId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get role Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The Id of role. </param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync (int roleId)
        {
             TalonOne.Client.ApiResponse<Role> localVarResponse = await GetRoleAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get role Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The Id of role. </param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Role>> GetRoleAsyncWithHttpInfo (int roleId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("roleId", TalonOne.Client.ClientUtils.ParameterToString(roleId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Role>("/v1/roles/{roleId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Ruleset</returns>
        public Ruleset GetRuleset (int applicationId, int campaignId, int rulesetId)
        {
             TalonOne.Client.ApiResponse<Ruleset> localVarResponse = GetRulesetWithHttpInfo(applicationId, campaignId, rulesetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>ApiResponse of Ruleset</returns>
        public TalonOne.Client.ApiResponse< Ruleset > GetRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulesetId", TalonOne.Client.ClientUtils.ParameterToString(rulesetId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Ruleset >("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Task of Ruleset</returns>
        public async System.Threading.Tasks.Task<Ruleset> GetRulesetAsync (int applicationId, int campaignId, int rulesetId)
        {
             TalonOne.Client.ApiResponse<Ruleset> localVarResponse = await GetRulesetAsyncWithHttpInfo(applicationId, campaignId, rulesetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Ruleset>> GetRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulesetId", TalonOne.Client.ClientUtils.ParameterToString(rulesetId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Ruleset>("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetRulesets (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2006> localVarResponse = GetRulesetsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2006 > GetRulesetsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2006 >("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRulesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> GetRulesetsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2006> localVarResponse = await GetRulesetsAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2006>> GetRulesetsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRulesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>User</returns>
        public User GetUser (int userId)
        {
             TalonOne.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of User</returns>
        public TalonOne.Client.ApiResponse< User > GetUserWithHttpInfo (int userId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< User >("/v1/users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync (int userId)
        {
             TalonOne.Client.ApiResponse<User> localVarResponse = await GetUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<User>> GetUserAsyncWithHttpInfo (int userId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/v1/users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>InlineResponse20037</returns>
        public InlineResponse20037 GetUsers (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20037> localVarResponse = GetUsersWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20037 > GetUsersWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20037 >("/v1/users", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of InlineResponse20037</returns>
        public async System.Threading.Tasks.Task<InlineResponse20037> GetUsersAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20037> localVarResponse = await GetUsersAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20037>> GetUsersAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20037>("/v1/users", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook Returns a webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Webhook</returns>
        public Webhook GetWebhook (int webhookId)
        {
             TalonOne.Client.ApiResponse<Webhook> localVarResponse = GetWebhookWithHttpInfo(webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook Returns a webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>ApiResponse of Webhook</returns>
        public TalonOne.Client.ApiResponse< Webhook > GetWebhookWithHttpInfo (int webhookId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("webhookId", TalonOne.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Webhook >("/v1/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook Returns a webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> GetWebhookAsync (int webhookId)
        {
             TalonOne.Client.ApiResponse<Webhook> localVarResponse = await GetWebhookAsyncWithHttpInfo(webhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get webhook Returns a webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (int webhookId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("webhookId", TalonOne.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Webhook>("/v1/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20034</returns>
        public InlineResponse20034 GetWebhookActivationLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20034> localVarResponse = GetWebhookActivationLogsWithHttpInfo(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20034 > GetWebhookActivationLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (integrationRequestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationRequestUuid", integrationRequestUuid));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20034 >("/v1/webhook_activation_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookActivationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20034</returns>
        public async System.Threading.Tasks.Task<InlineResponse20034> GetWebhookActivationLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20034> localVarResponse = await GetWebhookActivationLogsAsyncWithHttpInfo(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20034>> GetWebhookActivationLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (integrationRequestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationRequestUuid", integrationRequestUuid));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20034>("/v1/webhook_activation_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookActivationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 GetWebhookLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20035> localVarResponse = GetWebhookLogsWithHttpInfo(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20035 > GetWebhookLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (requestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "requestUuid", requestUuid));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20035 >("/v1/webhook_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035> GetWebhookLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20035> localVarResponse = await GetWebhookLogsAsyncWithHttpInfo(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20035>> GetWebhookLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (requestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "requestUuid", requestUuid));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20035>("/v1/webhook_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application IDs separated by a comma. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 GetWebhooks (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20033> localVarResponse = GetWebhooksWithHttpInfo(applicationIds, sort, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application IDs separated by a comma. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20033 > GetWebhooksWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (applicationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationIds", applicationIds));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20033 >("/v1/webhooks", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application IDs separated by a comma. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033> GetWebhooksAsync (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20033> localVarResponse = await GetWebhooksAsyncWithHttpInfo(applicationIds, sort, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application IDs separated by a comma. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20033>> GetWebhooksAsyncWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (applicationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationIds", applicationIds));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20033>("/v1/webhooks", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import data in existing account-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportAccountCollection (int collectionId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportAccountCollectionWithHttpInfo(collectionId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import data in existing account-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportAccountCollectionWithHttpInfo (int collectionId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/collections/{collectionId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import data in existing account-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportAccountCollectionAsync (int collectionId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportAccountCollectionAsyncWithHttpInfo(collectionId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import data in existing account-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportAccountCollectionAsyncWithHttpInfo (int collectionId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/collections/{collectionId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import allowed values for attribute Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportAllowedList (int attributeId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportAllowedListWithHttpInfo(attributeId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import allowed values for attribute Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportAllowedListWithHttpInfo (int attributeId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/attributes/{attributeId}/allowed_list/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportAllowedList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import allowed values for attribute Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportAllowedListAsync (int attributeId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportAllowedListAsyncWithHttpInfo(attributeId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import allowed values for attribute Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportAllowedListAsyncWithHttpInfo (int attributeId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/attributes/{attributeId}/allowed_list/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportAllowedList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import data in existing collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportCollection (int applicationId, int campaignId, int collectionId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportCollectionWithHttpInfo(applicationId, campaignId, collectionId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import data in existing collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportCollectionWithHttpInfo (int applicationId, int campaignId, int collectionId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import data in existing collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportCollectionAsync (int applicationId, int campaignId, int collectionId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportCollectionAsyncWithHttpInfo(applicationId, campaignId, collectionId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import data in existing collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportCollectionAsyncWithHttpInfo (int applicationId, int campaignId, int collectionId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import coupons Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the coupon entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportCoupons (int applicationId, int campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportCouponsWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import coupons Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the coupon entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportCouponsWithHttpInfo (int applicationId, int campaignId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/applications/{applicationId}/campaigns/{campaignId}/import_coupons", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import coupons Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the coupon entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportCouponsAsync (int applicationId, int campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportCouponsAsyncWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import coupons Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the coupon entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/applications/{applicationId}/campaigns/{campaignId}/import_coupons", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import loyalty cards Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportLoyaltyCards (int loyaltyProgramId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportLoyaltyCardsWithHttpInfo(loyaltyProgramId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import loyalty cards Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportLoyaltyCardsWithHttpInfo (int loyaltyProgramId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/loyalty_programs/{loyaltyProgramId}/import_cards", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import loyalty cards Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportLoyaltyCardsAsync (int loyaltyProgramId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportLoyaltyCardsAsyncWithHttpInfo(loyaltyProgramId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import loyalty cards Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportLoyaltyCardsAsyncWithHttpInfo (int loyaltyProgramId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/loyalty_programs/{loyaltyProgramId}/import_cards", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import loyalty points Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60;: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are &#x60;active&#x60;. - &#x60;expirydate&#x60;: The latest date when the points can be redeemed. After this date, the points are &#x60;expired&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportLoyaltyPoints (int loyaltyProgramId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportLoyaltyPointsWithHttpInfo(loyaltyProgramId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import loyalty points Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60;: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are &#x60;active&#x60;. - &#x60;expirydate&#x60;: The latest date when the points can be redeemed. After this date, the points are &#x60;expired&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportLoyaltyPointsWithHttpInfo (int loyaltyProgramId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/loyalty_programs/{loyaltyProgramId}/import_points", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import loyalty points Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60;: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are &#x60;active&#x60;. - &#x60;expirydate&#x60;: The latest date when the points can be redeemed. After this date, the points are &#x60;expired&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportLoyaltyPointsAsync (int loyaltyProgramId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportLoyaltyPointsAsyncWithHttpInfo(loyaltyProgramId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import loyalty points Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60;: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are &#x60;active&#x60;. - &#x60;expirydate&#x60;: The latest date when the points can be redeemed. After this date, the points are &#x60;expired&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportLoyaltyPointsAsyncWithHttpInfo (int loyaltyProgramId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/loyalty_programs/{loyaltyProgramId}/import_points", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated to the giveaway entity, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportPoolGiveaways (int poolId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportPoolGiveawaysWithHttpInfo(poolId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated to the giveaway entity, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportPoolGiveawaysWithHttpInfo (int poolId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("poolId", TalonOne.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/giveaways/pools/{poolId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportPoolGiveaways", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated to the giveaway entity, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportPoolGiveawaysAsync (int poolId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportPoolGiveawaysAsyncWithHttpInfo(poolId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated to the giveaway entity, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportPoolGiveawaysAsyncWithHttpInfo (int poolId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("poolId", TalonOne.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/giveaways/pools/{poolId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportPoolGiveaways", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import referrals Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the referral entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportReferrals (int applicationId, int campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportReferralsWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import referrals Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the referral entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportReferralsWithHttpInfo (int applicationId, int campaignId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/applications/{applicationId}/campaigns/{campaignId}/import_referrals", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportReferrals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import referrals Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the referral entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportReferralsAsync (int applicationId, int campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportReferralsAsyncWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import referrals Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the referral entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportReferralsAsyncWithHttpInfo (int applicationId, int campaignId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/applications/{applicationId}/campaigns/{campaignId}/import_referrals", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportReferrals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections in account List collections in account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 ListAccountCollections (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20015> localVarResponse = ListAccountCollectionsWithHttpInfo(pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List collections in account List collections in account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20015 > ListAccountCollectionsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20015 >("/v1/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections in account List collections in account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> ListAccountCollectionsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20015> localVarResponse = await ListAccountCollectionsAsyncWithHttpInfo(pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List collections in account List collections in account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20015>> ListAccountCollectionsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20015>("/v1/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections List collections in the campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 ListCollections (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20017> localVarResponse = ListCollectionsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List collections List collections in the campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20017 > ListCollectionsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20017 >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections List collections in the campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> ListCollectionsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20017> localVarResponse = await ListCollectionsAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List collections List collections in the campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20017>> ListCollectionsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20017>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections in application List collections from all campaigns in the Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 ListCollectionsInApplication (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20017> localVarResponse = ListCollectionsInApplicationWithHttpInfo(applicationId, pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List collections in application List collections from all campaigns in the Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20017 > ListCollectionsInApplicationWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20017 >("/v1/applications/{applicationId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollectionsInApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections in application List collections from all campaigns in the Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> ListCollectionsInApplicationAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20017> localVarResponse = await ListCollectionsInApplicationAsyncWithHttpInfo(applicationId, pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List collections in application List collections from all campaigns in the Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by the name of the Collection. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20017>> ListCollectionsInApplicationAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20017>("/v1/applications/{applicationId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollectionsInApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create notification about added or deducted loyalty points Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>BaseNotification</returns>
        public BaseNotification PostAddedDeductedPointsNotification (int loyaltyProgramId, NewBaseNotification body)
        {
             TalonOne.Client.ApiResponse<BaseNotification> localVarResponse = PostAddedDeductedPointsNotificationWithHttpInfo(loyaltyProgramId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create notification about added or deducted loyalty points Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of BaseNotification</returns>
        public TalonOne.Client.ApiResponse< BaseNotification > PostAddedDeductedPointsNotificationWithHttpInfo (int loyaltyProgramId, NewBaseNotification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->PostAddedDeductedPointsNotification");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< BaseNotification >("/v1/loyalty_programs/{loyaltyProgramId}/notifications/added_deducted_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAddedDeductedPointsNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create notification about added or deducted loyalty points Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of BaseNotification</returns>
        public async System.Threading.Tasks.Task<BaseNotification> PostAddedDeductedPointsNotificationAsync (int loyaltyProgramId, NewBaseNotification body)
        {
             TalonOne.Client.ApiResponse<BaseNotification> localVarResponse = await PostAddedDeductedPointsNotificationAsyncWithHttpInfo(loyaltyProgramId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create notification about added or deducted loyalty points Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (BaseNotification)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<BaseNotification>> PostAddedDeductedPointsNotificationAsyncWithHttpInfo (int loyaltyProgramId, NewBaseNotification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->PostAddedDeductedPointsNotification");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BaseNotification>("/v1/loyalty_programs/{loyaltyProgramId}/notifications/added_deducted_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAddedDeductedPointsNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create strikethrough notification Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>BaseNotification</returns>
        public BaseNotification PostCatalogsStrikethroughNotification (int applicationId, NewBaseNotification body)
        {
             TalonOne.Client.ApiResponse<BaseNotification> localVarResponse = PostCatalogsStrikethroughNotificationWithHttpInfo(applicationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create strikethrough notification Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of BaseNotification</returns>
        public TalonOne.Client.ApiResponse< BaseNotification > PostCatalogsStrikethroughNotificationWithHttpInfo (int applicationId, NewBaseNotification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->PostCatalogsStrikethroughNotification");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< BaseNotification >("/v1/catalogs/{applicationId}/notifications/strikethrough", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCatalogsStrikethroughNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create strikethrough notification Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of BaseNotification</returns>
        public async System.Threading.Tasks.Task<BaseNotification> PostCatalogsStrikethroughNotificationAsync (int applicationId, NewBaseNotification body)
        {
             TalonOne.Client.ApiResponse<BaseNotification> localVarResponse = await PostCatalogsStrikethroughNotificationAsyncWithHttpInfo(applicationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create strikethrough notification Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (BaseNotification)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<BaseNotification>> PostCatalogsStrikethroughNotificationAsyncWithHttpInfo (int applicationId, NewBaseNotification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->PostCatalogsStrikethroughNotification");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BaseNotification>("/v1/catalogs/{applicationId}/notifications/strikethrough", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCatalogsStrikethroughNotification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deduct points from customer profile Deduct points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void RemoveLoyaltyPoints (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body)
        {
             RemoveLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId, body);
        }

        /// <summary>
        /// Deduct points from customer profile Deduct points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> RemoveLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->RemoveLoyaltyPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/deduct_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deduct points from customer profile Deduct points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveLoyaltyPointsAsync (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body)
        {
             await RemoveLoyaltyPointsAsyncWithHttpInfo(loyaltyProgramId, integrationId, body);

        }

        /// <summary>
        /// Deduct points from customer profile Deduct points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The identifier of the profile.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> RemoveLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->RemoveLoyaltyPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/deduct_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>NewPassword</returns>
        public NewPassword ResetPassword (NewPassword body)
        {
             TalonOne.Client.ApiResponse<NewPassword> localVarResponse = ResetPasswordWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NewPassword</returns>
        public TalonOne.Client.ApiResponse< NewPassword > ResetPasswordWithHttpInfo (NewPassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ResetPassword");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< NewPassword >("/v1/reset_password", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of NewPassword</returns>
        public async System.Threading.Tasks.Task<NewPassword> ResetPasswordAsync (NewPassword body)
        {
             TalonOne.Client.ApiResponse<NewPassword> localVarResponse = await ResetPasswordAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NewPassword)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<NewPassword>> ResetPasswordAsyncWithHttpInfo (NewPassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ResetPassword");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NewPassword>("/v1/reset_password", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes (without total count) List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 SearchCouponsAdvancedApplicationWideWithoutTotalCount (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes (without total count) List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2008 > SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedApplicationWideWithoutTotalCount");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2008 >("/v1/applications/{applicationId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedApplicationWideWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes (without total count) List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsync (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = await SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes (without total count) List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2008>> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedApplicationWideWithoutTotalCount");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2008>("/v1/applications/{applicationId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedApplicationWideWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count) List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 SearchCouponsAdvancedWithoutTotalCount (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = SearchCouponsAdvancedWithoutTotalCountWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count) List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2008 > SearchCouponsAdvancedWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2008 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count) List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> SearchCouponsAdvancedWithoutTotalCountAsync (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = await SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count) List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in this response. (optional, default to 1000)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2008>> SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2008>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer card data Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void TransferLoyaltyCard (int loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body)
        {
             TransferLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);
        }

        /// <summary>
        /// Transfer card data Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> TransferLoyaltyCardWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->TransferLoyaltyCard");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->TransferLoyaltyCard");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/transfer", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer card data Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TransferLoyaltyCardAsync (int loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body)
        {
             await TransferLoyaltyCardAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);

        }

        /// <summary>
        /// Transfer card data Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> TransferLoyaltyCardAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->TransferLoyaltyCard");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->TransferLoyaltyCard");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/transfer", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update account-level collection Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        public Collection UpdateAccountCollection (int collectionId, UpdateCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = UpdateAccountCollectionWithHttpInfo(collectionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update account-level collection Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > UpdateAccountCollectionWithHttpInfo (int collectionId, UpdateCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAccountCollection");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Collection >("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update account-level collection Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> UpdateAccountCollectionAsync (int collectionId, UpdateCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await UpdateAccountCollectionAsyncWithHttpInfo(collectionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update account-level collection Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> UpdateAccountCollectionAsyncWithHttpInfo (int collectionId, UpdateCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAccountCollection");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Collection>("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost UpdateAdditionalCost (int additionalCostId, NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = UpdateAdditionalCostWithHttpInfo(additionalCostId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public TalonOne.Client.ApiResponse< AccountAdditionalCost > UpdateAdditionalCostWithHttpInfo (int additionalCostId, NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAdditionalCost");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< AccountAdditionalCost >("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> UpdateAdditionalCostAsync (int additionalCostId, NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = await UpdateAdditionalCostAsyncWithHttpInfo(additionalCostId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAdditionalCost>> UpdateAdditionalCostAsyncWithHttpInfo (int additionalCostId, NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAdditionalCost");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountAdditionalCost>("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update custom attribute Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Attribute</returns>
        public Attribute UpdateAttribute (int attributeId, NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = UpdateAttributeWithHttpInfo(attributeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update custom attribute Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Attribute</returns>
        public TalonOne.Client.ApiResponse< Attribute > UpdateAttributeWithHttpInfo (int attributeId, NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAttribute");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Attribute >("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update custom attribute Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> UpdateAttributeAsync (int attributeId, NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = await UpdateAttributeAsyncWithHttpInfo(attributeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update custom attribute Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Attribute>> UpdateAttributeAsyncWithHttpInfo (int attributeId, NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAttribute");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Attribute>("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update campaign Update the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Campaign</returns>
        public Campaign UpdateCampaign (int applicationId, int campaignId, UpdateCampaign body)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = UpdateCampaignWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update campaign Update the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Campaign</returns>
        public TalonOne.Client.ApiResponse< Campaign > UpdateCampaignWithHttpInfo (int applicationId, int campaignId, UpdateCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCampaign");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Campaign >("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update campaign Update the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> UpdateCampaignAsync (int applicationId, int campaignId, UpdateCampaign body)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = await UpdateCampaignAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update campaign Update the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Campaign>> UpdateCampaignAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCampaign");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Campaign>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update collection description Edit the description of the collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        public Collection UpdateCollection (int applicationId, int campaignId, int collectionId, UpdateCampaignCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = UpdateCollectionWithHttpInfo(applicationId, campaignId, collectionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update collection description Edit the description of the collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > UpdateCollectionWithHttpInfo (int applicationId, int campaignId, int collectionId, UpdateCampaignCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCollection");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Collection >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update collection description Edit the description of the collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> UpdateCollectionAsync (int applicationId, int campaignId, int collectionId, UpdateCampaignCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await UpdateCollectionAsyncWithHttpInfo(applicationId, campaignId, collectionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update collection description Edit the description of the collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> UpdateCollectionAsyncWithHttpInfo (int applicationId, int campaignId, int collectionId, UpdateCampaignCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCollection");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Collection>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update coupon Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this PUT endpoint only, any property you do not explicitly set in your request   will be set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Coupon</returns>
        public Coupon UpdateCoupon (int applicationId, int campaignId, string couponId, UpdateCoupon body)
        {
             TalonOne.Client.ApiResponse<Coupon> localVarResponse = UpdateCouponWithHttpInfo(applicationId, campaignId, couponId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update coupon Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this PUT endpoint only, any property you do not explicitly set in your request   will be set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Coupon</returns>
        public TalonOne.Client.ApiResponse< Coupon > UpdateCouponWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon body)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->UpdateCoupon");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCoupon");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Coupon >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update coupon Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this PUT endpoint only, any property you do not explicitly set in your request   will be set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Task of Coupon</returns>
        public async System.Threading.Tasks.Task<Coupon> UpdateCouponAsync (int applicationId, int campaignId, string couponId, UpdateCoupon body)
        {
             TalonOne.Client.ApiResponse<Coupon> localVarResponse = await UpdateCouponAsyncWithHttpInfo(applicationId, campaignId, couponId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update coupon Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this PUT endpoint only, any property you do not explicitly set in your request   will be set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Coupon>> UpdateCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon body)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->UpdateCoupon");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCoupon");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Coupon>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update coupons Update all coupons, or a specific batch of coupons, in a campaign. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void UpdateCouponBatch (int applicationId, int campaignId, UpdateCouponBatch body)
        {
             UpdateCouponBatchWithHttpInfo(applicationId, campaignId, body);
        }

        /// <summary>
        /// Update coupons Update all coupons, or a specific batch of coupons, in a campaign. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> UpdateCouponBatchWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCouponBatch");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCouponBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update coupons Update all coupons, or a specific batch of coupons, in a campaign. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCouponBatchAsync (int applicationId, int campaignId, UpdateCouponBatch body)
        {
             await UpdateCouponBatchAsyncWithHttpInfo(applicationId, campaignId, body);

        }

        /// <summary>
        /// Update coupons Update all coupons, or a specific batch of coupons, in a campaign. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> UpdateCouponBatchAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCouponBatch");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCouponBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update loyalty card status Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>LoyaltyCard</returns>
        public LoyaltyCard UpdateLoyaltyCard (int loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body)
        {
             TalonOne.Client.ApiResponse<LoyaltyCard> localVarResponse = UpdateLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update loyalty card status Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of LoyaltyCard</returns>
        public TalonOne.Client.ApiResponse< LoyaltyCard > UpdateLoyaltyCardWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->UpdateLoyaltyCard");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateLoyaltyCard");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< LoyaltyCard >("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update loyalty card status Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of LoyaltyCard</returns>
        public async System.Threading.Tasks.Task<LoyaltyCard> UpdateLoyaltyCardAsync (int loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body)
        {
             TalonOne.Client.ApiResponse<LoyaltyCard> localVarResponse = await UpdateLoyaltyCardAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update loyalty card status Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (LoyaltyCard)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyCard>> UpdateLoyaltyCardAsyncWithHttpInfo (int loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->UpdateLoyaltyCard");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateLoyaltyCard");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<LoyaltyCard>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update notification about campaign-related changes Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>NotificationWebhook</returns>
        public NotificationWebhook UpdateNotificationWebhook (int applicationId, int notificationWebhookId, NewNotificationWebhook body)
        {
             TalonOne.Client.ApiResponse<NotificationWebhook> localVarResponse = UpdateNotificationWebhookWithHttpInfo(applicationId, notificationWebhookId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update notification about campaign-related changes Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NotificationWebhook</returns>
        public TalonOne.Client.ApiResponse< NotificationWebhook > UpdateNotificationWebhookWithHttpInfo (int applicationId, int notificationWebhookId, NewNotificationWebhook body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateNotificationWebhook");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notificationWebhookId", TalonOne.Client.ClientUtils.ParameterToString(notificationWebhookId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< NotificationWebhook >("/v1/applications/{applicationId}/notification_webhooks/{notificationWebhookId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNotificationWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update notification about campaign-related changes Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of NotificationWebhook</returns>
        public async System.Threading.Tasks.Task<NotificationWebhook> UpdateNotificationWebhookAsync (int applicationId, int notificationWebhookId, NewNotificationWebhook body)
        {
             TalonOne.Client.ApiResponse<NotificationWebhook> localVarResponse = await UpdateNotificationWebhookAsyncWithHttpInfo(applicationId, notificationWebhookId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update notification about campaign-related changes Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="notificationWebhookId">The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NotificationWebhook)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<NotificationWebhook>> UpdateNotificationWebhookAsyncWithHttpInfo (int applicationId, int notificationWebhookId, NewNotificationWebhook body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateNotificationWebhook");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notificationWebhookId", TalonOne.Client.ClientUtils.ParameterToString(notificationWebhookId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<NotificationWebhook>("/v1/applications/{applicationId}/notification_webhooks/{notificationWebhookId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNotificationWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Referral</returns>
        public Referral UpdateReferral (int applicationId, int campaignId, string referralId, UpdateReferral body)
        {
             TalonOne.Client.ApiResponse<Referral> localVarResponse = UpdateReferralWithHttpInfo(applicationId, campaignId, referralId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Referral</returns>
        public TalonOne.Client.ApiResponse< Referral > UpdateReferralWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral body)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->UpdateReferral");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateReferral");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Referral >("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Referral</returns>
        public async System.Threading.Tasks.Task<Referral> UpdateReferralAsync (int applicationId, int campaignId, string referralId, UpdateReferral body)
        {
             TalonOne.Client.ApiResponse<Referral> localVarResponse = await UpdateReferralAsyncWithHttpInfo(applicationId, campaignId, referralId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Referral>> UpdateReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral body)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->UpdateReferral");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateReferral");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Referral>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
