/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The absolute duration after which the achievement ends and resets for a particular customer profile.  **Note**: The duration follows the time zone of the Application this achievement belongs to. 
    /// </summary>
    [DataContract]
    public partial class TimePoint :  IEquatable<TimePoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimePoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimePoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimePoint" /> class.
        /// </summary>
        /// <param name="month">The achievement ends and resets in this month.  **Note**: Only applicable if the period is set to &#x60;Y&#x60;. .</param>
        /// <param name="dayOfMonth">The achievement ends and resets on this day of the month.  **Note**: Only applicable if the period is set to &#x60;Y&#x60; or &#x60;M&#x60;. .</param>
        /// <param name="dayOfWeek">The achievement ends and resets on this day of the week. &#x60;1&#x60; represents &#x60;Monday&#x60; and &#x60;7&#x60; represents &#x60;Sunday&#x60;.  **Note**: Only applicable if the period is set to &#x60;W&#x60;. .</param>
        /// <param name="hour">The achievement ends and resets at this hour. (required).</param>
        /// <param name="minute">The achievement ends and resets at this minute. (required).</param>
        /// <param name="second">The achievement ends and resets at this second. (required).</param>
        public TimePoint(int month = default(int), int dayOfMonth = default(int), int dayOfWeek = default(int), int hour = default(int), int minute = default(int), int second = default(int))
        {
            this.Hour = hour;
            this.Minute = minute;
            this.Second = second;
            this.Month = month;
            this.DayOfMonth = dayOfMonth;
            this.DayOfWeek = dayOfWeek;
        }
        
        /// <summary>
        /// The achievement ends and resets in this month.  **Note**: Only applicable if the period is set to &#x60;Y&#x60;. 
        /// </summary>
        /// <value>The achievement ends and resets in this month.  **Note**: Only applicable if the period is set to &#x60;Y&#x60;. </value>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public int Month { get; set; }

        /// <summary>
        /// The achievement ends and resets on this day of the month.  **Note**: Only applicable if the period is set to &#x60;Y&#x60; or &#x60;M&#x60;. 
        /// </summary>
        /// <value>The achievement ends and resets on this day of the month.  **Note**: Only applicable if the period is set to &#x60;Y&#x60; or &#x60;M&#x60;. </value>
        [DataMember(Name="dayOfMonth", EmitDefaultValue=false)]
        public int DayOfMonth { get; set; }

        /// <summary>
        /// The achievement ends and resets on this day of the week. &#x60;1&#x60; represents &#x60;Monday&#x60; and &#x60;7&#x60; represents &#x60;Sunday&#x60;.  **Note**: Only applicable if the period is set to &#x60;W&#x60;. 
        /// </summary>
        /// <value>The achievement ends and resets on this day of the week. &#x60;1&#x60; represents &#x60;Monday&#x60; and &#x60;7&#x60; represents &#x60;Sunday&#x60;.  **Note**: Only applicable if the period is set to &#x60;W&#x60;. </value>
        [DataMember(Name="dayOfWeek", EmitDefaultValue=false)]
        public int DayOfWeek { get; set; }

        /// <summary>
        /// The achievement ends and resets at this hour.
        /// </summary>
        /// <value>The achievement ends and resets at this hour.</value>
        [DataMember(Name="hour", EmitDefaultValue=false)]
        public int Hour { get; set; }

        /// <summary>
        /// The achievement ends and resets at this minute.
        /// </summary>
        /// <value>The achievement ends and resets at this minute.</value>
        [DataMember(Name="minute", EmitDefaultValue=false)]
        public int Minute { get; set; }

        /// <summary>
        /// The achievement ends and resets at this second.
        /// </summary>
        /// <value>The achievement ends and resets at this second.</value>
        [DataMember(Name="second", EmitDefaultValue=false)]
        public int Second { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimePoint {\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  DayOfMonth: ").Append(DayOfMonth).Append("\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("  Minute: ").Append(Minute).Append("\n");
            sb.Append("  Second: ").Append(Second).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimePoint);
        }

        /// <summary>
        /// Returns true if TimePoint instances are equal
        /// </summary>
        /// <param name="input">Instance of TimePoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimePoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Month == input.Month ||
                    this.Month.Equals(input.Month)
                ) && 
                (
                    this.DayOfMonth == input.DayOfMonth ||
                    this.DayOfMonth.Equals(input.DayOfMonth)
                ) && 
                (
                    this.DayOfWeek == input.DayOfWeek ||
                    this.DayOfWeek.Equals(input.DayOfWeek)
                ) && 
                (
                    this.Hour == input.Hour ||
                    this.Hour.Equals(input.Hour)
                ) && 
                (
                    this.Minute == input.Minute ||
                    this.Minute.Equals(input.Minute)
                ) && 
                (
                    this.Second == input.Second ||
                    this.Second.Equals(input.Second)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Month.GetHashCode();
                hashCode = hashCode * 59 + this.DayOfMonth.GetHashCode();
                hashCode = hashCode * 59 + this.DayOfWeek.GetHashCode();
                hashCode = hashCode * 59 + this.Hour.GetHashCode();
                hashCode = hashCode * 59 + this.Minute.GetHashCode();
                hashCode = hashCode * 59 + this.Second.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Month (int) maximum
            if(this.Month > (int)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Month, must be a value less than or equal to 12.", new [] { "Month" });
            }

            // Month (int) minimum
            if(this.Month < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Month, must be a value greater than or equal to 1.", new [] { "Month" });
            }

            // DayOfMonth (int) maximum
            if(this.DayOfMonth > (int)31)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DayOfMonth, must be a value less than or equal to 31.", new [] { "DayOfMonth" });
            }

            // DayOfMonth (int) minimum
            if(this.DayOfMonth < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DayOfMonth, must be a value greater than or equal to 1.", new [] { "DayOfMonth" });
            }

            // DayOfWeek (int) maximum
            if(this.DayOfWeek > (int)7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DayOfWeek, must be a value less than or equal to 7.", new [] { "DayOfWeek" });
            }

            // DayOfWeek (int) minimum
            if(this.DayOfWeek < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DayOfWeek, must be a value greater than or equal to 1.", new [] { "DayOfWeek" });
            }

            yield break;
        }
    }

}
