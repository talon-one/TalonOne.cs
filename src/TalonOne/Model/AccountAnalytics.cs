/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// AccountAnalytics
    /// </summary>
    [DataContract]
    public partial class AccountAnalytics :  IEquatable<AccountAnalytics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountAnalytics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountAnalytics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountAnalytics" /> class.
        /// </summary>
        /// <param name="applications">Total number of applications in the account (required).</param>
        /// <param name="liveApplications">Total number of live applications in the account (required).</param>
        /// <param name="sandboxApplications">Total number of sandbox applications in the account (required).</param>
        /// <param name="campaigns">Total number of campaigns in the account (required).</param>
        /// <param name="activeCampaigns">Total number of active campaigns in the account (required).</param>
        /// <param name="liveActiveCampaigns">Total number of active campaigns in live applications in the account (required).</param>
        /// <param name="coupons">Total number of coupons in the account (required).</param>
        /// <param name="activeCoupons">Total number of active coupons in the account (required).</param>
        /// <param name="expiredCoupons">Total number of expired coupons in the account (required).</param>
        /// <param name="referralCodes">Total number of referral codes in the account (required).</param>
        /// <param name="activeReferralCodes">Total number of active referral codes in the account (required).</param>
        /// <param name="expiredReferralCodes">Total number of expired referral codes in the account (required).</param>
        /// <param name="activeRules">Total number of active rules in the account (required).</param>
        /// <param name="users">Total number of users in the account (required).</param>
        /// <param name="roles">Total number of roles in the account (required).</param>
        /// <param name="customAttributes">Total number of custom attributes in the account (required).</param>
        /// <param name="webhooks">Total number of webhooks in the account (required).</param>
        /// <param name="loyaltyPrograms">Total number of loyalty programs in the account (required).</param>
        public AccountAnalytics(int applications = default(int), int liveApplications = default(int), int sandboxApplications = default(int), int campaigns = default(int), int activeCampaigns = default(int), int liveActiveCampaigns = default(int), int coupons = default(int), int activeCoupons = default(int), int expiredCoupons = default(int), int referralCodes = default(int), int activeReferralCodes = default(int), int expiredReferralCodes = default(int), int activeRules = default(int), int users = default(int), int roles = default(int), int customAttributes = default(int), int webhooks = default(int), int loyaltyPrograms = default(int))
        {
            // to ensure "applications" is required (not null)
            if (applications == null)
            {
                throw new InvalidDataException("applications is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.Applications = applications;
            }
            
            // to ensure "liveApplications" is required (not null)
            if (liveApplications == null)
            {
                throw new InvalidDataException("liveApplications is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.LiveApplications = liveApplications;
            }
            
            // to ensure "sandboxApplications" is required (not null)
            if (sandboxApplications == null)
            {
                throw new InvalidDataException("sandboxApplications is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.SandboxApplications = sandboxApplications;
            }
            
            // to ensure "campaigns" is required (not null)
            if (campaigns == null)
            {
                throw new InvalidDataException("campaigns is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.Campaigns = campaigns;
            }
            
            // to ensure "activeCampaigns" is required (not null)
            if (activeCampaigns == null)
            {
                throw new InvalidDataException("activeCampaigns is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.ActiveCampaigns = activeCampaigns;
            }
            
            // to ensure "liveActiveCampaigns" is required (not null)
            if (liveActiveCampaigns == null)
            {
                throw new InvalidDataException("liveActiveCampaigns is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.LiveActiveCampaigns = liveActiveCampaigns;
            }
            
            // to ensure "coupons" is required (not null)
            if (coupons == null)
            {
                throw new InvalidDataException("coupons is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.Coupons = coupons;
            }
            
            // to ensure "activeCoupons" is required (not null)
            if (activeCoupons == null)
            {
                throw new InvalidDataException("activeCoupons is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.ActiveCoupons = activeCoupons;
            }
            
            // to ensure "expiredCoupons" is required (not null)
            if (expiredCoupons == null)
            {
                throw new InvalidDataException("expiredCoupons is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.ExpiredCoupons = expiredCoupons;
            }
            
            // to ensure "referralCodes" is required (not null)
            if (referralCodes == null)
            {
                throw new InvalidDataException("referralCodes is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.ReferralCodes = referralCodes;
            }
            
            // to ensure "activeReferralCodes" is required (not null)
            if (activeReferralCodes == null)
            {
                throw new InvalidDataException("activeReferralCodes is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.ActiveReferralCodes = activeReferralCodes;
            }
            
            // to ensure "expiredReferralCodes" is required (not null)
            if (expiredReferralCodes == null)
            {
                throw new InvalidDataException("expiredReferralCodes is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.ExpiredReferralCodes = expiredReferralCodes;
            }
            
            // to ensure "activeRules" is required (not null)
            if (activeRules == null)
            {
                throw new InvalidDataException("activeRules is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.ActiveRules = activeRules;
            }
            
            // to ensure "users" is required (not null)
            if (users == null)
            {
                throw new InvalidDataException("users is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.Users = users;
            }
            
            // to ensure "roles" is required (not null)
            if (roles == null)
            {
                throw new InvalidDataException("roles is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.Roles = roles;
            }
            
            // to ensure "customAttributes" is required (not null)
            if (customAttributes == null)
            {
                throw new InvalidDataException("customAttributes is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.CustomAttributes = customAttributes;
            }
            
            // to ensure "webhooks" is required (not null)
            if (webhooks == null)
            {
                throw new InvalidDataException("webhooks is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.Webhooks = webhooks;
            }
            
            // to ensure "loyaltyPrograms" is required (not null)
            if (loyaltyPrograms == null)
            {
                throw new InvalidDataException("loyaltyPrograms is a required property for AccountAnalytics and cannot be null");
            }
            else
            {
                this.LoyaltyPrograms = loyaltyPrograms;
            }
            
        }
        
        /// <summary>
        /// Total number of applications in the account
        /// </summary>
        /// <value>Total number of applications in the account</value>
        [DataMember(Name="applications", EmitDefaultValue=true)]
        public int Applications { get; set; }

        /// <summary>
        /// Total number of live applications in the account
        /// </summary>
        /// <value>Total number of live applications in the account</value>
        [DataMember(Name="liveApplications", EmitDefaultValue=true)]
        public int LiveApplications { get; set; }

        /// <summary>
        /// Total number of sandbox applications in the account
        /// </summary>
        /// <value>Total number of sandbox applications in the account</value>
        [DataMember(Name="sandboxApplications", EmitDefaultValue=true)]
        public int SandboxApplications { get; set; }

        /// <summary>
        /// Total number of campaigns in the account
        /// </summary>
        /// <value>Total number of campaigns in the account</value>
        [DataMember(Name="campaigns", EmitDefaultValue=true)]
        public int Campaigns { get; set; }

        /// <summary>
        /// Total number of active campaigns in the account
        /// </summary>
        /// <value>Total number of active campaigns in the account</value>
        [DataMember(Name="activeCampaigns", EmitDefaultValue=true)]
        public int ActiveCampaigns { get; set; }

        /// <summary>
        /// Total number of active campaigns in live applications in the account
        /// </summary>
        /// <value>Total number of active campaigns in live applications in the account</value>
        [DataMember(Name="liveActiveCampaigns", EmitDefaultValue=true)]
        public int LiveActiveCampaigns { get; set; }

        /// <summary>
        /// Total number of coupons in the account
        /// </summary>
        /// <value>Total number of coupons in the account</value>
        [DataMember(Name="coupons", EmitDefaultValue=true)]
        public int Coupons { get; set; }

        /// <summary>
        /// Total number of active coupons in the account
        /// </summary>
        /// <value>Total number of active coupons in the account</value>
        [DataMember(Name="activeCoupons", EmitDefaultValue=true)]
        public int ActiveCoupons { get; set; }

        /// <summary>
        /// Total number of expired coupons in the account
        /// </summary>
        /// <value>Total number of expired coupons in the account</value>
        [DataMember(Name="expiredCoupons", EmitDefaultValue=true)]
        public int ExpiredCoupons { get; set; }

        /// <summary>
        /// Total number of referral codes in the account
        /// </summary>
        /// <value>Total number of referral codes in the account</value>
        [DataMember(Name="referralCodes", EmitDefaultValue=true)]
        public int ReferralCodes { get; set; }

        /// <summary>
        /// Total number of active referral codes in the account
        /// </summary>
        /// <value>Total number of active referral codes in the account</value>
        [DataMember(Name="activeReferralCodes", EmitDefaultValue=true)]
        public int ActiveReferralCodes { get; set; }

        /// <summary>
        /// Total number of expired referral codes in the account
        /// </summary>
        /// <value>Total number of expired referral codes in the account</value>
        [DataMember(Name="expiredReferralCodes", EmitDefaultValue=true)]
        public int ExpiredReferralCodes { get; set; }

        /// <summary>
        /// Total number of active rules in the account
        /// </summary>
        /// <value>Total number of active rules in the account</value>
        [DataMember(Name="activeRules", EmitDefaultValue=true)]
        public int ActiveRules { get; set; }

        /// <summary>
        /// Total number of users in the account
        /// </summary>
        /// <value>Total number of users in the account</value>
        [DataMember(Name="users", EmitDefaultValue=true)]
        public int Users { get; set; }

        /// <summary>
        /// Total number of roles in the account
        /// </summary>
        /// <value>Total number of roles in the account</value>
        [DataMember(Name="roles", EmitDefaultValue=true)]
        public int Roles { get; set; }

        /// <summary>
        /// Total number of custom attributes in the account
        /// </summary>
        /// <value>Total number of custom attributes in the account</value>
        [DataMember(Name="customAttributes", EmitDefaultValue=true)]
        public int CustomAttributes { get; set; }

        /// <summary>
        /// Total number of webhooks in the account
        /// </summary>
        /// <value>Total number of webhooks in the account</value>
        [DataMember(Name="webhooks", EmitDefaultValue=true)]
        public int Webhooks { get; set; }

        /// <summary>
        /// Total number of loyalty programs in the account
        /// </summary>
        /// <value>Total number of loyalty programs in the account</value>
        [DataMember(Name="loyaltyPrograms", EmitDefaultValue=true)]
        public int LoyaltyPrograms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountAnalytics {\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  LiveApplications: ").Append(LiveApplications).Append("\n");
            sb.Append("  SandboxApplications: ").Append(SandboxApplications).Append("\n");
            sb.Append("  Campaigns: ").Append(Campaigns).Append("\n");
            sb.Append("  ActiveCampaigns: ").Append(ActiveCampaigns).Append("\n");
            sb.Append("  LiveActiveCampaigns: ").Append(LiveActiveCampaigns).Append("\n");
            sb.Append("  Coupons: ").Append(Coupons).Append("\n");
            sb.Append("  ActiveCoupons: ").Append(ActiveCoupons).Append("\n");
            sb.Append("  ExpiredCoupons: ").Append(ExpiredCoupons).Append("\n");
            sb.Append("  ReferralCodes: ").Append(ReferralCodes).Append("\n");
            sb.Append("  ActiveReferralCodes: ").Append(ActiveReferralCodes).Append("\n");
            sb.Append("  ExpiredReferralCodes: ").Append(ExpiredReferralCodes).Append("\n");
            sb.Append("  ActiveRules: ").Append(ActiveRules).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  Webhooks: ").Append(Webhooks).Append("\n");
            sb.Append("  LoyaltyPrograms: ").Append(LoyaltyPrograms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountAnalytics);
        }

        /// <summary>
        /// Returns true if AccountAnalytics instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountAnalytics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountAnalytics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Applications == input.Applications ||
                    (this.Applications != null &&
                    this.Applications.Equals(input.Applications))
                ) && 
                (
                    this.LiveApplications == input.LiveApplications ||
                    (this.LiveApplications != null &&
                    this.LiveApplications.Equals(input.LiveApplications))
                ) && 
                (
                    this.SandboxApplications == input.SandboxApplications ||
                    (this.SandboxApplications != null &&
                    this.SandboxApplications.Equals(input.SandboxApplications))
                ) && 
                (
                    this.Campaigns == input.Campaigns ||
                    (this.Campaigns != null &&
                    this.Campaigns.Equals(input.Campaigns))
                ) && 
                (
                    this.ActiveCampaigns == input.ActiveCampaigns ||
                    (this.ActiveCampaigns != null &&
                    this.ActiveCampaigns.Equals(input.ActiveCampaigns))
                ) && 
                (
                    this.LiveActiveCampaigns == input.LiveActiveCampaigns ||
                    (this.LiveActiveCampaigns != null &&
                    this.LiveActiveCampaigns.Equals(input.LiveActiveCampaigns))
                ) && 
                (
                    this.Coupons == input.Coupons ||
                    (this.Coupons != null &&
                    this.Coupons.Equals(input.Coupons))
                ) && 
                (
                    this.ActiveCoupons == input.ActiveCoupons ||
                    (this.ActiveCoupons != null &&
                    this.ActiveCoupons.Equals(input.ActiveCoupons))
                ) && 
                (
                    this.ExpiredCoupons == input.ExpiredCoupons ||
                    (this.ExpiredCoupons != null &&
                    this.ExpiredCoupons.Equals(input.ExpiredCoupons))
                ) && 
                (
                    this.ReferralCodes == input.ReferralCodes ||
                    (this.ReferralCodes != null &&
                    this.ReferralCodes.Equals(input.ReferralCodes))
                ) && 
                (
                    this.ActiveReferralCodes == input.ActiveReferralCodes ||
                    (this.ActiveReferralCodes != null &&
                    this.ActiveReferralCodes.Equals(input.ActiveReferralCodes))
                ) && 
                (
                    this.ExpiredReferralCodes == input.ExpiredReferralCodes ||
                    (this.ExpiredReferralCodes != null &&
                    this.ExpiredReferralCodes.Equals(input.ExpiredReferralCodes))
                ) && 
                (
                    this.ActiveRules == input.ActiveRules ||
                    (this.ActiveRules != null &&
                    this.ActiveRules.Equals(input.ActiveRules))
                ) && 
                (
                    this.Users == input.Users ||
                    (this.Users != null &&
                    this.Users.Equals(input.Users))
                ) && 
                (
                    this.Roles == input.Roles ||
                    (this.Roles != null &&
                    this.Roles.Equals(input.Roles))
                ) && 
                (
                    this.CustomAttributes == input.CustomAttributes ||
                    (this.CustomAttributes != null &&
                    this.CustomAttributes.Equals(input.CustomAttributes))
                ) && 
                (
                    this.Webhooks == input.Webhooks ||
                    (this.Webhooks != null &&
                    this.Webhooks.Equals(input.Webhooks))
                ) && 
                (
                    this.LoyaltyPrograms == input.LoyaltyPrograms ||
                    (this.LoyaltyPrograms != null &&
                    this.LoyaltyPrograms.Equals(input.LoyaltyPrograms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Applications != null)
                    hashCode = hashCode * 59 + this.Applications.GetHashCode();
                if (this.LiveApplications != null)
                    hashCode = hashCode * 59 + this.LiveApplications.GetHashCode();
                if (this.SandboxApplications != null)
                    hashCode = hashCode * 59 + this.SandboxApplications.GetHashCode();
                if (this.Campaigns != null)
                    hashCode = hashCode * 59 + this.Campaigns.GetHashCode();
                if (this.ActiveCampaigns != null)
                    hashCode = hashCode * 59 + this.ActiveCampaigns.GetHashCode();
                if (this.LiveActiveCampaigns != null)
                    hashCode = hashCode * 59 + this.LiveActiveCampaigns.GetHashCode();
                if (this.Coupons != null)
                    hashCode = hashCode * 59 + this.Coupons.GetHashCode();
                if (this.ActiveCoupons != null)
                    hashCode = hashCode * 59 + this.ActiveCoupons.GetHashCode();
                if (this.ExpiredCoupons != null)
                    hashCode = hashCode * 59 + this.ExpiredCoupons.GetHashCode();
                if (this.ReferralCodes != null)
                    hashCode = hashCode * 59 + this.ReferralCodes.GetHashCode();
                if (this.ActiveReferralCodes != null)
                    hashCode = hashCode * 59 + this.ActiveReferralCodes.GetHashCode();
                if (this.ExpiredReferralCodes != null)
                    hashCode = hashCode * 59 + this.ExpiredReferralCodes.GetHashCode();
                if (this.ActiveRules != null)
                    hashCode = hashCode * 59 + this.ActiveRules.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                if (this.CustomAttributes != null)
                    hashCode = hashCode * 59 + this.CustomAttributes.GetHashCode();
                if (this.Webhooks != null)
                    hashCode = hashCode * 59 + this.Webhooks.GetHashCode();
                if (this.LoyaltyPrograms != null)
                    hashCode = hashCode * 59 + this.LoyaltyPrograms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
