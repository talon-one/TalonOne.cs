/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Details about why a rule failed.
    /// </summary>
    [DataContract]
    public partial class RuleFailureReason :  IEquatable<RuleFailureReason>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleFailureReason" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RuleFailureReason() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleFailureReason" /> class.
        /// </summary>
        /// <param name="campaignID">The ID of the campaign that contains the rule that failed (required).</param>
        /// <param name="campaignName">The name of the campaign that contains the rule that failed (required).</param>
        /// <param name="rulesetID">The ID of the ruleset that contains the rule that failed (required).</param>
        /// <param name="couponID">The ID of the coupon that was being evaluated at the time of the rule failure.</param>
        /// <param name="couponValue">The value of the coupon that was being evaluated at the time of the rule failure.</param>
        /// <param name="referralID">The ID of the referral that was being evaluated at the time of the rule failure.</param>
        /// <param name="referralValue">The value of the referral that was being evaluated at the time of the rule failure.</param>
        /// <param name="ruleIndex">The index of the rule that failed within the ruleset (required).</param>
        /// <param name="ruleName">The name of the rule that failed within the ruleset (required).</param>
        /// <param name="conditionIndex">The index of the condition that failed.</param>
        /// <param name="effectIndex">The index of the effect that failed.</param>
        /// <param name="details">More details about the failure.</param>
        public RuleFailureReason(int campaignID = default(int), string campaignName = default(string), int rulesetID = default(int), int couponID = default(int), string couponValue = default(string), int referralID = default(int), string referralValue = default(string), int ruleIndex = default(int), string ruleName = default(string), int conditionIndex = default(int), int effectIndex = default(int), string details = default(string))
        {
            this.CampaignID = campaignID;
            // to ensure "campaignName" is required (not null)
            this.CampaignName = campaignName ?? throw new ArgumentNullException("campaignName is a required property for RuleFailureReason and cannot be null");
            this.RulesetID = rulesetID;
            this.RuleIndex = ruleIndex;
            // to ensure "ruleName" is required (not null)
            this.RuleName = ruleName ?? throw new ArgumentNullException("ruleName is a required property for RuleFailureReason and cannot be null");
            this.CouponID = couponID;
            this.CouponValue = couponValue;
            this.ReferralID = referralID;
            this.ReferralValue = referralValue;
            this.ConditionIndex = conditionIndex;
            this.EffectIndex = effectIndex;
            this.Details = details;
        }
        
        /// <summary>
        /// The ID of the campaign that contains the rule that failed
        /// </summary>
        /// <value>The ID of the campaign that contains the rule that failed</value>
        [DataMember(Name="campaignID", EmitDefaultValue=false)]
        public int CampaignID { get; set; }

        /// <summary>
        /// The name of the campaign that contains the rule that failed
        /// </summary>
        /// <value>The name of the campaign that contains the rule that failed</value>
        [DataMember(Name="campaignName", EmitDefaultValue=false)]
        public string CampaignName { get; set; }

        /// <summary>
        /// The ID of the ruleset that contains the rule that failed
        /// </summary>
        /// <value>The ID of the ruleset that contains the rule that failed</value>
        [DataMember(Name="rulesetID", EmitDefaultValue=false)]
        public int RulesetID { get; set; }

        /// <summary>
        /// The ID of the coupon that was being evaluated at the time of the rule failure
        /// </summary>
        /// <value>The ID of the coupon that was being evaluated at the time of the rule failure</value>
        [DataMember(Name="couponID", EmitDefaultValue=false)]
        public int CouponID { get; set; }

        /// <summary>
        /// The value of the coupon that was being evaluated at the time of the rule failure
        /// </summary>
        /// <value>The value of the coupon that was being evaluated at the time of the rule failure</value>
        [DataMember(Name="couponValue", EmitDefaultValue=false)]
        public string CouponValue { get; set; }

        /// <summary>
        /// The ID of the referral that was being evaluated at the time of the rule failure
        /// </summary>
        /// <value>The ID of the referral that was being evaluated at the time of the rule failure</value>
        [DataMember(Name="referralID", EmitDefaultValue=false)]
        public int ReferralID { get; set; }

        /// <summary>
        /// The value of the referral that was being evaluated at the time of the rule failure
        /// </summary>
        /// <value>The value of the referral that was being evaluated at the time of the rule failure</value>
        [DataMember(Name="referralValue", EmitDefaultValue=false)]
        public string ReferralValue { get; set; }

        /// <summary>
        /// The index of the rule that failed within the ruleset
        /// </summary>
        /// <value>The index of the rule that failed within the ruleset</value>
        [DataMember(Name="ruleIndex", EmitDefaultValue=false)]
        public int RuleIndex { get; set; }

        /// <summary>
        /// The name of the rule that failed within the ruleset
        /// </summary>
        /// <value>The name of the rule that failed within the ruleset</value>
        [DataMember(Name="ruleName", EmitDefaultValue=false)]
        public string RuleName { get; set; }

        /// <summary>
        /// The index of the condition that failed
        /// </summary>
        /// <value>The index of the condition that failed</value>
        [DataMember(Name="conditionIndex", EmitDefaultValue=false)]
        public int ConditionIndex { get; set; }

        /// <summary>
        /// The index of the effect that failed
        /// </summary>
        /// <value>The index of the effect that failed</value>
        [DataMember(Name="effectIndex", EmitDefaultValue=false)]
        public int EffectIndex { get; set; }

        /// <summary>
        /// More details about the failure
        /// </summary>
        /// <value>More details about the failure</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public string Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleFailureReason {\n");
            sb.Append("  CampaignID: ").Append(CampaignID).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("  RulesetID: ").Append(RulesetID).Append("\n");
            sb.Append("  CouponID: ").Append(CouponID).Append("\n");
            sb.Append("  CouponValue: ").Append(CouponValue).Append("\n");
            sb.Append("  ReferralID: ").Append(ReferralID).Append("\n");
            sb.Append("  ReferralValue: ").Append(ReferralValue).Append("\n");
            sb.Append("  RuleIndex: ").Append(RuleIndex).Append("\n");
            sb.Append("  RuleName: ").Append(RuleName).Append("\n");
            sb.Append("  ConditionIndex: ").Append(ConditionIndex).Append("\n");
            sb.Append("  EffectIndex: ").Append(EffectIndex).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleFailureReason);
        }

        /// <summary>
        /// Returns true if RuleFailureReason instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleFailureReason to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleFailureReason input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CampaignID == input.CampaignID ||
                    this.CampaignID.Equals(input.CampaignID)
                ) && 
                (
                    this.CampaignName == input.CampaignName ||
                    (this.CampaignName != null &&
                    this.CampaignName.Equals(input.CampaignName))
                ) && 
                (
                    this.RulesetID == input.RulesetID ||
                    this.RulesetID.Equals(input.RulesetID)
                ) && 
                (
                    this.CouponID == input.CouponID ||
                    this.CouponID.Equals(input.CouponID)
                ) && 
                (
                    this.CouponValue == input.CouponValue ||
                    (this.CouponValue != null &&
                    this.CouponValue.Equals(input.CouponValue))
                ) && 
                (
                    this.ReferralID == input.ReferralID ||
                    this.ReferralID.Equals(input.ReferralID)
                ) && 
                (
                    this.ReferralValue == input.ReferralValue ||
                    (this.ReferralValue != null &&
                    this.ReferralValue.Equals(input.ReferralValue))
                ) && 
                (
                    this.RuleIndex == input.RuleIndex ||
                    this.RuleIndex.Equals(input.RuleIndex)
                ) && 
                (
                    this.RuleName == input.RuleName ||
                    (this.RuleName != null &&
                    this.RuleName.Equals(input.RuleName))
                ) && 
                (
                    this.ConditionIndex == input.ConditionIndex ||
                    this.ConditionIndex.Equals(input.ConditionIndex)
                ) && 
                (
                    this.EffectIndex == input.EffectIndex ||
                    this.EffectIndex.Equals(input.EffectIndex)
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CampaignID.GetHashCode();
                if (this.CampaignName != null)
                    hashCode = hashCode * 59 + this.CampaignName.GetHashCode();
                hashCode = hashCode * 59 + this.RulesetID.GetHashCode();
                hashCode = hashCode * 59 + this.CouponID.GetHashCode();
                if (this.CouponValue != null)
                    hashCode = hashCode * 59 + this.CouponValue.GetHashCode();
                hashCode = hashCode * 59 + this.ReferralID.GetHashCode();
                if (this.ReferralValue != null)
                    hashCode = hashCode * 59 + this.ReferralValue.GetHashCode();
                hashCode = hashCode * 59 + this.RuleIndex.GetHashCode();
                if (this.RuleName != null)
                    hashCode = hashCode * 59 + this.RuleName.GetHashCode();
                hashCode = hashCode * 59 + this.ConditionIndex.GetHashCode();
                hashCode = hashCode * 59 + this.EffectIndex.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
