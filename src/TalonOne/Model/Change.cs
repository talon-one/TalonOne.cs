/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Change
    /// </summary>
    [DataContract]
    public partial class Change :  IEquatable<Change>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Change" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Change() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Change" /> class.
        /// </summary>
        /// <param name="id">Internal ID of this entity. (required).</param>
        /// <param name="created">The time this entity was created. (required).</param>
        /// <param name="userId">The ID of the user associated with this entity. (required).</param>
        /// <param name="applicationId">ID of application associated with change..</param>
        /// <param name="entity">API endpoint on which the change was initiated. (required).</param>
        /// <param name="old">Resource before the change occurred..</param>
        /// <param name="_new">Resource after the change occurred..</param>
        /// <param name="managementKeyId">ID of management key used to perform changes..</param>
        public Change(int id = default(int), DateTime created = default(DateTime), int userId = default(int), int applicationId = default(int), string entity = default(string), Object old = default(Object), Object _new = default(Object), int managementKeyId = default(int))
        {
            this.Id = id;
            this.Created = created;
            this.UserId = userId;
            // to ensure "entity" is required (not null)
            this.Entity = entity ?? throw new ArgumentNullException("entity is a required property for Change and cannot be null");
            this.ApplicationId = applicationId;
            this.Old = old;
            this.New = _new;
            this.ManagementKeyId = managementKeyId;
        }
        
        /// <summary>
        /// Internal ID of this entity.
        /// </summary>
        /// <value>Internal ID of this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The time this entity was created.
        /// </summary>
        /// <value>The time this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The ID of the user associated with this entity.
        /// </summary>
        /// <value>The ID of the user associated with this entity.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int UserId { get; set; }

        /// <summary>
        /// ID of application associated with change.
        /// </summary>
        /// <value>ID of application associated with change.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int ApplicationId { get; set; }

        /// <summary>
        /// API endpoint on which the change was initiated.
        /// </summary>
        /// <value>API endpoint on which the change was initiated.</value>
        [DataMember(Name="entity", EmitDefaultValue=false)]
        public string Entity { get; set; }

        /// <summary>
        /// Resource before the change occurred.
        /// </summary>
        /// <value>Resource before the change occurred.</value>
        [DataMember(Name="old", EmitDefaultValue=false)]
        public Object Old { get; set; }

        /// <summary>
        /// Resource after the change occurred.
        /// </summary>
        /// <value>Resource after the change occurred.</value>
        [DataMember(Name="new", EmitDefaultValue=false)]
        public Object New { get; set; }

        /// <summary>
        /// ID of management key used to perform changes.
        /// </summary>
        /// <value>ID of management key used to perform changes.</value>
        [DataMember(Name="managementKeyId", EmitDefaultValue=false)]
        public int ManagementKeyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Change {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Old: ").Append(Old).Append("\n");
            sb.Append("  New: ").Append(New).Append("\n");
            sb.Append("  ManagementKeyId: ").Append(ManagementKeyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Change);
        }

        /// <summary>
        /// Returns true if Change instances are equal
        /// </summary>
        /// <param name="input">Instance of Change to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Change input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    this.ApplicationId.Equals(input.ApplicationId)
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Old == input.Old ||
                    (this.Old != null &&
                    this.Old.Equals(input.Old))
                ) && 
                (
                    this.New == input.New ||
                    (this.New != null &&
                    this.New.Equals(input.New))
                ) && 
                (
                    this.ManagementKeyId == input.ManagementKeyId ||
                    this.ManagementKeyId.Equals(input.ManagementKeyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.UserId.GetHashCode();
                hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.Entity != null)
                    hashCode = hashCode * 59 + this.Entity.GetHashCode();
                if (this.Old != null)
                    hashCode = hashCode * 59 + this.Old.GetHashCode();
                if (this.New != null)
                    hashCode = hashCode * 59 + this.New.GetHashCode();
                hashCode = hashCode * 59 + this.ManagementKeyId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
