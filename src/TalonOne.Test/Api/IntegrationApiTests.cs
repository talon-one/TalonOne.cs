/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TalonOne.Client;
using TalonOne.Api;
using TalonOne.Model;

namespace TalonOne.Test
{
    /// <summary>
    ///  Class for testing IntegrationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IntegrationApiTests
    {
        private IntegrationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new IntegrationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of IntegrationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' IntegrationApi
            //Assert.IsInstanceOf(typeof(IntegrationApi), instance);
        }

        
        /// <summary>
        /// Test CreateCouponReservation
        /// </summary>
        [Test]
        public void CreateCouponReservationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string couponValue = null;
            //CouponReservations body = null;
            //var response = instance.CreateCouponReservation(couponValue, body);
            //Assert.IsInstanceOf(typeof(Coupon), response, "response is Coupon");
        }
        
        /// <summary>
        /// Test CreateReferral
        /// </summary>
        [Test]
        public void CreateReferralTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewReferral body = null;
            //var response = instance.CreateReferral(body);
            //Assert.IsInstanceOf(typeof(Referral), response, "response is Referral");
        }
        
        /// <summary>
        /// Test DeleteCouponReservation
        /// </summary>
        [Test]
        public void DeleteCouponReservationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string couponValue = null;
            //CouponReservations body = null;
            //instance.DeleteCouponReservation(couponValue, body);
            
        }
        
        /// <summary>
        /// Test DeleteCustomerData
        /// </summary>
        [Test]
        public void DeleteCustomerDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string integrationId = null;
            //instance.DeleteCustomerData(integrationId);
            
        }
        
        /// <summary>
        /// Test GetCustomerInventory
        /// </summary>
        [Test]
        public void GetCustomerInventoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string integrationId = null;
            //bool profile = null;
            //bool referrals = null;
            //bool coupons = null;
            //var response = instance.GetCustomerInventory(integrationId, profile, referrals, coupons);
            //Assert.IsInstanceOf(typeof(CustomerInventory), response, "response is CustomerInventory");
        }
        
        /// <summary>
        /// Test GetReservedCustomers
        /// </summary>
        [Test]
        public void GetReservedCustomersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string couponValue = null;
            //var response = instance.GetReservedCustomers(couponValue);
            //Assert.IsInstanceOf(typeof(InlineResponse200), response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TrackEvent
        /// </summary>
        [Test]
        public void TrackEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewEvent body = null;
            //bool dry = null;
            //var response = instance.TrackEvent(body, dry);
            //Assert.IsInstanceOf(typeof(IntegrationState), response, "response is IntegrationState");
        }
        
        /// <summary>
        /// Test UpdateCustomerProfile
        /// </summary>
        [Test]
        public void UpdateCustomerProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string integrationId = null;
            //NewCustomerProfile body = null;
            //bool dry = null;
            //var response = instance.UpdateCustomerProfile(integrationId, body, dry);
            //Assert.IsInstanceOf(typeof(IntegrationState), response, "response is IntegrationState");
        }
        
        /// <summary>
        /// Test UpdateCustomerProfileV2
        /// </summary>
        [Test]
        public void UpdateCustomerProfileV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerProfileId = null;
            //NewCustomerProfile body = null;
            //var response = instance.UpdateCustomerProfileV2(customerProfileId, body);
            //Assert.IsInstanceOf(typeof(CustomerProfileUpdate), response, "response is CustomerProfileUpdate");
        }
        
        /// <summary>
        /// Test UpdateCustomerSession
        /// </summary>
        [Test]
        public void UpdateCustomerSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerSessionId = null;
            //NewCustomerSession body = null;
            //bool dry = null;
            //var response = instance.UpdateCustomerSession(customerSessionId, body, dry);
            //Assert.IsInstanceOf(typeof(IntegrationState), response, "response is IntegrationState");
        }
        
        /// <summary>
        /// Test UpdateCustomerSessionV2
        /// </summary>
        [Test]
        public void UpdateCustomerSessionV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerSessionId = null;
            //IntegrationRequest body = null;
            //bool dry = null;
            //var response = instance.UpdateCustomerSessionV2(customerSessionId, body, dry);
            //Assert.IsInstanceOf(typeof(IntegrationStateV2), response, "response is IntegrationStateV2");
        }
        
    }

}
