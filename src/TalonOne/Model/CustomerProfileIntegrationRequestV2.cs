/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CustomerProfileIntegrationRequestV2
    /// </summary>
    [DataContract]
    public partial class CustomerProfileIntegrationRequestV2 :  IEquatable<CustomerProfileIntegrationRequestV2>, IValidatableObject
    {
        /// <summary>
        /// Defines ResponseContent
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResponseContentEnum
        {
            /// <summary>
            /// Enum CustomerProfile for value: customerProfile
            /// </summary>
            [EnumMember(Value = "customerProfile")]
            CustomerProfile = 1,

            /// <summary>
            /// Enum TriggeredCampaigns for value: triggeredCampaigns
            /// </summary>
            [EnumMember(Value = "triggeredCampaigns")]
            TriggeredCampaigns = 2,

            /// <summary>
            /// Enum Loyalty for value: loyalty
            /// </summary>
            [EnumMember(Value = "loyalty")]
            Loyalty = 3,

            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 4

        }


        /// <summary>
        /// Optional list of requested information to be present on the response related to the customer profile update. Currently supported: \&quot;customerProfile\&quot;, \&quot;triggeredCampaigns\&quot;, \&quot;loyalty\&quot; and \&quot;event\&quot;. 
        /// </summary>
        /// <value>Optional list of requested information to be present on the response related to the customer profile update. Currently supported: \&quot;customerProfile\&quot;, \&quot;triggeredCampaigns\&quot;, \&quot;loyalty\&quot; and \&quot;event\&quot;. </value>
        [DataMember(Name="responseContent", EmitDefaultValue=false)]
        public List<ResponseContentEnum> ResponseContent { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerProfileIntegrationRequestV2" /> class.
        /// </summary>
        /// <param name="attributes">Arbitrary properties associated with this item.</param>
        /// <param name="responseContent">Optional list of requested information to be present on the response related to the customer profile update. Currently supported: \&quot;customerProfile\&quot;, \&quot;triggeredCampaigns\&quot;, \&quot;loyalty\&quot; and \&quot;event\&quot;. .</param>
        public CustomerProfileIntegrationRequestV2(Object attributes = default(Object), List<ResponseContentEnum> responseContent = default(List<ResponseContentEnum>))
        {
            this.Attributes = attributes;
            this.ResponseContent = responseContent;
        }
        
        /// <summary>
        /// Arbitrary properties associated with this item
        /// </summary>
        /// <value>Arbitrary properties associated with this item</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerProfileIntegrationRequestV2 {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ResponseContent: ").Append(ResponseContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerProfileIntegrationRequestV2);
        }

        /// <summary>
        /// Returns true if CustomerProfileIntegrationRequestV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerProfileIntegrationRequestV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerProfileIntegrationRequestV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.ResponseContent == input.ResponseContent ||
                    this.ResponseContent != null &&
                    input.ResponseContent != null &&
                    this.ResponseContent.SequenceEqual(input.ResponseContent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.ResponseContent != null)
                    hashCode = hashCode * 59 + this.ResponseContent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
