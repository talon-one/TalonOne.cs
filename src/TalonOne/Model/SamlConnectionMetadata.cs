/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// SamlConnectionMetadata
    /// </summary>
    [DataContract]
    public partial class SamlConnectionMetadata :  IEquatable<SamlConnectionMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SamlConnectionMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SamlConnectionMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SamlConnectionMetadata" /> class.
        /// </summary>
        /// <param name="name">ID of the SAML service. (required).</param>
        /// <param name="enabled">Determines if this SAML connection active. (required).</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="metadataDocument">Identity Provider metadata XML document. (required).</param>
        public SamlConnectionMetadata(string name = default(string), bool enabled = default(bool), decimal accountId = default(decimal), string metadataDocument = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SamlConnectionMetadata and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "enabled" is required (not null)
            if (enabled == null)
            {
                throw new InvalidDataException("enabled is a required property for SamlConnectionMetadata and cannot be null");
            }
            else
            {
                this.Enabled = enabled;
            }
            
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for SamlConnectionMetadata and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            
            // to ensure "metadataDocument" is required (not null)
            if (metadataDocument == null)
            {
                throw new InvalidDataException("metadataDocument is a required property for SamlConnectionMetadata and cannot be null");
            }
            else
            {
                this.MetadataDocument = metadataDocument;
            }
            
        }
        
        /// <summary>
        /// ID of the SAML service.
        /// </summary>
        /// <value>ID of the SAML service.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Determines if this SAML connection active.
        /// </summary>
        /// <value>Determines if this SAML connection active.</value>
        [DataMember(Name="enabled", EmitDefaultValue=true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=true)]
        public decimal AccountId { get; set; }

        /// <summary>
        /// Identity Provider metadata XML document.
        /// </summary>
        /// <value>Identity Provider metadata XML document.</value>
        [DataMember(Name="metadataDocument", EmitDefaultValue=true)]
        public string MetadataDocument { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SamlConnectionMetadata {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  MetadataDocument: ").Append(MetadataDocument).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SamlConnectionMetadata);
        }

        /// <summary>
        /// Returns true if SamlConnectionMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of SamlConnectionMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SamlConnectionMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.MetadataDocument == input.MetadataDocument ||
                    (this.MetadataDocument != null &&
                    this.MetadataDocument.Equals(input.MetadataDocument))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.MetadataDocument != null)
                    hashCode = hashCode * 59 + this.MetadataDocument.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            

            // MetadataDocument (string) minLength
            if(this.MetadataDocument != null && this.MetadataDocument.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MetadataDocument, length must be greater than 1.", new [] { "MetadataDocument" });
            }
            
            yield break;
        }
    }

}
