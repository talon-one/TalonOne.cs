/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The parameters necessary to generate a loyalty card.
    /// </summary>
    [DataContract]
    public partial class GenerateLoyaltyCard :  IEquatable<GenerateLoyaltyCard>, IValidatableObject
    {
        /// <summary>
        /// Status of the loyalty card.
        /// </summary>
        /// <value>Status of the loyalty card.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Inactive for value: inactive
            /// </summary>
            [EnumMember(Value = "inactive")]
            Inactive = 2

        }

        /// <summary>
        /// Status of the loyalty card.
        /// </summary>
        /// <value>Status of the loyalty card.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateLoyaltyCard" /> class.
        /// </summary>
        /// <param name="status">Status of the loyalty card. (default to StatusEnum.Active).</param>
        /// <param name="customerProfileIds">Integration IDs of the customer profiles linked to the card..</param>
        /// <param name="cardIdentifier">The alphanumeric identifier of the loyalty card. .</param>
        public GenerateLoyaltyCard(StatusEnum? status = StatusEnum.Active, List<string> customerProfileIds = default(List<string>), string cardIdentifier = default(string))
        {
            this.Status = status;
            this.CustomerProfileIds = customerProfileIds;
            this.CardIdentifier = cardIdentifier;
        }
        
        /// <summary>
        /// Integration IDs of the customer profiles linked to the card.
        /// </summary>
        /// <value>Integration IDs of the customer profiles linked to the card.</value>
        [DataMember(Name="customerProfileIds", EmitDefaultValue=false)]
        public List<string> CustomerProfileIds { get; set; }

        /// <summary>
        /// The alphanumeric identifier of the loyalty card. 
        /// </summary>
        /// <value>The alphanumeric identifier of the loyalty card. </value>
        [DataMember(Name="cardIdentifier", EmitDefaultValue=false)]
        public string CardIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenerateLoyaltyCard {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CustomerProfileIds: ").Append(CustomerProfileIds).Append("\n");
            sb.Append("  CardIdentifier: ").Append(CardIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenerateLoyaltyCard);
        }

        /// <summary>
        /// Returns true if GenerateLoyaltyCard instances are equal
        /// </summary>
        /// <param name="input">Instance of GenerateLoyaltyCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerateLoyaltyCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CustomerProfileIds == input.CustomerProfileIds ||
                    this.CustomerProfileIds != null &&
                    input.CustomerProfileIds != null &&
                    this.CustomerProfileIds.SequenceEqual(input.CustomerProfileIds)
                ) && 
                (
                    this.CardIdentifier == input.CardIdentifier ||
                    (this.CardIdentifier != null &&
                    this.CardIdentifier.Equals(input.CardIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CustomerProfileIds != null)
                    hashCode = hashCode * 59 + this.CustomerProfileIds.GetHashCode();
                if (this.CardIdentifier != null)
                    hashCode = hashCode * 59 + this.CardIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CardIdentifier (string) maxLength
            if(this.CardIdentifier != null && this.CardIdentifier.Length > 108)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardIdentifier, length must be less than 108.", new [] { "CardIdentifier" });
            }

            // CardIdentifier (string) pattern
            Regex regexCardIdentifier = new Regex(@"^[A-Za-z0-9_-]*$", RegexOptions.CultureInvariant);
            if (false == regexCardIdentifier.Match(this.CardIdentifier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardIdentifier, must match a pattern of " + regexCardIdentifier, new [] { "CardIdentifier" });
            }

            yield break;
        }
    }

}
