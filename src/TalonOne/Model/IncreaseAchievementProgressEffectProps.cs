/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The properties specific to the \&quot;increaseAchievementProgress\&quot; effect. This gets triggered whenever a validated rule contained an \&quot;increase customer progress\&quot; effect.
    /// </summary>
    [DataContract]
    public partial class IncreaseAchievementProgressEffectProps :  IEquatable<IncreaseAchievementProgressEffectProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncreaseAchievementProgressEffectProps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IncreaseAchievementProgressEffectProps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IncreaseAchievementProgressEffectProps" /> class.
        /// </summary>
        /// <param name="achievementId">The internal ID of the achievement. (required).</param>
        /// <param name="achievementName">The name of the achievement. (required).</param>
        /// <param name="progressTrackerId">The internal ID of the achievement progress tracker..</param>
        /// <param name="delta">The value by which the customer&#39;s current progress in the achievement is increased. (required).</param>
        /// <param name="value">The current progress of the customer in the achievement. (required).</param>
        /// <param name="target">The required number of actions or the transactional milestone to complete the achievement. (required).</param>
        /// <param name="isJustCompleted">Indicates if the customer has completed the achievement in the current session. (required).</param>
        public IncreaseAchievementProgressEffectProps(int achievementId = default(int), string achievementName = default(string), int progressTrackerId = default(int), decimal delta = default(decimal), decimal value = default(decimal), decimal target = default(decimal), bool isJustCompleted = default(bool))
        {
            this.AchievementId = achievementId;
            // to ensure "achievementName" is required (not null)
            this.AchievementName = achievementName ?? throw new ArgumentNullException("achievementName is a required property for IncreaseAchievementProgressEffectProps and cannot be null");
            this.Delta = delta;
            this.Value = value;
            this.Target = target;
            this.IsJustCompleted = isJustCompleted;
            this.ProgressTrackerId = progressTrackerId;
        }
        
        /// <summary>
        /// The internal ID of the achievement.
        /// </summary>
        /// <value>The internal ID of the achievement.</value>
        [DataMember(Name="achievementId", EmitDefaultValue=false)]
        public int AchievementId { get; set; }

        /// <summary>
        /// The name of the achievement.
        /// </summary>
        /// <value>The name of the achievement.</value>
        [DataMember(Name="achievementName", EmitDefaultValue=false)]
        public string AchievementName { get; set; }

        /// <summary>
        /// The internal ID of the achievement progress tracker.
        /// </summary>
        /// <value>The internal ID of the achievement progress tracker.</value>
        [DataMember(Name="progressTrackerId", EmitDefaultValue=false)]
        public int ProgressTrackerId { get; set; }

        /// <summary>
        /// The value by which the customer&#39;s current progress in the achievement is increased.
        /// </summary>
        /// <value>The value by which the customer&#39;s current progress in the achievement is increased.</value>
        [DataMember(Name="delta", EmitDefaultValue=false)]
        public decimal Delta { get; set; }

        /// <summary>
        /// The current progress of the customer in the achievement.
        /// </summary>
        /// <value>The current progress of the customer in the achievement.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal Value { get; set; }

        /// <summary>
        /// The required number of actions or the transactional milestone to complete the achievement.
        /// </summary>
        /// <value>The required number of actions or the transactional milestone to complete the achievement.</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public decimal Target { get; set; }

        /// <summary>
        /// Indicates if the customer has completed the achievement in the current session.
        /// </summary>
        /// <value>Indicates if the customer has completed the achievement in the current session.</value>
        [DataMember(Name="isJustCompleted", EmitDefaultValue=false)]
        public bool IsJustCompleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncreaseAchievementProgressEffectProps {\n");
            sb.Append("  AchievementId: ").Append(AchievementId).Append("\n");
            sb.Append("  AchievementName: ").Append(AchievementName).Append("\n");
            sb.Append("  ProgressTrackerId: ").Append(ProgressTrackerId).Append("\n");
            sb.Append("  Delta: ").Append(Delta).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  IsJustCompleted: ").Append(IsJustCompleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncreaseAchievementProgressEffectProps);
        }

        /// <summary>
        /// Returns true if IncreaseAchievementProgressEffectProps instances are equal
        /// </summary>
        /// <param name="input">Instance of IncreaseAchievementProgressEffectProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncreaseAchievementProgressEffectProps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AchievementId == input.AchievementId ||
                    this.AchievementId.Equals(input.AchievementId)
                ) && 
                (
                    this.AchievementName == input.AchievementName ||
                    (this.AchievementName != null &&
                    this.AchievementName.Equals(input.AchievementName))
                ) && 
                (
                    this.ProgressTrackerId == input.ProgressTrackerId ||
                    this.ProgressTrackerId.Equals(input.ProgressTrackerId)
                ) && 
                (
                    this.Delta == input.Delta ||
                    this.Delta.Equals(input.Delta)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Target == input.Target ||
                    this.Target.Equals(input.Target)
                ) && 
                (
                    this.IsJustCompleted == input.IsJustCompleted ||
                    this.IsJustCompleted.Equals(input.IsJustCompleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AchievementId.GetHashCode();
                if (this.AchievementName != null)
                    hashCode = hashCode * 59 + this.AchievementName.GetHashCode();
                hashCode = hashCode * 59 + this.ProgressTrackerId.GetHashCode();
                hashCode = hashCode * 59 + this.Delta.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.Target.GetHashCode();
                hashCode = hashCode * 59 + this.IsJustCompleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
