/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TalonOne.Client.SwaggerDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// TemplateDef
    /// </summary>
    [DataContract]
    public partial class TemplateDef :  IEquatable<TemplateDef>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDef" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemplateDef() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDef" /> class.
        /// </summary>
        /// <param name="id">Unique ID for this entity. (required).</param>
        /// <param name="created">The exact moment this entity was created. (required).</param>
        /// <param name="applicationId">The ID of the application that owns this entity. (required).</param>
        /// <param name="title">Campaigner-friendly name for the template that will be shown in the rule editor. (required).</param>
        /// <param name="description">A short description of the template that will be shown in the rule editor. (required).</param>
        /// <param name="help">Extended help text for the template. (required).</param>
        /// <param name="category">Used for grouping templates in the rule editor sidebar. (required).</param>
        /// <param name="expr">A Talang expression that contains variable bindings referring to args. (required).</param>
        /// <param name="args">An array of argument definitions. (required).</param>
        /// <param name="expose">A flag to control exposure in Rule Builder. (default to false).</param>
        /// <param name="name">The template name used in Talang. (required).</param>
        public TemplateDef(int? id = default(int?), DateTime? created = default(DateTime?), int? applicationId = default(int?), string title = default(string), string description = default(string), string help = default(string), string category = default(string), List<Object> expr = default(List<Object>), List<TemplateArgDef> args = default(List<TemplateArgDef>), bool? expose = false, string name = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for TemplateDef and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new InvalidDataException("created is a required property for TemplateDef and cannot be null");
            }
            else
            {
                this.Created = created;
            }
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new InvalidDataException("applicationId is a required property for TemplateDef and cannot be null");
            }
            else
            {
                this.ApplicationId = applicationId;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for TemplateDef and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for TemplateDef and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "help" is required (not null)
            if (help == null)
            {
                throw new InvalidDataException("help is a required property for TemplateDef and cannot be null");
            }
            else
            {
                this.Help = help;
            }
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new InvalidDataException("category is a required property for TemplateDef and cannot be null");
            }
            else
            {
                this.Category = category;
            }
            // to ensure "expr" is required (not null)
            if (expr == null)
            {
                throw new InvalidDataException("expr is a required property for TemplateDef and cannot be null");
            }
            else
            {
                this.Expr = expr;
            }
            // to ensure "args" is required (not null)
            if (args == null)
            {
                throw new InvalidDataException("args is a required property for TemplateDef and cannot be null");
            }
            else
            {
                this.Args = args;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TemplateDef and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // use default value if no "expose" provided
            if (expose == null)
            {
                this.Expose = false;
            }
            else
            {
                this.Expose = expose;
            }
        }
        
        /// <summary>
        /// Unique ID for this entity.
        /// </summary>
        /// <value>Unique ID for this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The exact moment this entity was created.
        /// </summary>
        /// <value>The exact moment this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// The ID of the application that owns this entity.
        /// </summary>
        /// <value>The ID of the application that owns this entity.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int? ApplicationId { get; set; }

        /// <summary>
        /// Campaigner-friendly name for the template that will be shown in the rule editor.
        /// </summary>
        /// <value>Campaigner-friendly name for the template that will be shown in the rule editor.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// A short description of the template that will be shown in the rule editor.
        /// </summary>
        /// <value>A short description of the template that will be shown in the rule editor.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Extended help text for the template.
        /// </summary>
        /// <value>Extended help text for the template.</value>
        [DataMember(Name="help", EmitDefaultValue=false)]
        public string Help { get; set; }

        /// <summary>
        /// Used for grouping templates in the rule editor sidebar.
        /// </summary>
        /// <value>Used for grouping templates in the rule editor sidebar.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// A Talang expression that contains variable bindings referring to args.
        /// </summary>
        /// <value>A Talang expression that contains variable bindings referring to args.</value>
        [DataMember(Name="expr", EmitDefaultValue=false)]
        public List<Object> Expr { get; set; }

        /// <summary>
        /// An array of argument definitions.
        /// </summary>
        /// <value>An array of argument definitions.</value>
        [DataMember(Name="args", EmitDefaultValue=false)]
        public List<TemplateArgDef> Args { get; set; }

        /// <summary>
        /// A flag to control exposure in Rule Builder.
        /// </summary>
        /// <value>A flag to control exposure in Rule Builder.</value>
        [DataMember(Name="expose", EmitDefaultValue=false)]
        public bool? Expose { get; set; }

        /// <summary>
        /// The template name used in Talang.
        /// </summary>
        /// <value>The template name used in Talang.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateDef {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Help: ").Append(Help).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Expr: ").Append(Expr).Append("\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Expose: ").Append(Expose).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateDef);
        }

        /// <summary>
        /// Returns true if TemplateDef instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateDef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateDef input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Help == input.Help ||
                    (this.Help != null &&
                    this.Help.Equals(input.Help))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Expr == input.Expr ||
                    this.Expr != null &&
                    this.Expr.SequenceEqual(input.Expr)
                ) && 
                (
                    this.Args == input.Args ||
                    this.Args != null &&
                    this.Args.SequenceEqual(input.Args)
                ) && 
                (
                    this.Expose == input.Expose ||
                    (this.Expose != null &&
                    this.Expose.Equals(input.Expose))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Help != null)
                    hashCode = hashCode * 59 + this.Help.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Expr != null)
                    hashCode = hashCode * 59 + this.Expr.GetHashCode();
                if (this.Args != null)
                    hashCode = hashCode * 59 + this.Args.GetHashCode();
                if (this.Expose != null)
                    hashCode = hashCode * 59 + this.Expose.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) minLength
            if(this.Title != null && this.Title.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            // Category (string) minLength
            if(this.Category != null && this.Category.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Category, length must be greater than 1.", new [] { "Category" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
