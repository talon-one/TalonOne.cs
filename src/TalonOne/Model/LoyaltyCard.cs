/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// LoyaltyCard
    /// </summary>
    [DataContract]
    public partial class LoyaltyCard :  IEquatable<LoyaltyCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyCard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoyaltyCard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyCard" /> class.
        /// </summary>
        /// <param name="id">Internal ID of this entity. (required).</param>
        /// <param name="created">The time this entity was created. (required).</param>
        /// <param name="programID">The ID of the loyalty program that owns this entity. (required).</param>
        /// <param name="status">Status of the loyalty card. Can be one of: [&#39;active&#39;, &#39;inactive&#39;]  (required).</param>
        /// <param name="identifier">The alphanumeric identifier of the loyalty card.  (required).</param>
        /// <param name="usersPerCardLimit">The max amount of customer profiles that can be linked to the card. 0 means unlimited.  (required).</param>
        /// <param name="profiles">Integration IDs of the customers profiles linked to the card..</param>
        /// <param name="ledger">ledger.</param>
        /// <param name="subledgers">Displays point balances of the card in the subledgers of the loyalty program..</param>
        /// <param name="modified">Timestamp of the most recent update of the loyalty card..</param>
        /// <param name="oldCardIdentifier">The alphanumeric identifier of the loyalty card. .</param>
        /// <param name="newCardIdentifier">The alphanumeric identifier of the loyalty card. .</param>
        public LoyaltyCard(int id = default(int), DateTime created = default(DateTime), int programID = default(int), string status = default(string), string identifier = default(string), int usersPerCardLimit = default(int), List<LoyaltyCardProfileRegistration> profiles = default(List<LoyaltyCardProfileRegistration>), LedgerInfo ledger = default(LedgerInfo), Dictionary<string, LedgerInfo> subledgers = default(Dictionary<string, LedgerInfo>), DateTime modified = default(DateTime), string oldCardIdentifier = default(string), string newCardIdentifier = default(string))
        {
            this.Id = id;
            this.Created = created;
            this.ProgramID = programID;
            // to ensure "status" is required (not null)
            this.Status = status ?? throw new ArgumentNullException("status is a required property for LoyaltyCard and cannot be null");
            // to ensure "identifier" is required (not null)
            this.Identifier = identifier ?? throw new ArgumentNullException("identifier is a required property for LoyaltyCard and cannot be null");
            this.UsersPerCardLimit = usersPerCardLimit;
            this.Profiles = profiles;
            this.Ledger = ledger;
            this.Subledgers = subledgers;
            this.Modified = modified;
            this.OldCardIdentifier = oldCardIdentifier;
            this.NewCardIdentifier = newCardIdentifier;
        }
        
        /// <summary>
        /// Internal ID of this entity.
        /// </summary>
        /// <value>Internal ID of this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The time this entity was created.
        /// </summary>
        /// <value>The time this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The ID of the loyalty program that owns this entity.
        /// </summary>
        /// <value>The ID of the loyalty program that owns this entity.</value>
        [DataMember(Name="programID", EmitDefaultValue=false)]
        public int ProgramID { get; set; }

        /// <summary>
        /// Status of the loyalty card. Can be one of: [&#39;active&#39;, &#39;inactive&#39;] 
        /// </summary>
        /// <value>Status of the loyalty card. Can be one of: [&#39;active&#39;, &#39;inactive&#39;] </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The alphanumeric identifier of the loyalty card. 
        /// </summary>
        /// <value>The alphanumeric identifier of the loyalty card. </value>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// The max amount of customer profiles that can be linked to the card. 0 means unlimited. 
        /// </summary>
        /// <value>The max amount of customer profiles that can be linked to the card. 0 means unlimited. </value>
        [DataMember(Name="usersPerCardLimit", EmitDefaultValue=false)]
        public int UsersPerCardLimit { get; set; }

        /// <summary>
        /// Integration IDs of the customers profiles linked to the card.
        /// </summary>
        /// <value>Integration IDs of the customers profiles linked to the card.</value>
        [DataMember(Name="profiles", EmitDefaultValue=false)]
        public List<LoyaltyCardProfileRegistration> Profiles { get; set; }

        /// <summary>
        /// Gets or Sets Ledger
        /// </summary>
        [DataMember(Name="ledger", EmitDefaultValue=false)]
        public LedgerInfo Ledger { get; set; }

        /// <summary>
        /// Displays point balances of the card in the subledgers of the loyalty program.
        /// </summary>
        /// <value>Displays point balances of the card in the subledgers of the loyalty program.</value>
        [DataMember(Name="subledgers", EmitDefaultValue=false)]
        public Dictionary<string, LedgerInfo> Subledgers { get; set; }

        /// <summary>
        /// Timestamp of the most recent update of the loyalty card.
        /// </summary>
        /// <value>Timestamp of the most recent update of the loyalty card.</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// The alphanumeric identifier of the loyalty card. 
        /// </summary>
        /// <value>The alphanumeric identifier of the loyalty card. </value>
        [DataMember(Name="oldCardIdentifier", EmitDefaultValue=false)]
        public string OldCardIdentifier { get; set; }

        /// <summary>
        /// The alphanumeric identifier of the loyalty card. 
        /// </summary>
        /// <value>The alphanumeric identifier of the loyalty card. </value>
        [DataMember(Name="newCardIdentifier", EmitDefaultValue=false)]
        public string NewCardIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoyaltyCard {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ProgramID: ").Append(ProgramID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  UsersPerCardLimit: ").Append(UsersPerCardLimit).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  Ledger: ").Append(Ledger).Append("\n");
            sb.Append("  Subledgers: ").Append(Subledgers).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  OldCardIdentifier: ").Append(OldCardIdentifier).Append("\n");
            sb.Append("  NewCardIdentifier: ").Append(NewCardIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoyaltyCard);
        }

        /// <summary>
        /// Returns true if LoyaltyCard instances are equal
        /// </summary>
        /// <param name="input">Instance of LoyaltyCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ProgramID == input.ProgramID ||
                    this.ProgramID.Equals(input.ProgramID)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.UsersPerCardLimit == input.UsersPerCardLimit ||
                    this.UsersPerCardLimit.Equals(input.UsersPerCardLimit)
                ) && 
                (
                    this.Profiles == input.Profiles ||
                    this.Profiles != null &&
                    input.Profiles != null &&
                    this.Profiles.SequenceEqual(input.Profiles)
                ) && 
                (
                    this.Ledger == input.Ledger ||
                    (this.Ledger != null &&
                    this.Ledger.Equals(input.Ledger))
                ) && 
                (
                    this.Subledgers == input.Subledgers ||
                    this.Subledgers != null &&
                    input.Subledgers != null &&
                    this.Subledgers.SequenceEqual(input.Subledgers)
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.OldCardIdentifier == input.OldCardIdentifier ||
                    (this.OldCardIdentifier != null &&
                    this.OldCardIdentifier.Equals(input.OldCardIdentifier))
                ) && 
                (
                    this.NewCardIdentifier == input.NewCardIdentifier ||
                    (this.NewCardIdentifier != null &&
                    this.NewCardIdentifier.Equals(input.NewCardIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.ProgramID.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                hashCode = hashCode * 59 + this.UsersPerCardLimit.GetHashCode();
                if (this.Profiles != null)
                    hashCode = hashCode * 59 + this.Profiles.GetHashCode();
                if (this.Ledger != null)
                    hashCode = hashCode * 59 + this.Ledger.GetHashCode();
                if (this.Subledgers != null)
                    hashCode = hashCode * 59 + this.Subledgers.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.OldCardIdentifier != null)
                    hashCode = hashCode * 59 + this.OldCardIdentifier.GetHashCode();
                if (this.NewCardIdentifier != null)
                    hashCode = hashCode * 59 + this.NewCardIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Identifier (string) maxLength
            if(this.Identifier != null && this.Identifier.Length > 108)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Identifier, length must be less than 108.", new [] { "Identifier" });
            }

            // UsersPerCardLimit (int) minimum
            if(this.UsersPerCardLimit < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UsersPerCardLimit, must be a value greater than or equal to 0.", new [] { "UsersPerCardLimit" });
            }

            // OldCardIdentifier (string) maxLength
            if(this.OldCardIdentifier != null && this.OldCardIdentifier.Length > 108)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OldCardIdentifier, length must be less than 108.", new [] { "OldCardIdentifier" });
            }

            // NewCardIdentifier (string) maxLength
            if(this.NewCardIdentifier != null && this.NewCardIdentifier.Length > 108)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewCardIdentifier, length must be less than 108.", new [] { "NewCardIdentifier" });
            }

            yield break;
        }
    }

}
