/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Parameters for inviting a new user from an external identity provider.
    /// </summary>
    [DataContract]
    public partial class NewExternalInvitation :  IEquatable<NewExternalInvitation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewExternalInvitation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewExternalInvitation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewExternalInvitation" /> class.
        /// </summary>
        /// <param name="name">Name of the user..</param>
        /// <param name="userGroups">List of user groups in the external identity provider.  If there are roles in Talon.One whose names match these user groups, those roles will be automatically assigned to the user upon invitation. .</param>
        /// <param name="email">Email address of the user. (required).</param>
        public NewExternalInvitation(string name = default(string), List<string> userGroups = default(List<string>), string email = default(string))
        {
            // to ensure "email" is required (not null)
            this.Email = email ?? throw new ArgumentNullException("email is a required property for NewExternalInvitation and cannot be null");
            this.Name = name;
            this.UserGroups = userGroups;
        }
        
        /// <summary>
        /// Name of the user.
        /// </summary>
        /// <value>Name of the user.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// List of user groups in the external identity provider.  If there are roles in Talon.One whose names match these user groups, those roles will be automatically assigned to the user upon invitation. 
        /// </summary>
        /// <value>List of user groups in the external identity provider.  If there are roles in Talon.One whose names match these user groups, those roles will be automatically assigned to the user upon invitation. </value>
        [DataMember(Name="userGroups", EmitDefaultValue=false)]
        public List<string> UserGroups { get; set; }

        /// <summary>
        /// Email address of the user.
        /// </summary>
        /// <value>Email address of the user.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewExternalInvitation {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserGroups: ").Append(UserGroups).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewExternalInvitation);
        }

        /// <summary>
        /// Returns true if NewExternalInvitation instances are equal
        /// </summary>
        /// <param name="input">Instance of NewExternalInvitation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewExternalInvitation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UserGroups == input.UserGroups ||
                    this.UserGroups != null &&
                    input.UserGroups != null &&
                    this.UserGroups.SequenceEqual(input.UserGroups)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UserGroups != null)
                    hashCode = hashCode * 59 + this.UserGroups.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
