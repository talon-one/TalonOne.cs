/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// AccountLimits
    /// </summary>
    [DataContract]
    public partial class AccountLimits :  IEquatable<AccountLimits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountLimits" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountLimits() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountLimits" /> class.
        /// </summary>
        /// <param name="liveApplications">Total Number of allowed live applications in the account (required).</param>
        /// <param name="sandboxApplications">Total Number of allowed sandbox applications in the account (required).</param>
        /// <param name="activeCampaigns">Total Number of allowed active campaigns in the account (required).</param>
        /// <param name="coupons">Total Number of allowed coupons in the account (required).</param>
        /// <param name="referralCodes">Total Number of allowed referral codes in the account (required).</param>
        /// <param name="liveLoyaltyPrograms">Total Number of allowed live loyalty programs in the account (required).</param>
        /// <param name="sandboxLoyaltyPrograms">Total Number of allowed sandbox loyalty programs in the account (required).</param>
        /// <param name="webhooks">Total Number of allowed webhooks in the account (required).</param>
        /// <param name="users">Total Number of allowed users in the account (required).</param>
        /// <param name="apiVolume">Total allowed api volume (required).</param>
        /// <param name="activeRules">Total allowed active rulesets.</param>
        /// <param name="promotionTypes">array of rulesets where webhook is used (required).</param>
        public AccountLimits(int liveApplications = default(int), int sandboxApplications = default(int), int activeCampaigns = default(int), int coupons = default(int), int referralCodes = default(int), int liveLoyaltyPrograms = default(int), int sandboxLoyaltyPrograms = default(int), int webhooks = default(int), int users = default(int), int apiVolume = default(int), int activeRules = default(int), List<string> promotionTypes = default(List<string>))
        {
            // to ensure "liveApplications" is required (not null)
            if (liveApplications == null)
            {
                throw new InvalidDataException("liveApplications is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.LiveApplications = liveApplications;
            }
            
            // to ensure "sandboxApplications" is required (not null)
            if (sandboxApplications == null)
            {
                throw new InvalidDataException("sandboxApplications is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.SandboxApplications = sandboxApplications;
            }
            
            // to ensure "activeCampaigns" is required (not null)
            if (activeCampaigns == null)
            {
                throw new InvalidDataException("activeCampaigns is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.ActiveCampaigns = activeCampaigns;
            }
            
            // to ensure "coupons" is required (not null)
            if (coupons == null)
            {
                throw new InvalidDataException("coupons is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.Coupons = coupons;
            }
            
            // to ensure "referralCodes" is required (not null)
            if (referralCodes == null)
            {
                throw new InvalidDataException("referralCodes is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.ReferralCodes = referralCodes;
            }
            
            // to ensure "liveLoyaltyPrograms" is required (not null)
            if (liveLoyaltyPrograms == null)
            {
                throw new InvalidDataException("liveLoyaltyPrograms is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.LiveLoyaltyPrograms = liveLoyaltyPrograms;
            }
            
            // to ensure "sandboxLoyaltyPrograms" is required (not null)
            if (sandboxLoyaltyPrograms == null)
            {
                throw new InvalidDataException("sandboxLoyaltyPrograms is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.SandboxLoyaltyPrograms = sandboxLoyaltyPrograms;
            }
            
            // to ensure "webhooks" is required (not null)
            if (webhooks == null)
            {
                throw new InvalidDataException("webhooks is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.Webhooks = webhooks;
            }
            
            // to ensure "users" is required (not null)
            if (users == null)
            {
                throw new InvalidDataException("users is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.Users = users;
            }
            
            // to ensure "apiVolume" is required (not null)
            if (apiVolume == null)
            {
                throw new InvalidDataException("apiVolume is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.ApiVolume = apiVolume;
            }
            
            // to ensure "promotionTypes" is required (not null)
            if (promotionTypes == null)
            {
                throw new InvalidDataException("promotionTypes is a required property for AccountLimits and cannot be null");
            }
            else
            {
                this.PromotionTypes = promotionTypes;
            }
            
            this.ActiveRules = activeRules;
        }
        
        /// <summary>
        /// Total Number of allowed live applications in the account
        /// </summary>
        /// <value>Total Number of allowed live applications in the account</value>
        [DataMember(Name="liveApplications", EmitDefaultValue=false)]
        public int LiveApplications { get; set; }

        /// <summary>
        /// Total Number of allowed sandbox applications in the account
        /// </summary>
        /// <value>Total Number of allowed sandbox applications in the account</value>
        [DataMember(Name="sandboxApplications", EmitDefaultValue=false)]
        public int SandboxApplications { get; set; }

        /// <summary>
        /// Total Number of allowed active campaigns in the account
        /// </summary>
        /// <value>Total Number of allowed active campaigns in the account</value>
        [DataMember(Name="activeCampaigns", EmitDefaultValue=false)]
        public int ActiveCampaigns { get; set; }

        /// <summary>
        /// Total Number of allowed coupons in the account
        /// </summary>
        /// <value>Total Number of allowed coupons in the account</value>
        [DataMember(Name="coupons", EmitDefaultValue=false)]
        public int Coupons { get; set; }

        /// <summary>
        /// Total Number of allowed referral codes in the account
        /// </summary>
        /// <value>Total Number of allowed referral codes in the account</value>
        [DataMember(Name="referralCodes", EmitDefaultValue=false)]
        public int ReferralCodes { get; set; }

        /// <summary>
        /// Total Number of allowed live loyalty programs in the account
        /// </summary>
        /// <value>Total Number of allowed live loyalty programs in the account</value>
        [DataMember(Name="liveLoyaltyPrograms", EmitDefaultValue=false)]
        public int LiveLoyaltyPrograms { get; set; }

        /// <summary>
        /// Total Number of allowed sandbox loyalty programs in the account
        /// </summary>
        /// <value>Total Number of allowed sandbox loyalty programs in the account</value>
        [DataMember(Name="sandboxLoyaltyPrograms", EmitDefaultValue=false)]
        public int SandboxLoyaltyPrograms { get; set; }

        /// <summary>
        /// Total Number of allowed webhooks in the account
        /// </summary>
        /// <value>Total Number of allowed webhooks in the account</value>
        [DataMember(Name="webhooks", EmitDefaultValue=false)]
        public int Webhooks { get; set; }

        /// <summary>
        /// Total Number of allowed users in the account
        /// </summary>
        /// <value>Total Number of allowed users in the account</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public int Users { get; set; }

        /// <summary>
        /// Total allowed api volume
        /// </summary>
        /// <value>Total allowed api volume</value>
        [DataMember(Name="apiVolume", EmitDefaultValue=false)]
        public int ApiVolume { get; set; }

        /// <summary>
        /// Total allowed active rulesets
        /// </summary>
        /// <value>Total allowed active rulesets</value>
        [DataMember(Name="activeRules", EmitDefaultValue=false)]
        public int ActiveRules { get; set; }

        /// <summary>
        /// array of rulesets where webhook is used
        /// </summary>
        /// <value>array of rulesets where webhook is used</value>
        [DataMember(Name="promotionTypes", EmitDefaultValue=false)]
        public List<string> PromotionTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountLimits {\n");
            sb.Append("  LiveApplications: ").Append(LiveApplications).Append("\n");
            sb.Append("  SandboxApplications: ").Append(SandboxApplications).Append("\n");
            sb.Append("  ActiveCampaigns: ").Append(ActiveCampaigns).Append("\n");
            sb.Append("  Coupons: ").Append(Coupons).Append("\n");
            sb.Append("  ReferralCodes: ").Append(ReferralCodes).Append("\n");
            sb.Append("  LiveLoyaltyPrograms: ").Append(LiveLoyaltyPrograms).Append("\n");
            sb.Append("  SandboxLoyaltyPrograms: ").Append(SandboxLoyaltyPrograms).Append("\n");
            sb.Append("  Webhooks: ").Append(Webhooks).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  ApiVolume: ").Append(ApiVolume).Append("\n");
            sb.Append("  ActiveRules: ").Append(ActiveRules).Append("\n");
            sb.Append("  PromotionTypes: ").Append(PromotionTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountLimits);
        }

        /// <summary>
        /// Returns true if AccountLimits instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountLimits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountLimits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LiveApplications == input.LiveApplications ||
                    (this.LiveApplications != null &&
                    this.LiveApplications.Equals(input.LiveApplications))
                ) && 
                (
                    this.SandboxApplications == input.SandboxApplications ||
                    (this.SandboxApplications != null &&
                    this.SandboxApplications.Equals(input.SandboxApplications))
                ) && 
                (
                    this.ActiveCampaigns == input.ActiveCampaigns ||
                    (this.ActiveCampaigns != null &&
                    this.ActiveCampaigns.Equals(input.ActiveCampaigns))
                ) && 
                (
                    this.Coupons == input.Coupons ||
                    (this.Coupons != null &&
                    this.Coupons.Equals(input.Coupons))
                ) && 
                (
                    this.ReferralCodes == input.ReferralCodes ||
                    (this.ReferralCodes != null &&
                    this.ReferralCodes.Equals(input.ReferralCodes))
                ) && 
                (
                    this.LiveLoyaltyPrograms == input.LiveLoyaltyPrograms ||
                    (this.LiveLoyaltyPrograms != null &&
                    this.LiveLoyaltyPrograms.Equals(input.LiveLoyaltyPrograms))
                ) && 
                (
                    this.SandboxLoyaltyPrograms == input.SandboxLoyaltyPrograms ||
                    (this.SandboxLoyaltyPrograms != null &&
                    this.SandboxLoyaltyPrograms.Equals(input.SandboxLoyaltyPrograms))
                ) && 
                (
                    this.Webhooks == input.Webhooks ||
                    (this.Webhooks != null &&
                    this.Webhooks.Equals(input.Webhooks))
                ) && 
                (
                    this.Users == input.Users ||
                    (this.Users != null &&
                    this.Users.Equals(input.Users))
                ) && 
                (
                    this.ApiVolume == input.ApiVolume ||
                    (this.ApiVolume != null &&
                    this.ApiVolume.Equals(input.ApiVolume))
                ) && 
                (
                    this.ActiveRules == input.ActiveRules ||
                    (this.ActiveRules != null &&
                    this.ActiveRules.Equals(input.ActiveRules))
                ) && 
                (
                    this.PromotionTypes == input.PromotionTypes ||
                    this.PromotionTypes != null &&
                    input.PromotionTypes != null &&
                    this.PromotionTypes.SequenceEqual(input.PromotionTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LiveApplications != null)
                    hashCode = hashCode * 59 + this.LiveApplications.GetHashCode();
                if (this.SandboxApplications != null)
                    hashCode = hashCode * 59 + this.SandboxApplications.GetHashCode();
                if (this.ActiveCampaigns != null)
                    hashCode = hashCode * 59 + this.ActiveCampaigns.GetHashCode();
                if (this.Coupons != null)
                    hashCode = hashCode * 59 + this.Coupons.GetHashCode();
                if (this.ReferralCodes != null)
                    hashCode = hashCode * 59 + this.ReferralCodes.GetHashCode();
                if (this.LiveLoyaltyPrograms != null)
                    hashCode = hashCode * 59 + this.LiveLoyaltyPrograms.GetHashCode();
                if (this.SandboxLoyaltyPrograms != null)
                    hashCode = hashCode * 59 + this.SandboxLoyaltyPrograms.GetHashCode();
                if (this.Webhooks != null)
                    hashCode = hashCode * 59 + this.Webhooks.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.ApiVolume != null)
                    hashCode = hashCode * 59 + this.ApiVolume.GetHashCode();
                if (this.ActiveRules != null)
                    hashCode = hashCode * 59 + this.ActiveRules.GetHashCode();
                if (this.PromotionTypes != null)
                    hashCode = hashCode * 59 + this.PromotionTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
