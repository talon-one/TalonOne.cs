/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Campaign
    /// </summary>
    [DataContract]
    public partial class Campaign :  IEquatable<Campaign>, IValidatableObject
    {
        /// <summary>
        /// A disabled or archived campaign is not evaluated for rules or coupons. 
        /// </summary>
        /// <value>A disabled or archived campaign is not evaluated for rules or coupons. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Enabled for value: enabled
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled = 1,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled = 2,

            /// <summary>
            /// Enum Archived for value: archived
            /// </summary>
            [EnumMember(Value = "archived")]
            Archived = 3

        }

        /// <summary>
        /// A disabled or archived campaign is not evaluated for rules or coupons. 
        /// </summary>
        /// <value>A disabled or archived campaign is not evaluated for rules or coupons. </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Defines Features
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FeaturesEnum
        {
            /// <summary>
            /// Enum Coupons for value: coupons
            /// </summary>
            [EnumMember(Value = "coupons")]
            Coupons = 1,

            /// <summary>
            /// Enum Referrals for value: referrals
            /// </summary>
            [EnumMember(Value = "referrals")]
            Referrals = 2,

            /// <summary>
            /// Enum Loyalty for value: loyalty
            /// </summary>
            [EnumMember(Value = "loyalty")]
            Loyalty = 3,

            /// <summary>
            /// Enum Giveaways for value: giveaways
            /// </summary>
            [EnumMember(Value = "giveaways")]
            Giveaways = 4,

            /// <summary>
            /// Enum Strikethrough for value: strikethrough
            /// </summary>
            [EnumMember(Value = "strikethrough")]
            Strikethrough = 5,

            /// <summary>
            /// Enum Achievements for value: achievements
            /// </summary>
            [EnumMember(Value = "achievements")]
            Achievements = 6

        }


        /// <summary>
        /// The features enabled in this campaign.
        /// </summary>
        /// <value>The features enabled in this campaign.</value>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public List<FeaturesEnum> Features { get; set; }
        /// <summary>
        /// The campaign type. Possible type values:   - &#x60;cartItem&#x60;: Type of campaign that can apply effects only to cart items.   - &#x60;advanced&#x60;: Type of campaign that can apply effects to customer sessions and cart items. 
        /// </summary>
        /// <value>The campaign type. Possible type values:   - &#x60;cartItem&#x60;: Type of campaign that can apply effects only to cart items.   - &#x60;advanced&#x60;: Type of campaign that can apply effects to customer sessions and cart items. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CartItem for value: cartItem
            /// </summary>
            [EnumMember(Value = "cartItem")]
            CartItem = 1,

            /// <summary>
            /// Enum Advanced for value: advanced
            /// </summary>
            [EnumMember(Value = "advanced")]
            Advanced = 2

        }

        /// <summary>
        /// The campaign type. Possible type values:   - &#x60;cartItem&#x60;: Type of campaign that can apply effects only to cart items.   - &#x60;advanced&#x60;: Type of campaign that can apply effects to customer sessions and cart items. 
        /// </summary>
        /// <value>The campaign type. Possible type values:   - &#x60;cartItem&#x60;: Type of campaign that can apply effects only to cart items.   - &#x60;advanced&#x60;: Type of campaign that can apply effects to customer sessions and cart items. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// A campaign state described exactly as in the Campaign Manager.
        /// </summary>
        /// <value>A campaign state described exactly as in the Campaign Manager.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrontendStateEnum
        {
            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 1,

            /// <summary>
            /// Enum Scheduled for value: scheduled
            /// </summary>
            [EnumMember(Value = "scheduled")]
            Scheduled = 2,

            /// <summary>
            /// Enum Running for value: running
            /// </summary>
            [EnumMember(Value = "running")]
            Running = 3,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled = 4,

            /// <summary>
            /// Enum Archived for value: archived
            /// </summary>
            [EnumMember(Value = "archived")]
            Archived = 5

        }

        /// <summary>
        /// A campaign state described exactly as in the Campaign Manager.
        /// </summary>
        /// <value>A campaign state described exactly as in the Campaign Manager.</value>
        [DataMember(Name="frontendState", EmitDefaultValue=false)]
        public FrontendStateEnum FrontendState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Campaign" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Campaign() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Campaign" /> class.
        /// </summary>
        /// <param name="id">Unique ID for this entity. (required).</param>
        /// <param name="created">The exact moment this entity was created. (required).</param>
        /// <param name="applicationId">The ID of the application that owns this entity. (required).</param>
        /// <param name="userId">The ID of the user associated with this entity. (required).</param>
        /// <param name="name">A user-facing name for this campaign. (required).</param>
        /// <param name="description">A detailed description of the campaign. (required).</param>
        /// <param name="startTime">Timestamp when the campaign will become active..</param>
        /// <param name="endTime">Timestamp when the campaign will become inactive..</param>
        /// <param name="attributes">Arbitrary properties associated with this campaign..</param>
        /// <param name="state">A disabled or archived campaign is not evaluated for rules or coupons.  (required) (default to StateEnum.Enabled).</param>
        /// <param name="activeRulesetId">[ID of Ruleset](https://docs.talon.one/management-api#operation/getRulesets) this campaign applies on customer session evaluation. .</param>
        /// <param name="tags">A list of tags for the campaign. (required).</param>
        /// <param name="features">The features enabled in this campaign. (required).</param>
        /// <param name="couponSettings">couponSettings.</param>
        /// <param name="referralSettings">referralSettings.</param>
        /// <param name="limits">The set of [budget limits](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets) for this campaign.  (required).</param>
        /// <param name="campaignGroups">The IDs of the [campaign groups](https://docs.talon.one/docs/product/account/managing-campaign-groups) this campaign belongs to. .</param>
        /// <param name="type">The campaign type. Possible type values:   - &#x60;cartItem&#x60;: Type of campaign that can apply effects only to cart items.   - &#x60;advanced&#x60;: Type of campaign that can apply effects to customer sessions and cart items.  (required) (default to TypeEnum.Advanced).</param>
        /// <param name="linkedStoreIds">A list of store IDs that you want to link to the campaign.  **Note:** Campaigns with linked store IDs will only be evaluated when there is a [customer session update](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2) that references a linked store. .</param>
        /// <param name="budgets">A list of all the budgets that are defined by this campaign and their usage.  **Note:** Budgets that are not defined do not appear in this list and their usage is not counted until they are defined.  (required).</param>
        /// <param name="couponRedemptionCount">This property is **deprecated**. The count should be available under *budgets* property. Number of coupons redeemed in the campaign. .</param>
        /// <param name="referralRedemptionCount">This property is **deprecated**. The count should be available under *budgets* property. Number of referral codes redeemed in the campaign. .</param>
        /// <param name="discountCount">This property is **deprecated**. The count should be available under *budgets* property. Total amount of discounts redeemed in the campaign. .</param>
        /// <param name="discountEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of times discounts were redeemed in this campaign. .</param>
        /// <param name="couponCreationCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of coupons created by rules in this campaign. .</param>
        /// <param name="customEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of custom effects triggered by rules in this campaign. .</param>
        /// <param name="referralCreationCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of referrals created by rules in this campaign. .</param>
        /// <param name="addFreeItemEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of times the [add free item effect](https://docs.talon.one/docs/dev/integration-api/api-effects#addfreeitem) can be triggered in this campaign. .</param>
        /// <param name="awardedGiveawaysCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of giveaways awarded by rules in this campaign. .</param>
        /// <param name="createdLoyaltyPointsCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points created by rules in this campaign. .</param>
        /// <param name="createdLoyaltyPointsEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point creation effects triggered by rules in this campaign. .</param>
        /// <param name="redeemedLoyaltyPointsCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points redeemed by rules in this campaign. .</param>
        /// <param name="redeemedLoyaltyPointsEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point redemption effects triggered by rules in this campaign. .</param>
        /// <param name="callApiEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of webhooks triggered by rules in this campaign. .</param>
        /// <param name="reservecouponEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of reserve coupon effects triggered by rules in this campaign. .</param>
        /// <param name="lastActivity">Timestamp of the most recent event received by this campaign..</param>
        /// <param name="updated">Timestamp of the most recent update to the campaign&#39;s property. Updates to external entities used in this campaign are **not** registered by this property, such as collection or coupon updates. .</param>
        /// <param name="createdBy">Name of the user who created this campaign if available..</param>
        /// <param name="updatedBy">Name of the user who last updated this campaign if available..</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from..</param>
        /// <param name="frontendState">A campaign state described exactly as in the Campaign Manager. (required).</param>
        /// <param name="storesImported">Indicates whether the linked stores were imported via a CSV file. (required).</param>
        /// <param name="activeRevisionId">ID of the revision that was last activated on this campaign. .</param>
        /// <param name="activeRevisionVersionId">ID of the revision version that is active on the campaign. .</param>
        /// <param name="version">Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign. .</param>
        /// <param name="currentRevisionId">ID of the revision currently being modified for the campaign. .</param>
        /// <param name="currentRevisionVersionId">ID of the latest version applied on the current revision. .</param>
        /// <param name="stageRevision">Flag for determining whether we use current revision when sending requests with staging API key.  (default to false).</param>
        public Campaign(int id = default(int), DateTime created = default(DateTime), int applicationId = default(int), int userId = default(int), string name = default(string), string description = default(string), DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), Object attributes = default(Object), StateEnum state = StateEnum.Enabled, int activeRulesetId = default(int), List<string> tags = default(List<string>), List<FeaturesEnum> features = default(List<FeaturesEnum>), CodeGeneratorSettings couponSettings = default(CodeGeneratorSettings), CodeGeneratorSettings referralSettings = default(CodeGeneratorSettings), List<LimitConfig> limits = default(List<LimitConfig>), List<int> campaignGroups = default(List<int>), TypeEnum type = TypeEnum.Advanced, List<int> linkedStoreIds = default(List<int>), List<CampaignBudget> budgets = default(List<CampaignBudget>), int couponRedemptionCount = default(int), int referralRedemptionCount = default(int), decimal discountCount = default(decimal), int discountEffectCount = default(int), int couponCreationCount = default(int), int customEffectCount = default(int), int referralCreationCount = default(int), int addFreeItemEffectCount = default(int), int awardedGiveawaysCount = default(int), decimal createdLoyaltyPointsCount = default(decimal), int createdLoyaltyPointsEffectCount = default(int), decimal redeemedLoyaltyPointsCount = default(decimal), int redeemedLoyaltyPointsEffectCount = default(int), int callApiEffectCount = default(int), int reservecouponEffectCount = default(int), DateTime lastActivity = default(DateTime), DateTime updated = default(DateTime), string createdBy = default(string), string updatedBy = default(string), int templateId = default(int), FrontendStateEnum frontendState = default(FrontendStateEnum), bool storesImported = default(bool), int activeRevisionId = default(int), int activeRevisionVersionId = default(int), int version = default(int), int currentRevisionId = default(int), int currentRevisionVersionId = default(int), bool stageRevision = false)
        {
            this.Id = id;
            this.Created = created;
            this.ApplicationId = applicationId;
            this.UserId = userId;
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Campaign and cannot be null");
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for Campaign and cannot be null");
            this.State = state;
            // to ensure "tags" is required (not null)
            this.Tags = tags ?? throw new ArgumentNullException("tags is a required property for Campaign and cannot be null");
            // to ensure "features" is required (not null)
            this.Features = features ?? throw new ArgumentNullException("features is a required property for Campaign and cannot be null");
            // to ensure "limits" is required (not null)
            this.Limits = limits ?? throw new ArgumentNullException("limits is a required property for Campaign and cannot be null");
            this.Type = type;
            // to ensure "budgets" is required (not null)
            this.Budgets = budgets ?? throw new ArgumentNullException("budgets is a required property for Campaign and cannot be null");
            this.FrontendState = frontendState;
            this.StoresImported = storesImported;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Attributes = attributes;
            this.ActiveRulesetId = activeRulesetId;
            this.CouponSettings = couponSettings;
            this.ReferralSettings = referralSettings;
            this.CampaignGroups = campaignGroups;
            this.LinkedStoreIds = linkedStoreIds;
            this.CouponRedemptionCount = couponRedemptionCount;
            this.ReferralRedemptionCount = referralRedemptionCount;
            this.DiscountCount = discountCount;
            this.DiscountEffectCount = discountEffectCount;
            this.CouponCreationCount = couponCreationCount;
            this.CustomEffectCount = customEffectCount;
            this.ReferralCreationCount = referralCreationCount;
            this.AddFreeItemEffectCount = addFreeItemEffectCount;
            this.AwardedGiveawaysCount = awardedGiveawaysCount;
            this.CreatedLoyaltyPointsCount = createdLoyaltyPointsCount;
            this.CreatedLoyaltyPointsEffectCount = createdLoyaltyPointsEffectCount;
            this.RedeemedLoyaltyPointsCount = redeemedLoyaltyPointsCount;
            this.RedeemedLoyaltyPointsEffectCount = redeemedLoyaltyPointsEffectCount;
            this.CallApiEffectCount = callApiEffectCount;
            this.ReservecouponEffectCount = reservecouponEffectCount;
            this.LastActivity = lastActivity;
            this.Updated = updated;
            this.CreatedBy = createdBy;
            this.UpdatedBy = updatedBy;
            this.TemplateId = templateId;
            this.ActiveRevisionId = activeRevisionId;
            this.ActiveRevisionVersionId = activeRevisionVersionId;
            this.Version = version;
            this.CurrentRevisionId = currentRevisionId;
            this.CurrentRevisionVersionId = currentRevisionVersionId;
            this.StageRevision = stageRevision;
        }
        
        /// <summary>
        /// Unique ID for this entity.
        /// </summary>
        /// <value>Unique ID for this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The exact moment this entity was created.
        /// </summary>
        /// <value>The exact moment this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The ID of the application that owns this entity.
        /// </summary>
        /// <value>The ID of the application that owns this entity.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int ApplicationId { get; set; }

        /// <summary>
        /// The ID of the user associated with this entity.
        /// </summary>
        /// <value>The ID of the user associated with this entity.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int UserId { get; set; }

        /// <summary>
        /// A user-facing name for this campaign.
        /// </summary>
        /// <value>A user-facing name for this campaign.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A detailed description of the campaign.
        /// </summary>
        /// <value>A detailed description of the campaign.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Timestamp when the campaign will become active.
        /// </summary>
        /// <value>Timestamp when the campaign will become active.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Timestamp when the campaign will become inactive.
        /// </summary>
        /// <value>Timestamp when the campaign will become inactive.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Arbitrary properties associated with this campaign.
        /// </summary>
        /// <value>Arbitrary properties associated with this campaign.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }

        /// <summary>
        /// [ID of Ruleset](https://docs.talon.one/management-api#operation/getRulesets) this campaign applies on customer session evaluation. 
        /// </summary>
        /// <value>[ID of Ruleset](https://docs.talon.one/management-api#operation/getRulesets) this campaign applies on customer session evaluation. </value>
        [DataMember(Name="activeRulesetId", EmitDefaultValue=false)]
        public int ActiveRulesetId { get; set; }

        /// <summary>
        /// A list of tags for the campaign.
        /// </summary>
        /// <value>A list of tags for the campaign.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets CouponSettings
        /// </summary>
        [DataMember(Name="couponSettings", EmitDefaultValue=false)]
        public CodeGeneratorSettings CouponSettings { get; set; }

        /// <summary>
        /// Gets or Sets ReferralSettings
        /// </summary>
        [DataMember(Name="referralSettings", EmitDefaultValue=false)]
        public CodeGeneratorSettings ReferralSettings { get; set; }

        /// <summary>
        /// The set of [budget limits](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets) for this campaign. 
        /// </summary>
        /// <value>The set of [budget limits](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets) for this campaign. </value>
        [DataMember(Name="limits", EmitDefaultValue=false)]
        public List<LimitConfig> Limits { get; set; }

        /// <summary>
        /// The IDs of the [campaign groups](https://docs.talon.one/docs/product/account/managing-campaign-groups) this campaign belongs to. 
        /// </summary>
        /// <value>The IDs of the [campaign groups](https://docs.talon.one/docs/product/account/managing-campaign-groups) this campaign belongs to. </value>
        [DataMember(Name="campaignGroups", EmitDefaultValue=false)]
        public List<int> CampaignGroups { get; set; }

        /// <summary>
        /// A list of store IDs that you want to link to the campaign.  **Note:** Campaigns with linked store IDs will only be evaluated when there is a [customer session update](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2) that references a linked store. 
        /// </summary>
        /// <value>A list of store IDs that you want to link to the campaign.  **Note:** Campaigns with linked store IDs will only be evaluated when there is a [customer session update](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2) that references a linked store. </value>
        [DataMember(Name="linkedStoreIds", EmitDefaultValue=false)]
        public List<int> LinkedStoreIds { get; set; }

        /// <summary>
        /// A list of all the budgets that are defined by this campaign and their usage.  **Note:** Budgets that are not defined do not appear in this list and their usage is not counted until they are defined. 
        /// </summary>
        /// <value>A list of all the budgets that are defined by this campaign and their usage.  **Note:** Budgets that are not defined do not appear in this list and their usage is not counted until they are defined. </value>
        [DataMember(Name="budgets", EmitDefaultValue=false)]
        public List<CampaignBudget> Budgets { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Number of coupons redeemed in the campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Number of coupons redeemed in the campaign. </value>
        [DataMember(Name="couponRedemptionCount", EmitDefaultValue=false)]
        public int CouponRedemptionCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Number of referral codes redeemed in the campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Number of referral codes redeemed in the campaign. </value>
        [DataMember(Name="referralRedemptionCount", EmitDefaultValue=false)]
        public int ReferralRedemptionCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total amount of discounts redeemed in the campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total amount of discounts redeemed in the campaign. </value>
        [DataMember(Name="discountCount", EmitDefaultValue=false)]
        public decimal DiscountCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of times discounts were redeemed in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of times discounts were redeemed in this campaign. </value>
        [DataMember(Name="discountEffectCount", EmitDefaultValue=false)]
        public int DiscountEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of coupons created by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of coupons created by rules in this campaign. </value>
        [DataMember(Name="couponCreationCount", EmitDefaultValue=false)]
        public int CouponCreationCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of custom effects triggered by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of custom effects triggered by rules in this campaign. </value>
        [DataMember(Name="customEffectCount", EmitDefaultValue=false)]
        public int CustomEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of referrals created by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of referrals created by rules in this campaign. </value>
        [DataMember(Name="referralCreationCount", EmitDefaultValue=false)]
        public int ReferralCreationCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of times the [add free item effect](https://docs.talon.one/docs/dev/integration-api/api-effects#addfreeitem) can be triggered in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of times the [add free item effect](https://docs.talon.one/docs/dev/integration-api/api-effects#addfreeitem) can be triggered in this campaign. </value>
        [DataMember(Name="addFreeItemEffectCount", EmitDefaultValue=false)]
        public int AddFreeItemEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of giveaways awarded by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of giveaways awarded by rules in this campaign. </value>
        [DataMember(Name="awardedGiveawaysCount", EmitDefaultValue=false)]
        public int AwardedGiveawaysCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points created by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points created by rules in this campaign. </value>
        [DataMember(Name="createdLoyaltyPointsCount", EmitDefaultValue=false)]
        public decimal CreatedLoyaltyPointsCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point creation effects triggered by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point creation effects triggered by rules in this campaign. </value>
        [DataMember(Name="createdLoyaltyPointsEffectCount", EmitDefaultValue=false)]
        public int CreatedLoyaltyPointsEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points redeemed by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points redeemed by rules in this campaign. </value>
        [DataMember(Name="redeemedLoyaltyPointsCount", EmitDefaultValue=false)]
        public decimal RedeemedLoyaltyPointsCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point redemption effects triggered by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point redemption effects triggered by rules in this campaign. </value>
        [DataMember(Name="redeemedLoyaltyPointsEffectCount", EmitDefaultValue=false)]
        public int RedeemedLoyaltyPointsEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of webhooks triggered by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of webhooks triggered by rules in this campaign. </value>
        [DataMember(Name="callApiEffectCount", EmitDefaultValue=false)]
        public int CallApiEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of reserve coupon effects triggered by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of reserve coupon effects triggered by rules in this campaign. </value>
        [DataMember(Name="reservecouponEffectCount", EmitDefaultValue=false)]
        public int ReservecouponEffectCount { get; set; }

        /// <summary>
        /// Timestamp of the most recent event received by this campaign.
        /// </summary>
        /// <value>Timestamp of the most recent event received by this campaign.</value>
        [DataMember(Name="lastActivity", EmitDefaultValue=false)]
        public DateTime LastActivity { get; set; }

        /// <summary>
        /// Timestamp of the most recent update to the campaign&#39;s property. Updates to external entities used in this campaign are **not** registered by this property, such as collection or coupon updates. 
        /// </summary>
        /// <value>Timestamp of the most recent update to the campaign&#39;s property. Updates to external entities used in this campaign are **not** registered by this property, such as collection or coupon updates. </value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime Updated { get; set; }

        /// <summary>
        /// Name of the user who created this campaign if available.
        /// </summary>
        /// <value>Name of the user who created this campaign if available.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Name of the user who last updated this campaign if available.
        /// </summary>
        /// <value>Name of the user who last updated this campaign if available.</value>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// The ID of the Campaign Template this Campaign was created from.
        /// </summary>
        /// <value>The ID of the Campaign Template this Campaign was created from.</value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public int TemplateId { get; set; }

        /// <summary>
        /// Indicates whether the linked stores were imported via a CSV file.
        /// </summary>
        /// <value>Indicates whether the linked stores were imported via a CSV file.</value>
        [DataMember(Name="storesImported", EmitDefaultValue=false)]
        public bool StoresImported { get; set; }

        /// <summary>
        /// ID of the revision that was last activated on this campaign. 
        /// </summary>
        /// <value>ID of the revision that was last activated on this campaign. </value>
        [DataMember(Name="activeRevisionId", EmitDefaultValue=false)]
        public int ActiveRevisionId { get; set; }

        /// <summary>
        /// ID of the revision version that is active on the campaign. 
        /// </summary>
        /// <value>ID of the revision version that is active on the campaign. </value>
        [DataMember(Name="activeRevisionVersionId", EmitDefaultValue=false)]
        public int ActiveRevisionVersionId { get; set; }

        /// <summary>
        /// Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign. 
        /// </summary>
        /// <value>Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign. </value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int Version { get; set; }

        /// <summary>
        /// ID of the revision currently being modified for the campaign. 
        /// </summary>
        /// <value>ID of the revision currently being modified for the campaign. </value>
        [DataMember(Name="currentRevisionId", EmitDefaultValue=false)]
        public int CurrentRevisionId { get; set; }

        /// <summary>
        /// ID of the latest version applied on the current revision. 
        /// </summary>
        /// <value>ID of the latest version applied on the current revision. </value>
        [DataMember(Name="currentRevisionVersionId", EmitDefaultValue=false)]
        public int CurrentRevisionVersionId { get; set; }

        /// <summary>
        /// Flag for determining whether we use current revision when sending requests with staging API key. 
        /// </summary>
        /// <value>Flag for determining whether we use current revision when sending requests with staging API key. </value>
        [DataMember(Name="stageRevision", EmitDefaultValue=false)]
        public bool StageRevision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Campaign {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ActiveRulesetId: ").Append(ActiveRulesetId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  CouponSettings: ").Append(CouponSettings).Append("\n");
            sb.Append("  ReferralSettings: ").Append(ReferralSettings).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  CampaignGroups: ").Append(CampaignGroups).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LinkedStoreIds: ").Append(LinkedStoreIds).Append("\n");
            sb.Append("  Budgets: ").Append(Budgets).Append("\n");
            sb.Append("  CouponRedemptionCount: ").Append(CouponRedemptionCount).Append("\n");
            sb.Append("  ReferralRedemptionCount: ").Append(ReferralRedemptionCount).Append("\n");
            sb.Append("  DiscountCount: ").Append(DiscountCount).Append("\n");
            sb.Append("  DiscountEffectCount: ").Append(DiscountEffectCount).Append("\n");
            sb.Append("  CouponCreationCount: ").Append(CouponCreationCount).Append("\n");
            sb.Append("  CustomEffectCount: ").Append(CustomEffectCount).Append("\n");
            sb.Append("  ReferralCreationCount: ").Append(ReferralCreationCount).Append("\n");
            sb.Append("  AddFreeItemEffectCount: ").Append(AddFreeItemEffectCount).Append("\n");
            sb.Append("  AwardedGiveawaysCount: ").Append(AwardedGiveawaysCount).Append("\n");
            sb.Append("  CreatedLoyaltyPointsCount: ").Append(CreatedLoyaltyPointsCount).Append("\n");
            sb.Append("  CreatedLoyaltyPointsEffectCount: ").Append(CreatedLoyaltyPointsEffectCount).Append("\n");
            sb.Append("  RedeemedLoyaltyPointsCount: ").Append(RedeemedLoyaltyPointsCount).Append("\n");
            sb.Append("  RedeemedLoyaltyPointsEffectCount: ").Append(RedeemedLoyaltyPointsEffectCount).Append("\n");
            sb.Append("  CallApiEffectCount: ").Append(CallApiEffectCount).Append("\n");
            sb.Append("  ReservecouponEffectCount: ").Append(ReservecouponEffectCount).Append("\n");
            sb.Append("  LastActivity: ").Append(LastActivity).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  FrontendState: ").Append(FrontendState).Append("\n");
            sb.Append("  StoresImported: ").Append(StoresImported).Append("\n");
            sb.Append("  ActiveRevisionId: ").Append(ActiveRevisionId).Append("\n");
            sb.Append("  ActiveRevisionVersionId: ").Append(ActiveRevisionVersionId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  CurrentRevisionId: ").Append(CurrentRevisionId).Append("\n");
            sb.Append("  CurrentRevisionVersionId: ").Append(CurrentRevisionVersionId).Append("\n");
            sb.Append("  StageRevision: ").Append(StageRevision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Campaign);
        }

        /// <summary>
        /// Returns true if Campaign instances are equal
        /// </summary>
        /// <param name="input">Instance of Campaign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Campaign input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    this.ApplicationId.Equals(input.ApplicationId)
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.ActiveRulesetId == input.ActiveRulesetId ||
                    this.ActiveRulesetId.Equals(input.ActiveRulesetId)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.CouponSettings == input.CouponSettings ||
                    (this.CouponSettings != null &&
                    this.CouponSettings.Equals(input.CouponSettings))
                ) && 
                (
                    this.ReferralSettings == input.ReferralSettings ||
                    (this.ReferralSettings != null &&
                    this.ReferralSettings.Equals(input.ReferralSettings))
                ) && 
                (
                    this.Limits == input.Limits ||
                    this.Limits != null &&
                    input.Limits != null &&
                    this.Limits.SequenceEqual(input.Limits)
                ) && 
                (
                    this.CampaignGroups == input.CampaignGroups ||
                    this.CampaignGroups != null &&
                    input.CampaignGroups != null &&
                    this.CampaignGroups.SequenceEqual(input.CampaignGroups)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.LinkedStoreIds == input.LinkedStoreIds ||
                    this.LinkedStoreIds != null &&
                    input.LinkedStoreIds != null &&
                    this.LinkedStoreIds.SequenceEqual(input.LinkedStoreIds)
                ) && 
                (
                    this.Budgets == input.Budgets ||
                    this.Budgets != null &&
                    input.Budgets != null &&
                    this.Budgets.SequenceEqual(input.Budgets)
                ) && 
                (
                    this.CouponRedemptionCount == input.CouponRedemptionCount ||
                    this.CouponRedemptionCount.Equals(input.CouponRedemptionCount)
                ) && 
                (
                    this.ReferralRedemptionCount == input.ReferralRedemptionCount ||
                    this.ReferralRedemptionCount.Equals(input.ReferralRedemptionCount)
                ) && 
                (
                    this.DiscountCount == input.DiscountCount ||
                    this.DiscountCount.Equals(input.DiscountCount)
                ) && 
                (
                    this.DiscountEffectCount == input.DiscountEffectCount ||
                    this.DiscountEffectCount.Equals(input.DiscountEffectCount)
                ) && 
                (
                    this.CouponCreationCount == input.CouponCreationCount ||
                    this.CouponCreationCount.Equals(input.CouponCreationCount)
                ) && 
                (
                    this.CustomEffectCount == input.CustomEffectCount ||
                    this.CustomEffectCount.Equals(input.CustomEffectCount)
                ) && 
                (
                    this.ReferralCreationCount == input.ReferralCreationCount ||
                    this.ReferralCreationCount.Equals(input.ReferralCreationCount)
                ) && 
                (
                    this.AddFreeItemEffectCount == input.AddFreeItemEffectCount ||
                    this.AddFreeItemEffectCount.Equals(input.AddFreeItemEffectCount)
                ) && 
                (
                    this.AwardedGiveawaysCount == input.AwardedGiveawaysCount ||
                    this.AwardedGiveawaysCount.Equals(input.AwardedGiveawaysCount)
                ) && 
                (
                    this.CreatedLoyaltyPointsCount == input.CreatedLoyaltyPointsCount ||
                    this.CreatedLoyaltyPointsCount.Equals(input.CreatedLoyaltyPointsCount)
                ) && 
                (
                    this.CreatedLoyaltyPointsEffectCount == input.CreatedLoyaltyPointsEffectCount ||
                    this.CreatedLoyaltyPointsEffectCount.Equals(input.CreatedLoyaltyPointsEffectCount)
                ) && 
                (
                    this.RedeemedLoyaltyPointsCount == input.RedeemedLoyaltyPointsCount ||
                    this.RedeemedLoyaltyPointsCount.Equals(input.RedeemedLoyaltyPointsCount)
                ) && 
                (
                    this.RedeemedLoyaltyPointsEffectCount == input.RedeemedLoyaltyPointsEffectCount ||
                    this.RedeemedLoyaltyPointsEffectCount.Equals(input.RedeemedLoyaltyPointsEffectCount)
                ) && 
                (
                    this.CallApiEffectCount == input.CallApiEffectCount ||
                    this.CallApiEffectCount.Equals(input.CallApiEffectCount)
                ) && 
                (
                    this.ReservecouponEffectCount == input.ReservecouponEffectCount ||
                    this.ReservecouponEffectCount.Equals(input.ReservecouponEffectCount)
                ) && 
                (
                    this.LastActivity == input.LastActivity ||
                    (this.LastActivity != null &&
                    this.LastActivity.Equals(input.LastActivity))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    this.TemplateId.Equals(input.TemplateId)
                ) && 
                (
                    this.FrontendState == input.FrontendState ||
                    this.FrontendState.Equals(input.FrontendState)
                ) && 
                (
                    this.StoresImported == input.StoresImported ||
                    this.StoresImported.Equals(input.StoresImported)
                ) && 
                (
                    this.ActiveRevisionId == input.ActiveRevisionId ||
                    this.ActiveRevisionId.Equals(input.ActiveRevisionId)
                ) && 
                (
                    this.ActiveRevisionVersionId == input.ActiveRevisionVersionId ||
                    this.ActiveRevisionVersionId.Equals(input.ActiveRevisionVersionId)
                ) && 
                (
                    this.Version == input.Version ||
                    this.Version.Equals(input.Version)
                ) && 
                (
                    this.CurrentRevisionId == input.CurrentRevisionId ||
                    this.CurrentRevisionId.Equals(input.CurrentRevisionId)
                ) && 
                (
                    this.CurrentRevisionVersionId == input.CurrentRevisionVersionId ||
                    this.CurrentRevisionVersionId.Equals(input.CurrentRevisionVersionId)
                ) && 
                (
                    this.StageRevision == input.StageRevision ||
                    this.StageRevision.Equals(input.StageRevision)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                hashCode = hashCode * 59 + this.ActiveRulesetId.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.CouponSettings != null)
                    hashCode = hashCode * 59 + this.CouponSettings.GetHashCode();
                if (this.ReferralSettings != null)
                    hashCode = hashCode * 59 + this.ReferralSettings.GetHashCode();
                if (this.Limits != null)
                    hashCode = hashCode * 59 + this.Limits.GetHashCode();
                if (this.CampaignGroups != null)
                    hashCode = hashCode * 59 + this.CampaignGroups.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.LinkedStoreIds != null)
                    hashCode = hashCode * 59 + this.LinkedStoreIds.GetHashCode();
                if (this.Budgets != null)
                    hashCode = hashCode * 59 + this.Budgets.GetHashCode();
                hashCode = hashCode * 59 + this.CouponRedemptionCount.GetHashCode();
                hashCode = hashCode * 59 + this.ReferralRedemptionCount.GetHashCode();
                hashCode = hashCode * 59 + this.DiscountCount.GetHashCode();
                hashCode = hashCode * 59 + this.DiscountEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.CouponCreationCount.GetHashCode();
                hashCode = hashCode * 59 + this.CustomEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.ReferralCreationCount.GetHashCode();
                hashCode = hashCode * 59 + this.AddFreeItemEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.AwardedGiveawaysCount.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedLoyaltyPointsCount.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedLoyaltyPointsEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.RedeemedLoyaltyPointsCount.GetHashCode();
                hashCode = hashCode * 59 + this.RedeemedLoyaltyPointsEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.CallApiEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.ReservecouponEffectCount.GetHashCode();
                if (this.LastActivity != null)
                    hashCode = hashCode * 59 + this.LastActivity.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                hashCode = hashCode * 59 + this.FrontendState.GetHashCode();
                hashCode = hashCode * 59 + this.StoresImported.GetHashCode();
                hashCode = hashCode * 59 + this.ActiveRevisionId.GetHashCode();
                hashCode = hashCode * 59 + this.ActiveRevisionVersionId.GetHashCode();
                hashCode = hashCode * 59 + this.Version.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentRevisionId.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentRevisionVersionId.GetHashCode();
                hashCode = hashCode * 59 + this.StageRevision.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
