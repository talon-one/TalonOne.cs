/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// NewManagementKey
    /// </summary>
    [DataContract]
    public partial class NewManagementKey :  IEquatable<NewManagementKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewManagementKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewManagementKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewManagementKey" /> class.
        /// </summary>
        /// <param name="name">Name for management key. (required).</param>
        /// <param name="expiryDate">The date the management key expires. (required).</param>
        /// <param name="endpoints">The list of endpoints that can be accessed with the key (required).</param>
        /// <param name="allowedApplicationIds">A list of Application IDs that you can access with the management key. An empty or missing list means the management key can be used for all Applications in the account. .</param>
        /// <param name="id">ID of the management key. (required).</param>
        /// <param name="createdBy">ID of the user who created it. (required).</param>
        /// <param name="accountID">ID of account the key is used for. (required).</param>
        /// <param name="created">The date the management key was created. (required).</param>
        /// <param name="key">The management key. (required).</param>
        public NewManagementKey(string name = default(string), DateTime expiryDate = default(DateTime), List<Endpoint> endpoints = default(List<Endpoint>), List<int> allowedApplicationIds = default(List<int>), int id = default(int), int createdBy = default(int), int accountID = default(int), DateTime created = default(DateTime), string key = default(string))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for NewManagementKey and cannot be null");
            this.ExpiryDate = expiryDate;
            // to ensure "endpoints" is required (not null)
            this.Endpoints = endpoints ?? throw new ArgumentNullException("endpoints is a required property for NewManagementKey and cannot be null");
            this.Id = id;
            this.CreatedBy = createdBy;
            this.AccountID = accountID;
            this.Created = created;
            // to ensure "key" is required (not null)
            this.Key = key ?? throw new ArgumentNullException("key is a required property for NewManagementKey and cannot be null");
            this.AllowedApplicationIds = allowedApplicationIds;
        }
        
        /// <summary>
        /// Name for management key.
        /// </summary>
        /// <value>Name for management key.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The date the management key expires.
        /// </summary>
        /// <value>The date the management key expires.</value>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        public DateTime ExpiryDate { get; set; }

        /// <summary>
        /// The list of endpoints that can be accessed with the key
        /// </summary>
        /// <value>The list of endpoints that can be accessed with the key</value>
        [DataMember(Name="endpoints", EmitDefaultValue=false)]
        public List<Endpoint> Endpoints { get; set; }

        /// <summary>
        /// A list of Application IDs that you can access with the management key. An empty or missing list means the management key can be used for all Applications in the account. 
        /// </summary>
        /// <value>A list of Application IDs that you can access with the management key. An empty or missing list means the management key can be used for all Applications in the account. </value>
        [DataMember(Name="allowedApplicationIds", EmitDefaultValue=false)]
        public List<int> AllowedApplicationIds { get; set; }

        /// <summary>
        /// ID of the management key.
        /// </summary>
        /// <value>ID of the management key.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// ID of the user who created it.
        /// </summary>
        /// <value>ID of the user who created it.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public int CreatedBy { get; set; }

        /// <summary>
        /// ID of account the key is used for.
        /// </summary>
        /// <value>ID of account the key is used for.</value>
        [DataMember(Name="accountID", EmitDefaultValue=false)]
        public int AccountID { get; set; }

        /// <summary>
        /// The date the management key was created.
        /// </summary>
        /// <value>The date the management key was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The management key.
        /// </summary>
        /// <value>The management key.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewManagementKey {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  AllowedApplicationIds: ").Append(AllowedApplicationIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewManagementKey);
        }

        /// <summary>
        /// Returns true if NewManagementKey instances are equal
        /// </summary>
        /// <param name="input">Instance of NewManagementKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewManagementKey input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    input.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.AllowedApplicationIds == input.AllowedApplicationIds ||
                    this.AllowedApplicationIds != null &&
                    input.AllowedApplicationIds != null &&
                    this.AllowedApplicationIds.SequenceEqual(input.AllowedApplicationIds)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.AccountID == input.AccountID ||
                    this.AccountID.Equals(input.AccountID)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.AllowedApplicationIds != null)
                    hashCode = hashCode * 59 + this.AllowedApplicationIds.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
