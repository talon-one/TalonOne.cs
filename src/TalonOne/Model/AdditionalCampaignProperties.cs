/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// AdditionalCampaignProperties
    /// </summary>
    [DataContract]
    public partial class AdditionalCampaignProperties :  IEquatable<AdditionalCampaignProperties>, IValidatableObject
    {
        /// <summary>
        /// The campaign state displayed in the Campaign Manager.
        /// </summary>
        /// <value>The campaign state displayed in the Campaign Manager.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrontendStateEnum
        {
            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 1,

            /// <summary>
            /// Enum Scheduled for value: scheduled
            /// </summary>
            [EnumMember(Value = "scheduled")]
            Scheduled = 2,

            /// <summary>
            /// Enum Running for value: running
            /// </summary>
            [EnumMember(Value = "running")]
            Running = 3,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled = 4,

            /// <summary>
            /// Enum Archived for value: archived
            /// </summary>
            [EnumMember(Value = "archived")]
            Archived = 5,

            /// <summary>
            /// Enum Staged for value: staged
            /// </summary>
            [EnumMember(Value = "staged")]
            Staged = 6

        }

        /// <summary>
        /// The campaign state displayed in the Campaign Manager.
        /// </summary>
        /// <value>The campaign state displayed in the Campaign Manager.</value>
        [DataMember(Name="frontendState", EmitDefaultValue=false)]
        public FrontendStateEnum FrontendState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalCampaignProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdditionalCampaignProperties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalCampaignProperties" /> class.
        /// </summary>
        /// <param name="budgets">A list of all the budgets that are defined by this campaign and their usage.  **Note:** Budgets that are not defined do not appear in this list and their usage is not counted until they are defined.  (required).</param>
        /// <param name="couponRedemptionCount">This property is **deprecated**. The count should be available under *budgets* property. Number of coupons redeemed in the campaign. .</param>
        /// <param name="referralRedemptionCount">This property is **deprecated**. The count should be available under *budgets* property. Number of referral codes redeemed in the campaign. .</param>
        /// <param name="discountCount">This property is **deprecated**. The count should be available under *budgets* property. Total amount of discounts redeemed in the campaign. .</param>
        /// <param name="discountEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of times discounts were redeemed in this campaign. .</param>
        /// <param name="couponCreationCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of coupons created by rules in this campaign. .</param>
        /// <param name="customEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of custom effects triggered by rules in this campaign. .</param>
        /// <param name="referralCreationCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of referrals created by rules in this campaign. .</param>
        /// <param name="addFreeItemEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of times the [add free item effect](https://docs.talon.one/docs/dev/integration-api/api-effects#addfreeitem) can be triggered in this campaign. .</param>
        /// <param name="awardedGiveawaysCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of giveaways awarded by rules in this campaign. .</param>
        /// <param name="createdLoyaltyPointsCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points created by rules in this campaign. .</param>
        /// <param name="createdLoyaltyPointsEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point creation effects triggered by rules in this campaign. .</param>
        /// <param name="redeemedLoyaltyPointsCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points redeemed by rules in this campaign. .</param>
        /// <param name="redeemedLoyaltyPointsEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point redemption effects triggered by rules in this campaign. .</param>
        /// <param name="callApiEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of webhooks triggered by rules in this campaign. .</param>
        /// <param name="reservecouponEffectCount">This property is **deprecated**. The count should be available under *budgets* property. Total number of reserve coupon effects triggered by rules in this campaign. .</param>
        /// <param name="lastActivity">Timestamp of the most recent event received by this campaign..</param>
        /// <param name="updated">Timestamp of the most recent update to the campaign&#39;s property. Updates to external entities used in this campaign are **not** registered by this property, such as collection or coupon updates. .</param>
        /// <param name="createdBy">Name of the user who created this campaign if available..</param>
        /// <param name="updatedBy">Name of the user who last updated this campaign if available..</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from..</param>
        /// <param name="frontendState">The campaign state displayed in the Campaign Manager. (required).</param>
        /// <param name="storesImported">Indicates whether the linked stores were imported via a CSV file. (required).</param>
        public AdditionalCampaignProperties(List<CampaignBudget> budgets = default(List<CampaignBudget>), int couponRedemptionCount = default(int), int referralRedemptionCount = default(int), decimal discountCount = default(decimal), int discountEffectCount = default(int), int couponCreationCount = default(int), int customEffectCount = default(int), int referralCreationCount = default(int), int addFreeItemEffectCount = default(int), int awardedGiveawaysCount = default(int), decimal createdLoyaltyPointsCount = default(decimal), int createdLoyaltyPointsEffectCount = default(int), decimal redeemedLoyaltyPointsCount = default(decimal), int redeemedLoyaltyPointsEffectCount = default(int), int callApiEffectCount = default(int), int reservecouponEffectCount = default(int), DateTime lastActivity = default(DateTime), DateTime updated = default(DateTime), string createdBy = default(string), string updatedBy = default(string), int templateId = default(int), FrontendStateEnum frontendState = default(FrontendStateEnum), bool storesImported = default(bool))
        {
            // to ensure "budgets" is required (not null)
            this.Budgets = budgets ?? throw new ArgumentNullException("budgets is a required property for AdditionalCampaignProperties and cannot be null");
            this.FrontendState = frontendState;
            this.StoresImported = storesImported;
            this.CouponRedemptionCount = couponRedemptionCount;
            this.ReferralRedemptionCount = referralRedemptionCount;
            this.DiscountCount = discountCount;
            this.DiscountEffectCount = discountEffectCount;
            this.CouponCreationCount = couponCreationCount;
            this.CustomEffectCount = customEffectCount;
            this.ReferralCreationCount = referralCreationCount;
            this.AddFreeItemEffectCount = addFreeItemEffectCount;
            this.AwardedGiveawaysCount = awardedGiveawaysCount;
            this.CreatedLoyaltyPointsCount = createdLoyaltyPointsCount;
            this.CreatedLoyaltyPointsEffectCount = createdLoyaltyPointsEffectCount;
            this.RedeemedLoyaltyPointsCount = redeemedLoyaltyPointsCount;
            this.RedeemedLoyaltyPointsEffectCount = redeemedLoyaltyPointsEffectCount;
            this.CallApiEffectCount = callApiEffectCount;
            this.ReservecouponEffectCount = reservecouponEffectCount;
            this.LastActivity = lastActivity;
            this.Updated = updated;
            this.CreatedBy = createdBy;
            this.UpdatedBy = updatedBy;
            this.TemplateId = templateId;
        }
        
        /// <summary>
        /// A list of all the budgets that are defined by this campaign and their usage.  **Note:** Budgets that are not defined do not appear in this list and their usage is not counted until they are defined. 
        /// </summary>
        /// <value>A list of all the budgets that are defined by this campaign and their usage.  **Note:** Budgets that are not defined do not appear in this list and their usage is not counted until they are defined. </value>
        [DataMember(Name="budgets", EmitDefaultValue=false)]
        public List<CampaignBudget> Budgets { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Number of coupons redeemed in the campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Number of coupons redeemed in the campaign. </value>
        [DataMember(Name="couponRedemptionCount", EmitDefaultValue=false)]
        public int CouponRedemptionCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Number of referral codes redeemed in the campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Number of referral codes redeemed in the campaign. </value>
        [DataMember(Name="referralRedemptionCount", EmitDefaultValue=false)]
        public int ReferralRedemptionCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total amount of discounts redeemed in the campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total amount of discounts redeemed in the campaign. </value>
        [DataMember(Name="discountCount", EmitDefaultValue=false)]
        public decimal DiscountCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of times discounts were redeemed in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of times discounts were redeemed in this campaign. </value>
        [DataMember(Name="discountEffectCount", EmitDefaultValue=false)]
        public int DiscountEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of coupons created by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of coupons created by rules in this campaign. </value>
        [DataMember(Name="couponCreationCount", EmitDefaultValue=false)]
        public int CouponCreationCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of custom effects triggered by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of custom effects triggered by rules in this campaign. </value>
        [DataMember(Name="customEffectCount", EmitDefaultValue=false)]
        public int CustomEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of referrals created by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of referrals created by rules in this campaign. </value>
        [DataMember(Name="referralCreationCount", EmitDefaultValue=false)]
        public int ReferralCreationCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of times the [add free item effect](https://docs.talon.one/docs/dev/integration-api/api-effects#addfreeitem) can be triggered in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of times the [add free item effect](https://docs.talon.one/docs/dev/integration-api/api-effects#addfreeitem) can be triggered in this campaign. </value>
        [DataMember(Name="addFreeItemEffectCount", EmitDefaultValue=false)]
        public int AddFreeItemEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of giveaways awarded by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of giveaways awarded by rules in this campaign. </value>
        [DataMember(Name="awardedGiveawaysCount", EmitDefaultValue=false)]
        public int AwardedGiveawaysCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points created by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points created by rules in this campaign. </value>
        [DataMember(Name="createdLoyaltyPointsCount", EmitDefaultValue=false)]
        public decimal CreatedLoyaltyPointsCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point creation effects triggered by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point creation effects triggered by rules in this campaign. </value>
        [DataMember(Name="createdLoyaltyPointsEffectCount", EmitDefaultValue=false)]
        public int CreatedLoyaltyPointsEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points redeemed by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty points redeemed by rules in this campaign. </value>
        [DataMember(Name="redeemedLoyaltyPointsCount", EmitDefaultValue=false)]
        public decimal RedeemedLoyaltyPointsCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point redemption effects triggered by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of loyalty point redemption effects triggered by rules in this campaign. </value>
        [DataMember(Name="redeemedLoyaltyPointsEffectCount", EmitDefaultValue=false)]
        public int RedeemedLoyaltyPointsEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of webhooks triggered by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of webhooks triggered by rules in this campaign. </value>
        [DataMember(Name="callApiEffectCount", EmitDefaultValue=false)]
        public int CallApiEffectCount { get; set; }

        /// <summary>
        /// This property is **deprecated**. The count should be available under *budgets* property. Total number of reserve coupon effects triggered by rules in this campaign. 
        /// </summary>
        /// <value>This property is **deprecated**. The count should be available under *budgets* property. Total number of reserve coupon effects triggered by rules in this campaign. </value>
        [DataMember(Name="reservecouponEffectCount", EmitDefaultValue=false)]
        public int ReservecouponEffectCount { get; set; }

        /// <summary>
        /// Timestamp of the most recent event received by this campaign.
        /// </summary>
        /// <value>Timestamp of the most recent event received by this campaign.</value>
        [DataMember(Name="lastActivity", EmitDefaultValue=false)]
        public DateTime LastActivity { get; set; }

        /// <summary>
        /// Timestamp of the most recent update to the campaign&#39;s property. Updates to external entities used in this campaign are **not** registered by this property, such as collection or coupon updates. 
        /// </summary>
        /// <value>Timestamp of the most recent update to the campaign&#39;s property. Updates to external entities used in this campaign are **not** registered by this property, such as collection or coupon updates. </value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime Updated { get; set; }

        /// <summary>
        /// Name of the user who created this campaign if available.
        /// </summary>
        /// <value>Name of the user who created this campaign if available.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Name of the user who last updated this campaign if available.
        /// </summary>
        /// <value>Name of the user who last updated this campaign if available.</value>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// The ID of the Campaign Template this Campaign was created from.
        /// </summary>
        /// <value>The ID of the Campaign Template this Campaign was created from.</value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public int TemplateId { get; set; }

        /// <summary>
        /// Indicates whether the linked stores were imported via a CSV file.
        /// </summary>
        /// <value>Indicates whether the linked stores were imported via a CSV file.</value>
        [DataMember(Name="storesImported", EmitDefaultValue=false)]
        public bool StoresImported { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalCampaignProperties {\n");
            sb.Append("  Budgets: ").Append(Budgets).Append("\n");
            sb.Append("  CouponRedemptionCount: ").Append(CouponRedemptionCount).Append("\n");
            sb.Append("  ReferralRedemptionCount: ").Append(ReferralRedemptionCount).Append("\n");
            sb.Append("  DiscountCount: ").Append(DiscountCount).Append("\n");
            sb.Append("  DiscountEffectCount: ").Append(DiscountEffectCount).Append("\n");
            sb.Append("  CouponCreationCount: ").Append(CouponCreationCount).Append("\n");
            sb.Append("  CustomEffectCount: ").Append(CustomEffectCount).Append("\n");
            sb.Append("  ReferralCreationCount: ").Append(ReferralCreationCount).Append("\n");
            sb.Append("  AddFreeItemEffectCount: ").Append(AddFreeItemEffectCount).Append("\n");
            sb.Append("  AwardedGiveawaysCount: ").Append(AwardedGiveawaysCount).Append("\n");
            sb.Append("  CreatedLoyaltyPointsCount: ").Append(CreatedLoyaltyPointsCount).Append("\n");
            sb.Append("  CreatedLoyaltyPointsEffectCount: ").Append(CreatedLoyaltyPointsEffectCount).Append("\n");
            sb.Append("  RedeemedLoyaltyPointsCount: ").Append(RedeemedLoyaltyPointsCount).Append("\n");
            sb.Append("  RedeemedLoyaltyPointsEffectCount: ").Append(RedeemedLoyaltyPointsEffectCount).Append("\n");
            sb.Append("  CallApiEffectCount: ").Append(CallApiEffectCount).Append("\n");
            sb.Append("  ReservecouponEffectCount: ").Append(ReservecouponEffectCount).Append("\n");
            sb.Append("  LastActivity: ").Append(LastActivity).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  FrontendState: ").Append(FrontendState).Append("\n");
            sb.Append("  StoresImported: ").Append(StoresImported).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalCampaignProperties);
        }

        /// <summary>
        /// Returns true if AdditionalCampaignProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalCampaignProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalCampaignProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Budgets == input.Budgets ||
                    this.Budgets != null &&
                    input.Budgets != null &&
                    this.Budgets.SequenceEqual(input.Budgets)
                ) && 
                (
                    this.CouponRedemptionCount == input.CouponRedemptionCount ||
                    this.CouponRedemptionCount.Equals(input.CouponRedemptionCount)
                ) && 
                (
                    this.ReferralRedemptionCount == input.ReferralRedemptionCount ||
                    this.ReferralRedemptionCount.Equals(input.ReferralRedemptionCount)
                ) && 
                (
                    this.DiscountCount == input.DiscountCount ||
                    this.DiscountCount.Equals(input.DiscountCount)
                ) && 
                (
                    this.DiscountEffectCount == input.DiscountEffectCount ||
                    this.DiscountEffectCount.Equals(input.DiscountEffectCount)
                ) && 
                (
                    this.CouponCreationCount == input.CouponCreationCount ||
                    this.CouponCreationCount.Equals(input.CouponCreationCount)
                ) && 
                (
                    this.CustomEffectCount == input.CustomEffectCount ||
                    this.CustomEffectCount.Equals(input.CustomEffectCount)
                ) && 
                (
                    this.ReferralCreationCount == input.ReferralCreationCount ||
                    this.ReferralCreationCount.Equals(input.ReferralCreationCount)
                ) && 
                (
                    this.AddFreeItemEffectCount == input.AddFreeItemEffectCount ||
                    this.AddFreeItemEffectCount.Equals(input.AddFreeItemEffectCount)
                ) && 
                (
                    this.AwardedGiveawaysCount == input.AwardedGiveawaysCount ||
                    this.AwardedGiveawaysCount.Equals(input.AwardedGiveawaysCount)
                ) && 
                (
                    this.CreatedLoyaltyPointsCount == input.CreatedLoyaltyPointsCount ||
                    this.CreatedLoyaltyPointsCount.Equals(input.CreatedLoyaltyPointsCount)
                ) && 
                (
                    this.CreatedLoyaltyPointsEffectCount == input.CreatedLoyaltyPointsEffectCount ||
                    this.CreatedLoyaltyPointsEffectCount.Equals(input.CreatedLoyaltyPointsEffectCount)
                ) && 
                (
                    this.RedeemedLoyaltyPointsCount == input.RedeemedLoyaltyPointsCount ||
                    this.RedeemedLoyaltyPointsCount.Equals(input.RedeemedLoyaltyPointsCount)
                ) && 
                (
                    this.RedeemedLoyaltyPointsEffectCount == input.RedeemedLoyaltyPointsEffectCount ||
                    this.RedeemedLoyaltyPointsEffectCount.Equals(input.RedeemedLoyaltyPointsEffectCount)
                ) && 
                (
                    this.CallApiEffectCount == input.CallApiEffectCount ||
                    this.CallApiEffectCount.Equals(input.CallApiEffectCount)
                ) && 
                (
                    this.ReservecouponEffectCount == input.ReservecouponEffectCount ||
                    this.ReservecouponEffectCount.Equals(input.ReservecouponEffectCount)
                ) && 
                (
                    this.LastActivity == input.LastActivity ||
                    (this.LastActivity != null &&
                    this.LastActivity.Equals(input.LastActivity))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    this.TemplateId.Equals(input.TemplateId)
                ) && 
                (
                    this.FrontendState == input.FrontendState ||
                    this.FrontendState.Equals(input.FrontendState)
                ) && 
                (
                    this.StoresImported == input.StoresImported ||
                    this.StoresImported.Equals(input.StoresImported)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Budgets != null)
                    hashCode = hashCode * 59 + this.Budgets.GetHashCode();
                hashCode = hashCode * 59 + this.CouponRedemptionCount.GetHashCode();
                hashCode = hashCode * 59 + this.ReferralRedemptionCount.GetHashCode();
                hashCode = hashCode * 59 + this.DiscountCount.GetHashCode();
                hashCode = hashCode * 59 + this.DiscountEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.CouponCreationCount.GetHashCode();
                hashCode = hashCode * 59 + this.CustomEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.ReferralCreationCount.GetHashCode();
                hashCode = hashCode * 59 + this.AddFreeItemEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.AwardedGiveawaysCount.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedLoyaltyPointsCount.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedLoyaltyPointsEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.RedeemedLoyaltyPointsCount.GetHashCode();
                hashCode = hashCode * 59 + this.RedeemedLoyaltyPointsEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.CallApiEffectCount.GetHashCode();
                hashCode = hashCode * 59 + this.ReservecouponEffectCount.GetHashCode();
                if (this.LastActivity != null)
                    hashCode = hashCode * 59 + this.LastActivity.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                hashCode = hashCode * 59 + this.FrontendState.GetHashCode();
                hashCode = hashCode * 59 + this.StoresImported.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
