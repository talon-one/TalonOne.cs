/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// NewCampaignStoreBudget
    /// </summary>
    [DataContract]
    public partial class NewCampaignStoreBudget :  IEquatable<NewCampaignStoreBudget>, IValidatableObject
    {
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum SetDiscount for value: setDiscount
            /// </summary>
            [EnumMember(Value = "setDiscount")]
            SetDiscount = 1

        }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Defines Period
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            /// <summary>
            /// Enum Daily for value: daily
            /// </summary>
            [EnumMember(Value = "daily")]
            Daily = 1,

            /// <summary>
            /// Enum Weekly for value: weekly
            /// </summary>
            [EnumMember(Value = "weekly")]
            Weekly = 2,

            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            [EnumMember(Value = "monthly")]
            Monthly = 3,

            /// <summary>
            /// Enum Yearly for value: yearly
            /// </summary>
            [EnumMember(Value = "yearly")]
            Yearly = 4

        }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public PeriodEnum? Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewCampaignStoreBudget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewCampaignStoreBudget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewCampaignStoreBudget" /> class.
        /// </summary>
        /// <param name="action">action (required).</param>
        /// <param name="storeLimits">The set of budget limits for stores linked to the campaign. (required).</param>
        /// <param name="period">period.</param>
        public NewCampaignStoreBudget(ActionEnum action = default(ActionEnum), List<NewCampaignStoreBudgetStoreLimit> storeLimits = default(List<NewCampaignStoreBudgetStoreLimit>), PeriodEnum? period = default(PeriodEnum?))
        {
            this.Action = action;
            // to ensure "storeLimits" is required (not null)
            this.StoreLimits = storeLimits ?? throw new ArgumentNullException("storeLimits is a required property for NewCampaignStoreBudget and cannot be null");
            this.Period = period;
        }
        
        /// <summary>
        /// The set of budget limits for stores linked to the campaign.
        /// </summary>
        /// <value>The set of budget limits for stores linked to the campaign.</value>
        [DataMember(Name="storeLimits", EmitDefaultValue=false)]
        public List<NewCampaignStoreBudgetStoreLimit> StoreLimits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewCampaignStoreBudget {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  StoreLimits: ").Append(StoreLimits).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewCampaignStoreBudget);
        }

        /// <summary>
        /// Returns true if NewCampaignStoreBudget instances are equal
        /// </summary>
        /// <param name="input">Instance of NewCampaignStoreBudget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewCampaignStoreBudget input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.StoreLimits == input.StoreLimits ||
                    this.StoreLimits != null &&
                    input.StoreLimits != null &&
                    this.StoreLimits.SequenceEqual(input.StoreLimits)
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.StoreLimits != null)
                    hashCode = hashCode * 59 + this.StoreLimits.GetHashCode();
                hashCode = hashCode * 59 + this.Period.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
