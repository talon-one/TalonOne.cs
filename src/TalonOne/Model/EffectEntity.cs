/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Definition of all properties that are present on all effects, independent of their type
    /// </summary>
    [DataContract]
    public partial class EffectEntity :  IEquatable<EffectEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EffectEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EffectEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EffectEntity" /> class.
        /// </summary>
        /// <param name="campaignId">The ID of the campaign that triggered this effect (required).</param>
        /// <param name="rulesetId">The ID of the ruleset that was active in the campaign when this effect was triggered (required).</param>
        /// <param name="ruleIndex">The position of the rule that triggered this effect within the ruleset (required).</param>
        /// <param name="ruleName">The name of the rule that triggered this effect (required).</param>
        /// <param name="effectType">The type of effect that was triggered (required).</param>
        public EffectEntity(int campaignId = default(int), int rulesetId = default(int), int ruleIndex = default(int), string ruleName = default(string), string effectType = default(string))
        {
            // to ensure "campaignId" is required (not null)
            if (campaignId == null)
            {
                throw new InvalidDataException("campaignId is a required property for EffectEntity and cannot be null");
            }
            else
            {
                this.CampaignId = campaignId;
            }
            
            // to ensure "rulesetId" is required (not null)
            if (rulesetId == null)
            {
                throw new InvalidDataException("rulesetId is a required property for EffectEntity and cannot be null");
            }
            else
            {
                this.RulesetId = rulesetId;
            }
            
            // to ensure "ruleIndex" is required (not null)
            if (ruleIndex == null)
            {
                throw new InvalidDataException("ruleIndex is a required property for EffectEntity and cannot be null");
            }
            else
            {
                this.RuleIndex = ruleIndex;
            }
            
            // to ensure "ruleName" is required (not null)
            if (ruleName == null)
            {
                throw new InvalidDataException("ruleName is a required property for EffectEntity and cannot be null");
            }
            else
            {
                this.RuleName = ruleName;
            }
            
            // to ensure "effectType" is required (not null)
            if (effectType == null)
            {
                throw new InvalidDataException("effectType is a required property for EffectEntity and cannot be null");
            }
            else
            {
                this.EffectType = effectType;
            }
            
        }
        
        /// <summary>
        /// The ID of the campaign that triggered this effect
        /// </summary>
        /// <value>The ID of the campaign that triggered this effect</value>
        [DataMember(Name="campaignId", EmitDefaultValue=true)]
        public int CampaignId { get; set; }

        /// <summary>
        /// The ID of the ruleset that was active in the campaign when this effect was triggered
        /// </summary>
        /// <value>The ID of the ruleset that was active in the campaign when this effect was triggered</value>
        [DataMember(Name="rulesetId", EmitDefaultValue=true)]
        public int RulesetId { get; set; }

        /// <summary>
        /// The position of the rule that triggered this effect within the ruleset
        /// </summary>
        /// <value>The position of the rule that triggered this effect within the ruleset</value>
        [DataMember(Name="ruleIndex", EmitDefaultValue=true)]
        public int RuleIndex { get; set; }

        /// <summary>
        /// The name of the rule that triggered this effect
        /// </summary>
        /// <value>The name of the rule that triggered this effect</value>
        [DataMember(Name="ruleName", EmitDefaultValue=true)]
        public string RuleName { get; set; }

        /// <summary>
        /// The type of effect that was triggered
        /// </summary>
        /// <value>The type of effect that was triggered</value>
        [DataMember(Name="effectType", EmitDefaultValue=true)]
        public string EffectType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EffectEntity {\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  RulesetId: ").Append(RulesetId).Append("\n");
            sb.Append("  RuleIndex: ").Append(RuleIndex).Append("\n");
            sb.Append("  RuleName: ").Append(RuleName).Append("\n");
            sb.Append("  EffectType: ").Append(EffectType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EffectEntity);
        }

        /// <summary>
        /// Returns true if EffectEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of EffectEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EffectEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.RulesetId == input.RulesetId ||
                    (this.RulesetId != null &&
                    this.RulesetId.Equals(input.RulesetId))
                ) && 
                (
                    this.RuleIndex == input.RuleIndex ||
                    (this.RuleIndex != null &&
                    this.RuleIndex.Equals(input.RuleIndex))
                ) && 
                (
                    this.RuleName == input.RuleName ||
                    (this.RuleName != null &&
                    this.RuleName.Equals(input.RuleName))
                ) && 
                (
                    this.EffectType == input.EffectType ||
                    (this.EffectType != null &&
                    this.EffectType.Equals(input.EffectType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CampaignId != null)
                    hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                if (this.RulesetId != null)
                    hashCode = hashCode * 59 + this.RulesetId.GetHashCode();
                if (this.RuleIndex != null)
                    hashCode = hashCode * 59 + this.RuleIndex.GetHashCode();
                if (this.RuleName != null)
                    hashCode = hashCode * 59 + this.RuleName.GetHashCode();
                if (this.EffectType != null)
                    hashCode = hashCode * 59 + this.EffectType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
