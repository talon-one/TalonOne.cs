/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// NewMessageTest
    /// </summary>
    [DataContract]
    public partial class NewMessageTest :  IEquatable<NewMessageTest>, IValidatableObject
    {
        /// <summary>
        /// The message type.
        /// </summary>
        /// <value>The message type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Campaign for value: campaign
            /// </summary>
            [EnumMember(Value = "campaign")]
            Campaign = 1,

            /// <summary>
            /// Enum Loyaltyaddeddeductedpoints for value: loyalty_added_deducted_points
            /// </summary>
            [EnumMember(Value = "loyalty_added_deducted_points")]
            Loyaltyaddeddeductedpoints = 2,

            /// <summary>
            /// Enum Cardaddeddeductedpoints for value: card_added_deducted_points
            /// </summary>
            [EnumMember(Value = "card_added_deducted_points")]
            Cardaddeddeductedpoints = 3,

            /// <summary>
            /// Enum Loyaltyaddeddeductedpointsbalances for value: loyalty_added_deducted_points_balances
            /// </summary>
            [EnumMember(Value = "loyalty_added_deducted_points_balances")]
            Loyaltyaddeddeductedpointsbalances = 4,

            /// <summary>
            /// Enum Loyaltycardaddeddeductedpointsbalances for value: loyalty_card_added_deducted_points_balances
            /// </summary>
            [EnumMember(Value = "loyalty_card_added_deducted_points_balances")]
            Loyaltycardaddeddeductedpointsbalances = 5,

            /// <summary>
            /// Enum Coupon for value: coupon
            /// </summary>
            [EnumMember(Value = "coupon")]
            Coupon = 6,

            /// <summary>
            /// Enum Expiringcoupons for value: expiring_coupons
            /// </summary>
            [EnumMember(Value = "expiring_coupons")]
            Expiringcoupons = 7,

            /// <summary>
            /// Enum Expiringpoints for value: expiring_points
            /// </summary>
            [EnumMember(Value = "expiring_points")]
            Expiringpoints = 8,

            /// <summary>
            /// Enum Pendingtoactivepoints for value: pending_to_active_points
            /// </summary>
            [EnumMember(Value = "pending_to_active_points")]
            Pendingtoactivepoints = 9,

            /// <summary>
            /// Enum Strikethroughpricing for value: strikethrough_pricing
            /// </summary>
            [EnumMember(Value = "strikethrough_pricing")]
            Strikethroughpricing = 10,

            /// <summary>
            /// Enum Tierdowngrade for value: tier_downgrade
            /// </summary>
            [EnumMember(Value = "tier_downgrade")]
            Tierdowngrade = 11,

            /// <summary>
            /// Enum Tierupgrade for value: tier_upgrade
            /// </summary>
            [EnumMember(Value = "tier_upgrade")]
            Tierupgrade = 12,

            /// <summary>
            /// Enum Tierwilldowngrade for value: tier_will_downgrade
            /// </summary>
            [EnumMember(Value = "tier_will_downgrade")]
            Tierwilldowngrade = 13,

            /// <summary>
            /// Enum Cardexpiringpoints for value: card_expiring_points
            /// </summary>
            [EnumMember(Value = "card_expiring_points")]
            Cardexpiringpoints = 14,

            /// <summary>
            /// Enum Ruleenginewebhook for value: rule_engine_webhook
            /// </summary>
            [EnumMember(Value = "rule_engine_webhook")]
            Ruleenginewebhook = 15

        }

        /// <summary>
        /// The message type.
        /// </summary>
        /// <value>The message type.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// API method for this message.
        /// </summary>
        /// <value>API method for this message.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerbEnum
        {
            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            [EnumMember(Value = "POST")]
            POST = 1,

            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            [EnumMember(Value = "PUT")]
            PUT = 2,

            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GET = 3,

            /// <summary>
            /// Enum DELETE for value: DELETE
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETE = 4,

            /// <summary>
            /// Enum PATCH for value: PATCH
            /// </summary>
            [EnumMember(Value = "PATCH")]
            PATCH = 5

        }

        /// <summary>
        /// API method for this message.
        /// </summary>
        /// <value>API method for this message.</value>
        [DataMember(Name="verb", EmitDefaultValue=false)]
        public VerbEnum Verb { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewMessageTest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewMessageTest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewMessageTest" /> class.
        /// </summary>
        /// <param name="type">The message type. (required).</param>
        /// <param name="queryParams">Array of query parameters..</param>
        /// <param name="headers">List of API HTTP headers for the given message..</param>
        /// <param name="verb">API method for this message. (required).</param>
        /// <param name="url">API URL for the given message. (required).</param>
        /// <param name="payload">API payload of this message..</param>
        public NewMessageTest(TypeEnum type = default(TypeEnum), Dictionary<string, string> queryParams = default(Dictionary<string, string>), Dictionary<string, string> headers = default(Dictionary<string, string>), VerbEnum verb = default(VerbEnum), string url = default(string), string payload = default(string))
        {
            this.Type = type;
            this.Verb = verb;
            // to ensure "url" is required (not null)
            this.Url = url ?? throw new ArgumentNullException("url is a required property for NewMessageTest and cannot be null");
            this.QueryParams = queryParams;
            this.Headers = headers;
            this.Payload = payload;
        }
        
        /// <summary>
        /// Array of query parameters.
        /// </summary>
        /// <value>Array of query parameters.</value>
        [DataMember(Name="queryParams", EmitDefaultValue=false)]
        public Dictionary<string, string> QueryParams { get; set; }

        /// <summary>
        /// List of API HTTP headers for the given message.
        /// </summary>
        /// <value>List of API HTTP headers for the given message.</value>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public Dictionary<string, string> Headers { get; set; }

        /// <summary>
        /// API URL for the given message.
        /// </summary>
        /// <value>API URL for the given message.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// API payload of this message.
        /// </summary>
        /// <value>API payload of this message.</value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewMessageTest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  QueryParams: ").Append(QueryParams).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Verb: ").Append(Verb).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewMessageTest);
        }

        /// <summary>
        /// Returns true if NewMessageTest instances are equal
        /// </summary>
        /// <param name="input">Instance of NewMessageTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewMessageTest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.QueryParams == input.QueryParams ||
                    this.QueryParams != null &&
                    input.QueryParams != null &&
                    this.QueryParams.SequenceEqual(input.QueryParams)
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.Verb == input.Verb ||
                    this.Verb.Equals(input.Verb)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.QueryParams != null)
                    hashCode = hashCode * 59 + this.QueryParams.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                hashCode = hashCode * 59 + this.Verb.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
