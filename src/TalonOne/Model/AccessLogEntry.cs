/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Log of application accesses.
    /// </summary>
    [DataContract]
    public partial class AccessLogEntry :  IEquatable<AccessLogEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessLogEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccessLogEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessLogEntry" /> class.
        /// </summary>
        /// <param name="uuid">UUID reference of request. (required).</param>
        /// <param name="status">HTTP status code of response. (required).</param>
        /// <param name="method">HTTP method of request. (required).</param>
        /// <param name="requestUri">target URI of request (required).</param>
        /// <param name="time">timestamp of request (required).</param>
        /// <param name="requestPayload">payload of request (required).</param>
        /// <param name="responsePayload">payload of response (required).</param>
        public AccessLogEntry(string uuid = default(string), int status = default(int), string method = default(string), string requestUri = default(string), DateTime time = default(DateTime), string requestPayload = default(string), string responsePayload = default(string))
        {
            // to ensure "uuid" is required (not null)
            this.Uuid = uuid ?? throw new ArgumentNullException("uuid is a required property for AccessLogEntry and cannot be null");
            this.Status = status;
            // to ensure "method" is required (not null)
            this.Method = method ?? throw new ArgumentNullException("method is a required property for AccessLogEntry and cannot be null");
            // to ensure "requestUri" is required (not null)
            this.RequestUri = requestUri ?? throw new ArgumentNullException("requestUri is a required property for AccessLogEntry and cannot be null");
            this.Time = time;
            // to ensure "requestPayload" is required (not null)
            this.RequestPayload = requestPayload ?? throw new ArgumentNullException("requestPayload is a required property for AccessLogEntry and cannot be null");
            // to ensure "responsePayload" is required (not null)
            this.ResponsePayload = responsePayload ?? throw new ArgumentNullException("responsePayload is a required property for AccessLogEntry and cannot be null");
        }
        
        /// <summary>
        /// UUID reference of request.
        /// </summary>
        /// <value>UUID reference of request.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// HTTP status code of response.
        /// </summary>
        /// <value>HTTP status code of response.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int Status { get; set; }

        /// <summary>
        /// HTTP method of request.
        /// </summary>
        /// <value>HTTP method of request.</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// target URI of request
        /// </summary>
        /// <value>target URI of request</value>
        [DataMember(Name="requestUri", EmitDefaultValue=false)]
        public string RequestUri { get; set; }

        /// <summary>
        /// timestamp of request
        /// </summary>
        /// <value>timestamp of request</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime Time { get; set; }

        /// <summary>
        /// payload of request
        /// </summary>
        /// <value>payload of request</value>
        [DataMember(Name="requestPayload", EmitDefaultValue=false)]
        public string RequestPayload { get; set; }

        /// <summary>
        /// payload of response
        /// </summary>
        /// <value>payload of response</value>
        [DataMember(Name="responsePayload", EmitDefaultValue=false)]
        public string ResponsePayload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessLogEntry {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  RequestUri: ").Append(RequestUri).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  RequestPayload: ").Append(RequestPayload).Append("\n");
            sb.Append("  ResponsePayload: ").Append(ResponsePayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccessLogEntry);
        }

        /// <summary>
        /// Returns true if AccessLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of AccessLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessLogEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.RequestUri == input.RequestUri ||
                    (this.RequestUri != null &&
                    this.RequestUri.Equals(input.RequestUri))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.RequestPayload == input.RequestPayload ||
                    (this.RequestPayload != null &&
                    this.RequestPayload.Equals(input.RequestPayload))
                ) && 
                (
                    this.ResponsePayload == input.ResponsePayload ||
                    (this.ResponsePayload != null &&
                    this.ResponsePayload.Equals(input.ResponsePayload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.RequestUri != null)
                    hashCode = hashCode * 59 + this.RequestUri.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.RequestPayload != null)
                    hashCode = hashCode * 59 + this.RequestPayload.GetHashCode();
                if (this.ResponsePayload != null)
                    hashCode = hashCode * 59 + this.ResponsePayload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
