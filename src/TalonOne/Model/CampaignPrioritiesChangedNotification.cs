/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Notification about an Application whose campaigns&#39; priorities changed.
    /// </summary>
    [DataContract]
    public partial class CampaignPrioritiesChangedNotification :  IEquatable<CampaignPrioritiesChangedNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignPrioritiesChangedNotification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CampaignPrioritiesChangedNotification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignPrioritiesChangedNotification" /> class.
        /// </summary>
        /// <param name="application">application (required).</param>
        /// <param name="oldPriorities">Campaign IDs for each priority. The priority can be one of: [&#39;universal&#39;, &#39;stackable&#39;, &#39;exclusive&#39;] .</param>
        /// <param name="priorities">Campaign IDs for each priority. The priority can be one of: [&#39;universal&#39;, &#39;stackable&#39;, &#39;exclusive&#39;]  (required).</param>
        public CampaignPrioritiesChangedNotification(Application application = default(Application), Dictionary<string, List<int>> oldPriorities = default(Dictionary<string, List<int>>), Dictionary<string, List<int>> priorities = default(Dictionary<string, List<int>>))
        {
            // to ensure "application" is required (not null)
            this.Application = application ?? throw new ArgumentNullException("application is a required property for CampaignPrioritiesChangedNotification and cannot be null");
            // to ensure "priorities" is required (not null)
            this.Priorities = priorities ?? throw new ArgumentNullException("priorities is a required property for CampaignPrioritiesChangedNotification and cannot be null");
            this.OldPriorities = oldPriorities;
        }
        
        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name="application", EmitDefaultValue=false)]
        public Application Application { get; set; }

        /// <summary>
        /// Campaign IDs for each priority. The priority can be one of: [&#39;universal&#39;, &#39;stackable&#39;, &#39;exclusive&#39;] 
        /// </summary>
        /// <value>Campaign IDs for each priority. The priority can be one of: [&#39;universal&#39;, &#39;stackable&#39;, &#39;exclusive&#39;] </value>
        [DataMember(Name="oldPriorities", EmitDefaultValue=false)]
        public Dictionary<string, List<int>> OldPriorities { get; set; }

        /// <summary>
        /// Campaign IDs for each priority. The priority can be one of: [&#39;universal&#39;, &#39;stackable&#39;, &#39;exclusive&#39;] 
        /// </summary>
        /// <value>Campaign IDs for each priority. The priority can be one of: [&#39;universal&#39;, &#39;stackable&#39;, &#39;exclusive&#39;] </value>
        [DataMember(Name="priorities", EmitDefaultValue=false)]
        public Dictionary<string, List<int>> Priorities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CampaignPrioritiesChangedNotification {\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  OldPriorities: ").Append(OldPriorities).Append("\n");
            sb.Append("  Priorities: ").Append(Priorities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CampaignPrioritiesChangedNotification);
        }

        /// <summary>
        /// Returns true if CampaignPrioritiesChangedNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of CampaignPrioritiesChangedNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampaignPrioritiesChangedNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.OldPriorities == input.OldPriorities ||
                    this.OldPriorities != null &&
                    input.OldPriorities != null &&
                    this.OldPriorities.SequenceEqual(input.OldPriorities)
                ) && 
                (
                    this.Priorities == input.Priorities ||
                    this.Priorities != null &&
                    input.Priorities != null &&
                    this.Priorities.SequenceEqual(input.Priorities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Application != null)
                    hashCode = hashCode * 59 + this.Application.GetHashCode();
                if (this.OldPriorities != null)
                    hashCode = hashCode * 59 + this.OldPriorities.GetHashCode();
                if (this.Priorities != null)
                    hashCode = hashCode * 59 + this.Priorities.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
