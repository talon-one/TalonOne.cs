/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The information of affected items.
    /// </summary>
    [DataContract]
    public partial class StrikethroughChangedItem :  IEquatable<StrikethroughChangedItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StrikethroughChangedItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StrikethroughChangedItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StrikethroughChangedItem" /> class.
        /// </summary>
        /// <param name="id">The ID of the event that triggered the strikethrough labeling. (required).</param>
        /// <param name="catalogId">The ID of the catalog that the changed item belongs to. (required).</param>
        /// <param name="sku">The unique SKU of the changed item. (required).</param>
        /// <param name="version">The version of the changed item. (required).</param>
        /// <param name="price">The price of the changed item. (required).</param>
        /// <param name="evaluatedAt">The evaluation time of the changed item. (required).</param>
        /// <param name="effects">effects.</param>
        public StrikethroughChangedItem(int id = default(int), int catalogId = default(int), string sku = default(string), int version = default(int), decimal price = default(decimal), DateTime evaluatedAt = default(DateTime), List<StrikethroughEffect> effects = default(List<StrikethroughEffect>))
        {
            this.Id = id;
            this.CatalogId = catalogId;
            // to ensure "sku" is required (not null)
            this.Sku = sku ?? throw new ArgumentNullException("sku is a required property for StrikethroughChangedItem and cannot be null");
            this.Version = version;
            this.Price = price;
            this.EvaluatedAt = evaluatedAt;
            this.Effects = effects;
        }
        
        /// <summary>
        /// The ID of the event that triggered the strikethrough labeling.
        /// </summary>
        /// <value>The ID of the event that triggered the strikethrough labeling.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The ID of the catalog that the changed item belongs to.
        /// </summary>
        /// <value>The ID of the catalog that the changed item belongs to.</value>
        [DataMember(Name="catalogId", EmitDefaultValue=false)]
        public int CatalogId { get; set; }

        /// <summary>
        /// The unique SKU of the changed item.
        /// </summary>
        /// <value>The unique SKU of the changed item.</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// The version of the changed item.
        /// </summary>
        /// <value>The version of the changed item.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int Version { get; set; }

        /// <summary>
        /// The price of the changed item.
        /// </summary>
        /// <value>The price of the changed item.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal Price { get; set; }

        /// <summary>
        /// The evaluation time of the changed item.
        /// </summary>
        /// <value>The evaluation time of the changed item.</value>
        [DataMember(Name="evaluatedAt", EmitDefaultValue=false)]
        public DateTime EvaluatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Effects
        /// </summary>
        [DataMember(Name="effects", EmitDefaultValue=false)]
        public List<StrikethroughEffect> Effects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StrikethroughChangedItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  EvaluatedAt: ").Append(EvaluatedAt).Append("\n");
            sb.Append("  Effects: ").Append(Effects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StrikethroughChangedItem);
        }

        /// <summary>
        /// Returns true if StrikethroughChangedItem instances are equal
        /// </summary>
        /// <param name="input">Instance of StrikethroughChangedItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StrikethroughChangedItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CatalogId == input.CatalogId ||
                    this.CatalogId.Equals(input.CatalogId)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Version == input.Version ||
                    this.Version.Equals(input.Version)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.EvaluatedAt == input.EvaluatedAt ||
                    (this.EvaluatedAt != null &&
                    this.EvaluatedAt.Equals(input.EvaluatedAt))
                ) && 
                (
                    this.Effects == input.Effects ||
                    this.Effects != null &&
                    input.Effects != null &&
                    this.Effects.SequenceEqual(input.Effects)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.CatalogId.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                hashCode = hashCode * 59 + this.Version.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.EvaluatedAt != null)
                    hashCode = hashCode * 59 + this.EvaluatedAt.GetHashCode();
                if (this.Effects != null)
                    hashCode = hashCode * 59 + this.Effects.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Version (int) minimum
            if(this.Version < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Version, must be a value greater than or equal to 1.", new [] { "Version" });
            }

            yield break;
        }
    }

}
