/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// LoyaltyProjectionData
    /// </summary>
    [DataContract]
    public partial class LoyaltyProjectionData :  IEquatable<LoyaltyProjectionData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyProjectionData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoyaltyProjectionData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyProjectionData" /> class.
        /// </summary>
        /// <param name="date">Specific date of projection. (required).</param>
        /// <param name="expiringPoints">Points that will be expired by the specified date. (required).</param>
        /// <param name="activatingPoints">Points that will be active by the specified date. (required).</param>
        /// <param name="projectedBalance">Current balance plus projected active points, minus expiring points. (required).</param>
        public LoyaltyProjectionData(DateTime date = default(DateTime), decimal expiringPoints = default(decimal), decimal activatingPoints = default(decimal), decimal projectedBalance = default(decimal))
        {
            this.Date = date;
            this.ExpiringPoints = expiringPoints;
            this.ActivatingPoints = activatingPoints;
            this.ProjectedBalance = projectedBalance;
        }
        
        /// <summary>
        /// Specific date of projection.
        /// </summary>
        /// <value>Specific date of projection.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Points that will be expired by the specified date.
        /// </summary>
        /// <value>Points that will be expired by the specified date.</value>
        [DataMember(Name="expiringPoints", EmitDefaultValue=false)]
        public decimal ExpiringPoints { get; set; }

        /// <summary>
        /// Points that will be active by the specified date.
        /// </summary>
        /// <value>Points that will be active by the specified date.</value>
        [DataMember(Name="activatingPoints", EmitDefaultValue=false)]
        public decimal ActivatingPoints { get; set; }

        /// <summary>
        /// Current balance plus projected active points, minus expiring points.
        /// </summary>
        /// <value>Current balance plus projected active points, minus expiring points.</value>
        [DataMember(Name="projectedBalance", EmitDefaultValue=false)]
        public decimal ProjectedBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoyaltyProjectionData {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ExpiringPoints: ").Append(ExpiringPoints).Append("\n");
            sb.Append("  ActivatingPoints: ").Append(ActivatingPoints).Append("\n");
            sb.Append("  ProjectedBalance: ").Append(ProjectedBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoyaltyProjectionData);
        }

        /// <summary>
        /// Returns true if LoyaltyProjectionData instances are equal
        /// </summary>
        /// <param name="input">Instance of LoyaltyProjectionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyProjectionData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.ExpiringPoints == input.ExpiringPoints ||
                    this.ExpiringPoints.Equals(input.ExpiringPoints)
                ) && 
                (
                    this.ActivatingPoints == input.ActivatingPoints ||
                    this.ActivatingPoints.Equals(input.ActivatingPoints)
                ) && 
                (
                    this.ProjectedBalance == input.ProjectedBalance ||
                    this.ProjectedBalance.Equals(input.ProjectedBalance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                hashCode = hashCode * 59 + this.ExpiringPoints.GetHashCode();
                hashCode = hashCode * 59 + this.ActivatingPoints.GetHashCode();
                hashCode = hashCode * 59 + this.ProjectedBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
