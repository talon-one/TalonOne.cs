/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract]
    public partial class Account :  IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// State of the account (active, deactivated)
        /// </summary>
        /// <value>State of the account (active, deactivated)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Deactivated for value: deactivated
            /// </summary>
            [EnumMember(Value = "deactivated")]
            Deactivated = 2

        }

        /// <summary>
        /// State of the account (active, deactivated)
        /// </summary>
        /// <value>State of the account (active, deactivated)</value>
        [DataMember(Name="state", EmitDefaultValue=true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Account() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="id">Unique ID for this entity. (required).</param>
        /// <param name="created">The exact moment this entity was created. (required).</param>
        /// <param name="modified">The exact moment this entity was last modified. (required).</param>
        /// <param name="companyName">companyName (required).</param>
        /// <param name="domainName">Subdomain Name for yourcompany.talon.one (required).</param>
        /// <param name="state">State of the account (active, deactivated) (required).</param>
        /// <param name="billingEmail">The billing email address associated with your company account. (required).</param>
        /// <param name="planName">The name of your booked plan..</param>
        /// <param name="planExpires">The point in time at which your current plan expires..</param>
        /// <param name="applicationLimit">The maximum number of Applications covered by your plan..</param>
        /// <param name="userLimit">The maximum number of Campaign Manager Users covered by your plan..</param>
        /// <param name="campaignLimit">The maximum number of Campaigns covered by your plan..</param>
        /// <param name="apiLimit">The maximum number of Integration API calls covered by your plan per billing period..</param>
        /// <param name="applicationCount">The current number of Applications in your account. (required).</param>
        /// <param name="userCount">The current number of Campaign Manager Users in your account. (required).</param>
        /// <param name="campaignsActiveCount">The current number of active Campaigns in your account. (required).</param>
        /// <param name="campaignsInactiveCount">The current number of inactive Campaigns in your account. (required).</param>
        /// <param name="attributes">Arbitrary properties associated with this campaign.</param>
        public Account(int id = default(int), DateTime created = default(DateTime), DateTime modified = default(DateTime), string companyName = default(string), string domainName = default(string), StateEnum state = default(StateEnum), string billingEmail = default(string), string planName = default(string), DateTime planExpires = default(DateTime), int applicationLimit = default(int), int userLimit = default(int), int campaignLimit = default(int), int apiLimit = default(int), int applicationCount = default(int), int userCount = default(int), int campaignsActiveCount = default(int), int campaignsInactiveCount = default(int), Object attributes = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Account and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new InvalidDataException("created is a required property for Account and cannot be null");
            }
            else
            {
                this.Created = created;
            }
            
            // to ensure "modified" is required (not null)
            if (modified == null)
            {
                throw new InvalidDataException("modified is a required property for Account and cannot be null");
            }
            else
            {
                this.Modified = modified;
            }
            
            // to ensure "companyName" is required (not null)
            if (companyName == null)
            {
                throw new InvalidDataException("companyName is a required property for Account and cannot be null");
            }
            else
            {
                this.CompanyName = companyName;
            }
            
            // to ensure "domainName" is required (not null)
            if (domainName == null)
            {
                throw new InvalidDataException("domainName is a required property for Account and cannot be null");
            }
            else
            {
                this.DomainName = domainName;
            }
            
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for Account and cannot be null");
            }
            else
            {
                this.State = state;
            }
            
            // to ensure "billingEmail" is required (not null)
            if (billingEmail == null)
            {
                throw new InvalidDataException("billingEmail is a required property for Account and cannot be null");
            }
            else
            {
                this.BillingEmail = billingEmail;
            }
            
            // to ensure "applicationCount" is required (not null)
            if (applicationCount == null)
            {
                throw new InvalidDataException("applicationCount is a required property for Account and cannot be null");
            }
            else
            {
                this.ApplicationCount = applicationCount;
            }
            
            // to ensure "userCount" is required (not null)
            if (userCount == null)
            {
                throw new InvalidDataException("userCount is a required property for Account and cannot be null");
            }
            else
            {
                this.UserCount = userCount;
            }
            
            // to ensure "campaignsActiveCount" is required (not null)
            if (campaignsActiveCount == null)
            {
                throw new InvalidDataException("campaignsActiveCount is a required property for Account and cannot be null");
            }
            else
            {
                this.CampaignsActiveCount = campaignsActiveCount;
            }
            
            // to ensure "campaignsInactiveCount" is required (not null)
            if (campaignsInactiveCount == null)
            {
                throw new InvalidDataException("campaignsInactiveCount is a required property for Account and cannot be null");
            }
            else
            {
                this.CampaignsInactiveCount = campaignsInactiveCount;
            }
            
            this.PlanName = planName;
            this.PlanExpires = planExpires;
            this.ApplicationLimit = applicationLimit;
            this.UserLimit = userLimit;
            this.CampaignLimit = campaignLimit;
            this.ApiLimit = apiLimit;
            this.Attributes = attributes;
        }
        
        /// <summary>
        /// Unique ID for this entity.
        /// </summary>
        /// <value>Unique ID for this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// The exact moment this entity was created.
        /// </summary>
        /// <value>The exact moment this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=true)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The exact moment this entity was last modified.
        /// </summary>
        /// <value>The exact moment this entity was last modified.</value>
        [DataMember(Name="modified", EmitDefaultValue=true)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="companyName", EmitDefaultValue=true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Subdomain Name for yourcompany.talon.one
        /// </summary>
        /// <value>Subdomain Name for yourcompany.talon.one</value>
        [DataMember(Name="domainName", EmitDefaultValue=true)]
        public string DomainName { get; set; }


        /// <summary>
        /// The billing email address associated with your company account.
        /// </summary>
        /// <value>The billing email address associated with your company account.</value>
        [DataMember(Name="billingEmail", EmitDefaultValue=true)]
        public string BillingEmail { get; set; }

        /// <summary>
        /// The name of your booked plan.
        /// </summary>
        /// <value>The name of your booked plan.</value>
        [DataMember(Name="planName", EmitDefaultValue=false)]
        public string PlanName { get; set; }

        /// <summary>
        /// The point in time at which your current plan expires.
        /// </summary>
        /// <value>The point in time at which your current plan expires.</value>
        [DataMember(Name="planExpires", EmitDefaultValue=false)]
        public DateTime PlanExpires { get; set; }

        /// <summary>
        /// The maximum number of Applications covered by your plan.
        /// </summary>
        /// <value>The maximum number of Applications covered by your plan.</value>
        [DataMember(Name="applicationLimit", EmitDefaultValue=false)]
        public int ApplicationLimit { get; set; }

        /// <summary>
        /// The maximum number of Campaign Manager Users covered by your plan.
        /// </summary>
        /// <value>The maximum number of Campaign Manager Users covered by your plan.</value>
        [DataMember(Name="userLimit", EmitDefaultValue=false)]
        public int UserLimit { get; set; }

        /// <summary>
        /// The maximum number of Campaigns covered by your plan.
        /// </summary>
        /// <value>The maximum number of Campaigns covered by your plan.</value>
        [DataMember(Name="campaignLimit", EmitDefaultValue=false)]
        public int CampaignLimit { get; set; }

        /// <summary>
        /// The maximum number of Integration API calls covered by your plan per billing period.
        /// </summary>
        /// <value>The maximum number of Integration API calls covered by your plan per billing period.</value>
        [DataMember(Name="apiLimit", EmitDefaultValue=false)]
        public int ApiLimit { get; set; }

        /// <summary>
        /// The current number of Applications in your account.
        /// </summary>
        /// <value>The current number of Applications in your account.</value>
        [DataMember(Name="applicationCount", EmitDefaultValue=true)]
        public int ApplicationCount { get; set; }

        /// <summary>
        /// The current number of Campaign Manager Users in your account.
        /// </summary>
        /// <value>The current number of Campaign Manager Users in your account.</value>
        [DataMember(Name="userCount", EmitDefaultValue=true)]
        public int UserCount { get; set; }

        /// <summary>
        /// The current number of active Campaigns in your account.
        /// </summary>
        /// <value>The current number of active Campaigns in your account.</value>
        [DataMember(Name="campaignsActiveCount", EmitDefaultValue=true)]
        public int CampaignsActiveCount { get; set; }

        /// <summary>
        /// The current number of inactive Campaigns in your account.
        /// </summary>
        /// <value>The current number of inactive Campaigns in your account.</value>
        [DataMember(Name="campaignsInactiveCount", EmitDefaultValue=true)]
        public int CampaignsInactiveCount { get; set; }

        /// <summary>
        /// Arbitrary properties associated with this campaign
        /// </summary>
        /// <value>Arbitrary properties associated with this campaign</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  BillingEmail: ").Append(BillingEmail).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("  PlanExpires: ").Append(PlanExpires).Append("\n");
            sb.Append("  ApplicationLimit: ").Append(ApplicationLimit).Append("\n");
            sb.Append("  UserLimit: ").Append(UserLimit).Append("\n");
            sb.Append("  CampaignLimit: ").Append(CampaignLimit).Append("\n");
            sb.Append("  ApiLimit: ").Append(ApiLimit).Append("\n");
            sb.Append("  ApplicationCount: ").Append(ApplicationCount).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  CampaignsActiveCount: ").Append(CampaignsActiveCount).Append("\n");
            sb.Append("  CampaignsInactiveCount: ").Append(CampaignsInactiveCount).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.DomainName == input.DomainName ||
                    (this.DomainName != null &&
                    this.DomainName.Equals(input.DomainName))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.BillingEmail == input.BillingEmail ||
                    (this.BillingEmail != null &&
                    this.BillingEmail.Equals(input.BillingEmail))
                ) && 
                (
                    this.PlanName == input.PlanName ||
                    (this.PlanName != null &&
                    this.PlanName.Equals(input.PlanName))
                ) && 
                (
                    this.PlanExpires == input.PlanExpires ||
                    (this.PlanExpires != null &&
                    this.PlanExpires.Equals(input.PlanExpires))
                ) && 
                (
                    this.ApplicationLimit == input.ApplicationLimit ||
                    (this.ApplicationLimit != null &&
                    this.ApplicationLimit.Equals(input.ApplicationLimit))
                ) && 
                (
                    this.UserLimit == input.UserLimit ||
                    (this.UserLimit != null &&
                    this.UserLimit.Equals(input.UserLimit))
                ) && 
                (
                    this.CampaignLimit == input.CampaignLimit ||
                    (this.CampaignLimit != null &&
                    this.CampaignLimit.Equals(input.CampaignLimit))
                ) && 
                (
                    this.ApiLimit == input.ApiLimit ||
                    (this.ApiLimit != null &&
                    this.ApiLimit.Equals(input.ApiLimit))
                ) && 
                (
                    this.ApplicationCount == input.ApplicationCount ||
                    (this.ApplicationCount != null &&
                    this.ApplicationCount.Equals(input.ApplicationCount))
                ) && 
                (
                    this.UserCount == input.UserCount ||
                    (this.UserCount != null &&
                    this.UserCount.Equals(input.UserCount))
                ) && 
                (
                    this.CampaignsActiveCount == input.CampaignsActiveCount ||
                    (this.CampaignsActiveCount != null &&
                    this.CampaignsActiveCount.Equals(input.CampaignsActiveCount))
                ) && 
                (
                    this.CampaignsInactiveCount == input.CampaignsInactiveCount ||
                    (this.CampaignsInactiveCount != null &&
                    this.CampaignsInactiveCount.Equals(input.CampaignsInactiveCount))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.DomainName != null)
                    hashCode = hashCode * 59 + this.DomainName.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.BillingEmail != null)
                    hashCode = hashCode * 59 + this.BillingEmail.GetHashCode();
                if (this.PlanName != null)
                    hashCode = hashCode * 59 + this.PlanName.GetHashCode();
                if (this.PlanExpires != null)
                    hashCode = hashCode * 59 + this.PlanExpires.GetHashCode();
                if (this.ApplicationLimit != null)
                    hashCode = hashCode * 59 + this.ApplicationLimit.GetHashCode();
                if (this.UserLimit != null)
                    hashCode = hashCode * 59 + this.UserLimit.GetHashCode();
                if (this.CampaignLimit != null)
                    hashCode = hashCode * 59 + this.CampaignLimit.GetHashCode();
                if (this.ApiLimit != null)
                    hashCode = hashCode * 59 + this.ApiLimit.GetHashCode();
                if (this.ApplicationCount != null)
                    hashCode = hashCode * 59 + this.ApplicationCount.GetHashCode();
                if (this.UserCount != null)
                    hashCode = hashCode * 59 + this.UserCount.GetHashCode();
                if (this.CampaignsActiveCount != null)
                    hashCode = hashCode * 59 + this.CampaignsActiveCount.GetHashCode();
                if (this.CampaignsInactiveCount != null)
                    hashCode = hashCode * 59 + this.CampaignsInactiveCount.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // CompanyName (string) minLength
            if(this.CompanyName != null && this.CompanyName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be greater than 1.", new [] { "CompanyName" });
            }
            
            yield break;
        }
    }

}
