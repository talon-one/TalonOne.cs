/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// NewCampaignSet
    /// </summary>
    [DataContract]
    public partial class NewCampaignSet :  IEquatable<NewCampaignSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewCampaignSet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewCampaignSet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewCampaignSet" /> class.
        /// </summary>
        /// <param name="applicationId">The ID of the application that owns this entity. (required).</param>
        /// <param name="version">Version of the campaign set (required).</param>
        /// <param name="set">set (required).</param>
        public NewCampaignSet(int applicationId = default(int), int version = default(int), CampaignSetBranchNode set = default(CampaignSetBranchNode))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new InvalidDataException("applicationId is a required property for NewCampaignSet and cannot be null");
            }
            else
            {
                this.ApplicationId = applicationId;
            }
            
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for NewCampaignSet and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            
            // to ensure "set" is required (not null)
            if (set == null)
            {
                throw new InvalidDataException("set is a required property for NewCampaignSet and cannot be null");
            }
            else
            {
                this.Set = set;
            }
            
        }
        
        /// <summary>
        /// The ID of the application that owns this entity.
        /// </summary>
        /// <value>The ID of the application that owns this entity.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=true)]
        public int ApplicationId { get; set; }

        /// <summary>
        /// Version of the campaign set
        /// </summary>
        /// <value>Version of the campaign set</value>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public int Version { get; set; }

        /// <summary>
        /// Gets or Sets Set
        /// </summary>
        [DataMember(Name="set", EmitDefaultValue=true)]
        public CampaignSetBranchNode Set { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewCampaignSet {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Set: ").Append(Set).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewCampaignSet);
        }

        /// <summary>
        /// Returns true if NewCampaignSet instances are equal
        /// </summary>
        /// <param name="input">Instance of NewCampaignSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewCampaignSet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Set == input.Set ||
                    (this.Set != null &&
                    this.Set.Equals(input.Set))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Set != null)
                    hashCode = hashCode * 59 + this.Set.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // Version (int) minimum
            if(this.Version < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Version, must be a value greater than or equal to 1.", new [] { "Version" });
            }

            yield break;
        }
    }

}
