/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CustomerProfileIntegrationRequestV2
    /// </summary>
    [DataContract]
    public partial class CustomerProfileIntegrationRequestV2 :  IEquatable<CustomerProfileIntegrationRequestV2>, IValidatableObject
    {
        /// <summary>
        /// Defines ResponseContent
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResponseContentEnum
        {
            /// <summary>
            /// Enum CustomerProfile for value: customerProfile
            /// </summary>
            [EnumMember(Value = "customerProfile")]
            CustomerProfile = 1,

            /// <summary>
            /// Enum TriggeredCampaigns for value: triggeredCampaigns
            /// </summary>
            [EnumMember(Value = "triggeredCampaigns")]
            TriggeredCampaigns = 2,

            /// <summary>
            /// Enum Loyalty for value: loyalty
            /// </summary>
            [EnumMember(Value = "loyalty")]
            Loyalty = 3,

            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 4,

            /// <summary>
            /// Enum AwardedGiveaways for value: awardedGiveaways
            /// </summary>
            [EnumMember(Value = "awardedGiveaways")]
            AwardedGiveaways = 5,

            /// <summary>
            /// Enum RuleFailureReasons for value: ruleFailureReasons
            /// </summary>
            [EnumMember(Value = "ruleFailureReasons")]
            RuleFailureReasons = 6

        }


        /// <summary>
        /// Extends the response with the chosen data entities. Use this property to get as much data as you need in one _Update customer profile_ request instead of sending extra requests to other endpoints. 
        /// </summary>
        /// <value>Extends the response with the chosen data entities. Use this property to get as much data as you need in one _Update customer profile_ request instead of sending extra requests to other endpoints. </value>
        [DataMember(Name="responseContent", EmitDefaultValue=false)]
        public List<ResponseContentEnum> ResponseContent { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerProfileIntegrationRequestV2" /> class.
        /// </summary>
        /// <param name="attributes">Arbitrary properties associated with this item..</param>
        /// <param name="evaluableCampaignIds">When using the &#x60;dry&#x60; query parameter, use this property to list the campaign to be evaluated by the Rule Engine.  These campaigns will be evaluated, even if they are disabled, allowing you to test specific campaigns before activating them. .</param>
        /// <param name="audiencesChanges">audiencesChanges.</param>
        /// <param name="responseContent">Extends the response with the chosen data entities. Use this property to get as much data as you need in one _Update customer profile_ request instead of sending extra requests to other endpoints. .</param>
        public CustomerProfileIntegrationRequestV2(Object attributes = default(Object), List<int> evaluableCampaignIds = default(List<int>), ProfileAudiencesChanges audiencesChanges = default(ProfileAudiencesChanges), List<ResponseContentEnum> responseContent = default(List<ResponseContentEnum>))
        {
            this.Attributes = attributes;
            this.EvaluableCampaignIds = evaluableCampaignIds;
            this.AudiencesChanges = audiencesChanges;
            this.ResponseContent = responseContent;
        }
        
        /// <summary>
        /// Arbitrary properties associated with this item.
        /// </summary>
        /// <value>Arbitrary properties associated with this item.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }

        /// <summary>
        /// When using the &#x60;dry&#x60; query parameter, use this property to list the campaign to be evaluated by the Rule Engine.  These campaigns will be evaluated, even if they are disabled, allowing you to test specific campaigns before activating them. 
        /// </summary>
        /// <value>When using the &#x60;dry&#x60; query parameter, use this property to list the campaign to be evaluated by the Rule Engine.  These campaigns will be evaluated, even if they are disabled, allowing you to test specific campaigns before activating them. </value>
        [DataMember(Name="evaluableCampaignIds", EmitDefaultValue=false)]
        public List<int> EvaluableCampaignIds { get; set; }

        /// <summary>
        /// Gets or Sets AudiencesChanges
        /// </summary>
        [DataMember(Name="audiencesChanges", EmitDefaultValue=false)]
        public ProfileAudiencesChanges AudiencesChanges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerProfileIntegrationRequestV2 {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  EvaluableCampaignIds: ").Append(EvaluableCampaignIds).Append("\n");
            sb.Append("  AudiencesChanges: ").Append(AudiencesChanges).Append("\n");
            sb.Append("  ResponseContent: ").Append(ResponseContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerProfileIntegrationRequestV2);
        }

        /// <summary>
        /// Returns true if CustomerProfileIntegrationRequestV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerProfileIntegrationRequestV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerProfileIntegrationRequestV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.EvaluableCampaignIds == input.EvaluableCampaignIds ||
                    this.EvaluableCampaignIds != null &&
                    input.EvaluableCampaignIds != null &&
                    this.EvaluableCampaignIds.SequenceEqual(input.EvaluableCampaignIds)
                ) && 
                (
                    this.AudiencesChanges == input.AudiencesChanges ||
                    (this.AudiencesChanges != null &&
                    this.AudiencesChanges.Equals(input.AudiencesChanges))
                ) && 
                (
                    this.ResponseContent == input.ResponseContent ||
                    this.ResponseContent.SequenceEqual(input.ResponseContent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.EvaluableCampaignIds != null)
                    hashCode = hashCode * 59 + this.EvaluableCampaignIds.GetHashCode();
                if (this.AudiencesChanges != null)
                    hashCode = hashCode * 59 + this.AudiencesChanges.GetHashCode();
                hashCode = hashCode * 59 + this.ResponseContent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
