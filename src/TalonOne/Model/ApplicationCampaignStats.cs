/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Provides statistics regarding an application&#39;s campaigns
    /// </summary>
    [DataContract]
    public partial class ApplicationCampaignStats :  IEquatable<ApplicationCampaignStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationCampaignStats" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationCampaignStats() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationCampaignStats" /> class.
        /// </summary>
        /// <param name="draft">Number of draft campaigns (required).</param>
        /// <param name="disabled">Number of disabled campaigns (required).</param>
        /// <param name="scheduled">Number of scheduled campaigns (required).</param>
        /// <param name="running">Number of running campaigns (required).</param>
        /// <param name="expired">Number of expired campaigns (required).</param>
        /// <param name="archived">Number of archived campaigns (required).</param>
        public ApplicationCampaignStats(int draft = default(int), int disabled = default(int), int scheduled = default(int), int running = default(int), int expired = default(int), int archived = default(int))
        {
            // to ensure "draft" is required (not null)
            if (draft == null)
            {
                throw new InvalidDataException("draft is a required property for ApplicationCampaignStats and cannot be null");
            }
            else
            {
                this.Draft = draft;
            }
            
            // to ensure "disabled" is required (not null)
            if (disabled == null)
            {
                throw new InvalidDataException("disabled is a required property for ApplicationCampaignStats and cannot be null");
            }
            else
            {
                this.Disabled = disabled;
            }
            
            // to ensure "scheduled" is required (not null)
            if (scheduled == null)
            {
                throw new InvalidDataException("scheduled is a required property for ApplicationCampaignStats and cannot be null");
            }
            else
            {
                this.Scheduled = scheduled;
            }
            
            // to ensure "running" is required (not null)
            if (running == null)
            {
                throw new InvalidDataException("running is a required property for ApplicationCampaignStats and cannot be null");
            }
            else
            {
                this.Running = running;
            }
            
            // to ensure "expired" is required (not null)
            if (expired == null)
            {
                throw new InvalidDataException("expired is a required property for ApplicationCampaignStats and cannot be null");
            }
            else
            {
                this.Expired = expired;
            }
            
            // to ensure "archived" is required (not null)
            if (archived == null)
            {
                throw new InvalidDataException("archived is a required property for ApplicationCampaignStats and cannot be null");
            }
            else
            {
                this.Archived = archived;
            }
            
        }
        
        /// <summary>
        /// Number of draft campaigns
        /// </summary>
        /// <value>Number of draft campaigns</value>
        [DataMember(Name="draft", EmitDefaultValue=true)]
        public int Draft { get; set; }

        /// <summary>
        /// Number of disabled campaigns
        /// </summary>
        /// <value>Number of disabled campaigns</value>
        [DataMember(Name="disabled", EmitDefaultValue=true)]
        public int Disabled { get; set; }

        /// <summary>
        /// Number of scheduled campaigns
        /// </summary>
        /// <value>Number of scheduled campaigns</value>
        [DataMember(Name="scheduled", EmitDefaultValue=true)]
        public int Scheduled { get; set; }

        /// <summary>
        /// Number of running campaigns
        /// </summary>
        /// <value>Number of running campaigns</value>
        [DataMember(Name="running", EmitDefaultValue=true)]
        public int Running { get; set; }

        /// <summary>
        /// Number of expired campaigns
        /// </summary>
        /// <value>Number of expired campaigns</value>
        [DataMember(Name="expired", EmitDefaultValue=true)]
        public int Expired { get; set; }

        /// <summary>
        /// Number of archived campaigns
        /// </summary>
        /// <value>Number of archived campaigns</value>
        [DataMember(Name="archived", EmitDefaultValue=true)]
        public int Archived { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationCampaignStats {\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Scheduled: ").Append(Scheduled).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationCampaignStats);
        }

        /// <summary>
        /// Returns true if ApplicationCampaignStats instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationCampaignStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationCampaignStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Draft == input.Draft ||
                    (this.Draft != null &&
                    this.Draft.Equals(input.Draft))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    (this.Disabled != null &&
                    this.Disabled.Equals(input.Disabled))
                ) && 
                (
                    this.Scheduled == input.Scheduled ||
                    (this.Scheduled != null &&
                    this.Scheduled.Equals(input.Scheduled))
                ) && 
                (
                    this.Running == input.Running ||
                    (this.Running != null &&
                    this.Running.Equals(input.Running))
                ) && 
                (
                    this.Expired == input.Expired ||
                    (this.Expired != null &&
                    this.Expired.Equals(input.Expired))
                ) && 
                (
                    this.Archived == input.Archived ||
                    (this.Archived != null &&
                    this.Archived.Equals(input.Archived))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Draft != null)
                    hashCode = hashCode * 59 + this.Draft.GetHashCode();
                if (this.Disabled != null)
                    hashCode = hashCode * 59 + this.Disabled.GetHashCode();
                if (this.Scheduled != null)
                    hashCode = hashCode * 59 + this.Scheduled.GetHashCode();
                if (this.Running != null)
                    hashCode = hashCode * 59 + this.Running.GetHashCode();
                if (this.Expired != null)
                    hashCode = hashCode * 59 + this.Expired.GetHashCode();
                if (this.Archived != null)
                    hashCode = hashCode * 59 + this.Archived.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
