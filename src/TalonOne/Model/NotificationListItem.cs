/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// NotificationListItem
    /// </summary>
    [DataContract]
    public partial class NotificationListItem :  IEquatable<NotificationListItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationListItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotificationListItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationListItem" /> class.
        /// </summary>
        /// <param name="notificationId">The ID of the notification. (required).</param>
        /// <param name="notificationName">The name of the notification. (required).</param>
        /// <param name="entityId">The ID of the entity to which this notification belongs. For example, in case of a loyalty notification, this value is the ID of the loyalty program.  (required).</param>
        /// <param name="enabled">Indicates whether the notification is activated. (required).</param>
        public NotificationListItem(int notificationId = default(int), string notificationName = default(string), int entityId = default(int), bool enabled = default(bool))
        {
            this.NotificationId = notificationId;
            // to ensure "notificationName" is required (not null)
            this.NotificationName = notificationName ?? throw new ArgumentNullException("notificationName is a required property for NotificationListItem and cannot be null");
            this.EntityId = entityId;
            this.Enabled = enabled;
        }
        
        /// <summary>
        /// The ID of the notification.
        /// </summary>
        /// <value>The ID of the notification.</value>
        [DataMember(Name="notificationId", EmitDefaultValue=false)]
        public int NotificationId { get; set; }

        /// <summary>
        /// The name of the notification.
        /// </summary>
        /// <value>The name of the notification.</value>
        [DataMember(Name="notificationName", EmitDefaultValue=false)]
        public string NotificationName { get; set; }

        /// <summary>
        /// The ID of the entity to which this notification belongs. For example, in case of a loyalty notification, this value is the ID of the loyalty program. 
        /// </summary>
        /// <value>The ID of the entity to which this notification belongs. For example, in case of a loyalty notification, this value is the ID of the loyalty program. </value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public int EntityId { get; set; }

        /// <summary>
        /// Indicates whether the notification is activated.
        /// </summary>
        /// <value>Indicates whether the notification is activated.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationListItem {\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  NotificationName: ").Append(NotificationName).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationListItem);
        }

        /// <summary>
        /// Returns true if NotificationListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationListItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NotificationId == input.NotificationId ||
                    this.NotificationId.Equals(input.NotificationId)
                ) && 
                (
                    this.NotificationName == input.NotificationName ||
                    (this.NotificationName != null &&
                    this.NotificationName.Equals(input.NotificationName))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    this.EntityId.Equals(input.EntityId)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.NotificationId.GetHashCode();
                if (this.NotificationName != null)
                    hashCode = hashCode * 59 + this.NotificationName.GetHashCode();
                hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
