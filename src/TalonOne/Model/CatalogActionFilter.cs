/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The properties for a single filtering condition in a catalog sync action.
    /// </summary>
    [DataContract]
    public partial class CatalogActionFilter :  IEquatable<CatalogActionFilter>, IValidatableObject
    {
        /// <summary>
        /// The filtering operator.
        /// </summary>
        /// <value>The filtering operator.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OpEnum
        {
            /// <summary>
            /// Enum EQ for value: EQ
            /// </summary>
            [EnumMember(Value = "EQ")]
            EQ = 1,

            /// <summary>
            /// Enum LT for value: LT
            /// </summary>
            [EnumMember(Value = "LT")]
            LT = 2,

            /// <summary>
            /// Enum LE for value: LE
            /// </summary>
            [EnumMember(Value = "LE")]
            LE = 3,

            /// <summary>
            /// Enum GT for value: GT
            /// </summary>
            [EnumMember(Value = "GT")]
            GT = 4,

            /// <summary>
            /// Enum GE for value: GE
            /// </summary>
            [EnumMember(Value = "GE")]
            GE = 5,

            /// <summary>
            /// Enum IN for value: IN
            /// </summary>
            [EnumMember(Value = "IN")]
            IN = 6

        }

        /// <summary>
        /// The filtering operator.
        /// </summary>
        /// <value>The filtering operator.</value>
        [DataMember(Name="op", EmitDefaultValue=false)]
        public OpEnum Op { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogActionFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogActionFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogActionFilter" /> class.
        /// </summary>
        /// <param name="attr">The name of the attribute to filter on. (required).</param>
        /// <param name="op">The filtering operator. (required).</param>
        /// <param name="value">The value to filter for. (required).</param>
        public CatalogActionFilter(string attr = default(string), OpEnum op = default(OpEnum), Object value = default(Object))
        {
            // to ensure "attr" is required (not null)
            this.Attr = attr ?? throw new ArgumentNullException("attr is a required property for CatalogActionFilter and cannot be null");
            this.Op = op;
            // to ensure "value" is required (not null)
            this.Value = value ?? throw new ArgumentNullException("value is a required property for CatalogActionFilter and cannot be null");
        }
        
        /// <summary>
        /// The name of the attribute to filter on.
        /// </summary>
        /// <value>The name of the attribute to filter on.</value>
        [DataMember(Name="attr", EmitDefaultValue=false)]
        public string Attr { get; set; }

        /// <summary>
        /// The value to filter for.
        /// </summary>
        /// <value>The value to filter for.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogActionFilter {\n");
            sb.Append("  Attr: ").Append(Attr).Append("\n");
            sb.Append("  Op: ").Append(Op).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogActionFilter);
        }

        /// <summary>
        /// Returns true if CatalogActionFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogActionFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogActionFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attr == input.Attr ||
                    (this.Attr != null &&
                    this.Attr.Equals(input.Attr))
                ) && 
                (
                    this.Op == input.Op ||
                    this.Op.Equals(input.Op)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attr != null)
                    hashCode = hashCode * 59 + this.Attr.GetHashCode();
                hashCode = hashCode * 59 + this.Op.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
