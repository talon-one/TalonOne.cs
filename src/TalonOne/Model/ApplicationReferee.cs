/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// ApplicationReferee
    /// </summary>
    [DataContract]
    public partial class ApplicationReferee :  IEquatable<ApplicationReferee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationReferee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationReferee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationReferee" /> class.
        /// </summary>
        /// <param name="applicationId">The ID of the application that owns this entity. (required).</param>
        /// <param name="sessionId">Integration ID of the session in which the customer redeemed the referral. (required).</param>
        /// <param name="advocateIntegrationId">Integration ID of the Advocate&#39;s Profile. (required).</param>
        /// <param name="friendIntegrationId">Integration ID of the Friend&#39;s Profile. (required).</param>
        /// <param name="code">Advocate&#39;s referral code. (required).</param>
        /// <param name="created">Timestamp of the moment the customer redeemed the referral. (required).</param>
        public ApplicationReferee(int applicationId = default(int), string sessionId = default(string), string advocateIntegrationId = default(string), string friendIntegrationId = default(string), string code = default(string), DateTime created = default(DateTime))
        {
            this.ApplicationId = applicationId;
            // to ensure "sessionId" is required (not null)
            this.SessionId = sessionId ?? throw new ArgumentNullException("sessionId is a required property for ApplicationReferee and cannot be null");
            // to ensure "advocateIntegrationId" is required (not null)
            this.AdvocateIntegrationId = advocateIntegrationId ?? throw new ArgumentNullException("advocateIntegrationId is a required property for ApplicationReferee and cannot be null");
            // to ensure "friendIntegrationId" is required (not null)
            this.FriendIntegrationId = friendIntegrationId ?? throw new ArgumentNullException("friendIntegrationId is a required property for ApplicationReferee and cannot be null");
            // to ensure "code" is required (not null)
            this.Code = code ?? throw new ArgumentNullException("code is a required property for ApplicationReferee and cannot be null");
            this.Created = created;
        }
        
        /// <summary>
        /// The ID of the application that owns this entity.
        /// </summary>
        /// <value>The ID of the application that owns this entity.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int ApplicationId { get; set; }

        /// <summary>
        /// Integration ID of the session in which the customer redeemed the referral.
        /// </summary>
        /// <value>Integration ID of the session in which the customer redeemed the referral.</value>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Integration ID of the Advocate&#39;s Profile.
        /// </summary>
        /// <value>Integration ID of the Advocate&#39;s Profile.</value>
        [DataMember(Name="advocateIntegrationId", EmitDefaultValue=false)]
        public string AdvocateIntegrationId { get; set; }

        /// <summary>
        /// Integration ID of the Friend&#39;s Profile.
        /// </summary>
        /// <value>Integration ID of the Friend&#39;s Profile.</value>
        [DataMember(Name="friendIntegrationId", EmitDefaultValue=false)]
        public string FriendIntegrationId { get; set; }

        /// <summary>
        /// Advocate&#39;s referral code.
        /// </summary>
        /// <value>Advocate&#39;s referral code.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Timestamp of the moment the customer redeemed the referral.
        /// </summary>
        /// <value>Timestamp of the moment the customer redeemed the referral.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationReferee {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  AdvocateIntegrationId: ").Append(AdvocateIntegrationId).Append("\n");
            sb.Append("  FriendIntegrationId: ").Append(FriendIntegrationId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationReferee);
        }

        /// <summary>
        /// Returns true if ApplicationReferee instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationReferee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationReferee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    this.ApplicationId.Equals(input.ApplicationId)
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.AdvocateIntegrationId == input.AdvocateIntegrationId ||
                    (this.AdvocateIntegrationId != null &&
                    this.AdvocateIntegrationId.Equals(input.AdvocateIntegrationId))
                ) && 
                (
                    this.FriendIntegrationId == input.FriendIntegrationId ||
                    (this.FriendIntegrationId != null &&
                    this.FriendIntegrationId.Equals(input.FriendIntegrationId))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.AdvocateIntegrationId != null)
                    hashCode = hashCode * 59 + this.AdvocateIntegrationId.GetHashCode();
                if (this.FriendIntegrationId != null)
                    hashCode = hashCode * 59 + this.FriendIntegrationId.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AdvocateIntegrationId (string) maxLength
            if(this.AdvocateIntegrationId != null && this.AdvocateIntegrationId.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdvocateIntegrationId, length must be less than 1000.", new [] { "AdvocateIntegrationId" });
            }

            // FriendIntegrationId (string) maxLength
            if(this.FriendIntegrationId != null && this.FriendIntegrationId.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FriendIntegrationId, length must be less than 1000.", new [] { "FriendIntegrationId" });
            }

            yield break;
        }
    }

}
