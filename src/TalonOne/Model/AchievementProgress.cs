/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The current progress of the customer in the achievement.
    /// </summary>
    [DataContract]
    public partial class AchievementProgress :  IEquatable<AchievementProgress>, IValidatableObject
    {
        /// <summary>
        /// The status of the achievement.
        /// </summary>
        /// <value>The status of the achievement.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Inprogress for value: inprogress
            /// </summary>
            [EnumMember(Value = "inprogress")]
            Inprogress = 1,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 2,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 3,

            /// <summary>
            /// Enum Notstarted for value: not_started
            /// </summary>
            [EnumMember(Value = "not_started")]
            Notstarted = 4

        }

        /// <summary>
        /// The status of the achievement.
        /// </summary>
        /// <value>The status of the achievement.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AchievementProgress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AchievementProgress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AchievementProgress" /> class.
        /// </summary>
        /// <param name="status">The status of the achievement. (required).</param>
        /// <param name="progress">The current progress of the customer in the achievement. (required).</param>
        /// <param name="startDate">Timestamp at which the customer started the achievement..</param>
        /// <param name="completionDate">Timestamp at which point the customer completed the achievement..</param>
        /// <param name="endDate">Timestamp at which point the achievement ends and resets for the customer..</param>
        public AchievementProgress(StatusEnum status = default(StatusEnum), decimal progress = default(decimal), DateTime startDate = default(DateTime), DateTime completionDate = default(DateTime), DateTime endDate = default(DateTime))
        {
            this.Status = status;
            this.Progress = progress;
            this.StartDate = startDate;
            this.CompletionDate = completionDate;
            this.EndDate = endDate;
        }
        
        /// <summary>
        /// The current progress of the customer in the achievement.
        /// </summary>
        /// <value>The current progress of the customer in the achievement.</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public decimal Progress { get; set; }

        /// <summary>
        /// Timestamp at which the customer started the achievement.
        /// </summary>
        /// <value>Timestamp at which the customer started the achievement.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Timestamp at which point the customer completed the achievement.
        /// </summary>
        /// <value>Timestamp at which point the customer completed the achievement.</value>
        [DataMember(Name="completionDate", EmitDefaultValue=false)]
        public DateTime CompletionDate { get; set; }

        /// <summary>
        /// Timestamp at which point the achievement ends and resets for the customer.
        /// </summary>
        /// <value>Timestamp at which point the achievement ends and resets for the customer.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AchievementProgress {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  CompletionDate: ").Append(CompletionDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AchievementProgress);
        }

        /// <summary>
        /// Returns true if AchievementProgress instances are equal
        /// </summary>
        /// <param name="input">Instance of AchievementProgress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AchievementProgress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Progress == input.Progress ||
                    this.Progress.Equals(input.Progress)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.CompletionDate == input.CompletionDate ||
                    (this.CompletionDate != null &&
                    this.CompletionDate.Equals(input.CompletionDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.CompletionDate != null)
                    hashCode = hashCode * 59 + this.CompletionDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
