/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// AccountDashboardStatisticDiscount
    /// </summary>
    [DataContract]
    public partial class AccountDashboardStatisticDiscount :  IEquatable<AccountDashboardStatisticDiscount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDashboardStatisticDiscount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountDashboardStatisticDiscount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDashboardStatisticDiscount" /> class.
        /// </summary>
        /// <param name="total">Total discount value redeemed by users. (required).</param>
        /// <param name="average">Average discount percentage. (required).</param>
        /// <param name="datetime">Values aggregated for the specified date. (required).</param>
        public AccountDashboardStatisticDiscount(decimal total = default(decimal), decimal average = default(decimal), DateTime datetime = default(DateTime))
        {
            this.Total = total;
            this.Average = average;
            this.Datetime = datetime;
        }
        
        /// <summary>
        /// Total discount value redeemed by users.
        /// </summary>
        /// <value>Total discount value redeemed by users.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal Total { get; set; }

        /// <summary>
        /// Average discount percentage.
        /// </summary>
        /// <value>Average discount percentage.</value>
        [DataMember(Name="average", EmitDefaultValue=false)]
        public decimal Average { get; set; }

        /// <summary>
        /// Values aggregated for the specified date.
        /// </summary>
        /// <value>Values aggregated for the specified date.</value>
        [DataMember(Name="datetime", EmitDefaultValue=false)]
        public DateTime Datetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDashboardStatisticDiscount {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Average: ").Append(Average).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDashboardStatisticDiscount);
        }

        /// <summary>
        /// Returns true if AccountDashboardStatisticDiscount instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDashboardStatisticDiscount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDashboardStatisticDiscount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.Average == input.Average ||
                    this.Average.Equals(input.Average)
                ) && 
                (
                    this.Datetime == input.Datetime ||
                    (this.Datetime != null &&
                    this.Datetime.Equals(input.Datetime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                hashCode = hashCode * 59 + this.Average.GetHashCode();
                if (this.Datetime != null)
                    hashCode = hashCode * 59 + this.Datetime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
