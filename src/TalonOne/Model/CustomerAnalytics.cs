/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CustomerAnalytics
    /// </summary>
    [DataContract]
    public partial class CustomerAnalytics :  IEquatable<CustomerAnalytics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAnalytics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerAnalytics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAnalytics" /> class.
        /// </summary>
        /// <param name="acceptedCoupons">Total accepted coupons for this customer (required).</param>
        /// <param name="createdCoupons">Total created coupons for this customer (required).</param>
        /// <param name="freeItems">Total free items given to this customer (required).</param>
        /// <param name="totalOrders">Total orders made by this customer (required).</param>
        /// <param name="totalDiscountedOrders">Total orders made by this customer that had a discount (required).</param>
        /// <param name="totalRevenue">Total Revenue across all closed sessions (required).</param>
        /// <param name="totalDiscounts">The sum of discounts that were given across all closed sessions (required).</param>
        public CustomerAnalytics(int acceptedCoupons = default(int), int createdCoupons = default(int), int freeItems = default(int), int totalOrders = default(int), int totalDiscountedOrders = default(int), decimal totalRevenue = default(decimal), decimal totalDiscounts = default(decimal))
        {
            // to ensure "acceptedCoupons" is required (not null)
            if (acceptedCoupons == null)
            {
                throw new InvalidDataException("acceptedCoupons is a required property for CustomerAnalytics and cannot be null");
            }
            else
            {
                this.AcceptedCoupons = acceptedCoupons;
            }
            
            // to ensure "createdCoupons" is required (not null)
            if (createdCoupons == null)
            {
                throw new InvalidDataException("createdCoupons is a required property for CustomerAnalytics and cannot be null");
            }
            else
            {
                this.CreatedCoupons = createdCoupons;
            }
            
            // to ensure "freeItems" is required (not null)
            if (freeItems == null)
            {
                throw new InvalidDataException("freeItems is a required property for CustomerAnalytics and cannot be null");
            }
            else
            {
                this.FreeItems = freeItems;
            }
            
            // to ensure "totalOrders" is required (not null)
            if (totalOrders == null)
            {
                throw new InvalidDataException("totalOrders is a required property for CustomerAnalytics and cannot be null");
            }
            else
            {
                this.TotalOrders = totalOrders;
            }
            
            // to ensure "totalDiscountedOrders" is required (not null)
            if (totalDiscountedOrders == null)
            {
                throw new InvalidDataException("totalDiscountedOrders is a required property for CustomerAnalytics and cannot be null");
            }
            else
            {
                this.TotalDiscountedOrders = totalDiscountedOrders;
            }
            
            // to ensure "totalRevenue" is required (not null)
            if (totalRevenue == null)
            {
                throw new InvalidDataException("totalRevenue is a required property for CustomerAnalytics and cannot be null");
            }
            else
            {
                this.TotalRevenue = totalRevenue;
            }
            
            // to ensure "totalDiscounts" is required (not null)
            if (totalDiscounts == null)
            {
                throw new InvalidDataException("totalDiscounts is a required property for CustomerAnalytics and cannot be null");
            }
            else
            {
                this.TotalDiscounts = totalDiscounts;
            }
            
        }
        
        /// <summary>
        /// Total accepted coupons for this customer
        /// </summary>
        /// <value>Total accepted coupons for this customer</value>
        [DataMember(Name="acceptedCoupons", EmitDefaultValue=false)]
        public int AcceptedCoupons { get; set; }

        /// <summary>
        /// Total created coupons for this customer
        /// </summary>
        /// <value>Total created coupons for this customer</value>
        [DataMember(Name="createdCoupons", EmitDefaultValue=false)]
        public int CreatedCoupons { get; set; }

        /// <summary>
        /// Total free items given to this customer
        /// </summary>
        /// <value>Total free items given to this customer</value>
        [DataMember(Name="freeItems", EmitDefaultValue=false)]
        public int FreeItems { get; set; }

        /// <summary>
        /// Total orders made by this customer
        /// </summary>
        /// <value>Total orders made by this customer</value>
        [DataMember(Name="totalOrders", EmitDefaultValue=false)]
        public int TotalOrders { get; set; }

        /// <summary>
        /// Total orders made by this customer that had a discount
        /// </summary>
        /// <value>Total orders made by this customer that had a discount</value>
        [DataMember(Name="totalDiscountedOrders", EmitDefaultValue=false)]
        public int TotalDiscountedOrders { get; set; }

        /// <summary>
        /// Total Revenue across all closed sessions
        /// </summary>
        /// <value>Total Revenue across all closed sessions</value>
        [DataMember(Name="totalRevenue", EmitDefaultValue=false)]
        public decimal TotalRevenue { get; set; }

        /// <summary>
        /// The sum of discounts that were given across all closed sessions
        /// </summary>
        /// <value>The sum of discounts that were given across all closed sessions</value>
        [DataMember(Name="totalDiscounts", EmitDefaultValue=false)]
        public decimal TotalDiscounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerAnalytics {\n");
            sb.Append("  AcceptedCoupons: ").Append(AcceptedCoupons).Append("\n");
            sb.Append("  CreatedCoupons: ").Append(CreatedCoupons).Append("\n");
            sb.Append("  FreeItems: ").Append(FreeItems).Append("\n");
            sb.Append("  TotalOrders: ").Append(TotalOrders).Append("\n");
            sb.Append("  TotalDiscountedOrders: ").Append(TotalDiscountedOrders).Append("\n");
            sb.Append("  TotalRevenue: ").Append(TotalRevenue).Append("\n");
            sb.Append("  TotalDiscounts: ").Append(TotalDiscounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerAnalytics);
        }

        /// <summary>
        /// Returns true if CustomerAnalytics instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerAnalytics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerAnalytics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptedCoupons == input.AcceptedCoupons ||
                    (this.AcceptedCoupons != null &&
                    this.AcceptedCoupons.Equals(input.AcceptedCoupons))
                ) && 
                (
                    this.CreatedCoupons == input.CreatedCoupons ||
                    (this.CreatedCoupons != null &&
                    this.CreatedCoupons.Equals(input.CreatedCoupons))
                ) && 
                (
                    this.FreeItems == input.FreeItems ||
                    (this.FreeItems != null &&
                    this.FreeItems.Equals(input.FreeItems))
                ) && 
                (
                    this.TotalOrders == input.TotalOrders ||
                    (this.TotalOrders != null &&
                    this.TotalOrders.Equals(input.TotalOrders))
                ) && 
                (
                    this.TotalDiscountedOrders == input.TotalDiscountedOrders ||
                    (this.TotalDiscountedOrders != null &&
                    this.TotalDiscountedOrders.Equals(input.TotalDiscountedOrders))
                ) && 
                (
                    this.TotalRevenue == input.TotalRevenue ||
                    (this.TotalRevenue != null &&
                    this.TotalRevenue.Equals(input.TotalRevenue))
                ) && 
                (
                    this.TotalDiscounts == input.TotalDiscounts ||
                    (this.TotalDiscounts != null &&
                    this.TotalDiscounts.Equals(input.TotalDiscounts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptedCoupons != null)
                    hashCode = hashCode * 59 + this.AcceptedCoupons.GetHashCode();
                if (this.CreatedCoupons != null)
                    hashCode = hashCode * 59 + this.CreatedCoupons.GetHashCode();
                if (this.FreeItems != null)
                    hashCode = hashCode * 59 + this.FreeItems.GetHashCode();
                if (this.TotalOrders != null)
                    hashCode = hashCode * 59 + this.TotalOrders.GetHashCode();
                if (this.TotalDiscountedOrders != null)
                    hashCode = hashCode * 59 + this.TotalDiscountedOrders.GetHashCode();
                if (this.TotalRevenue != null)
                    hashCode = hashCode * 59 + this.TotalRevenue.GetHashCode();
                if (this.TotalDiscounts != null)
                    hashCode = hashCode * 59 + this.TotalDiscounts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
