/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CouponDeletionFilters
    /// </summary>
    [DataContract]
    public partial class CouponDeletionFilters :  IEquatable<CouponDeletionFilters>, IValidatableObject
    {
        /// <summary>
        /// - &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which the start date is set and in the future. 
        /// </summary>
        /// <value>- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which the start date is set and in the future. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValidEnum
        {
            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 1,

            /// <summary>
            /// Enum ValidNow for value: validNow
            /// </summary>
            [EnumMember(Value = "validNow")]
            ValidNow = 2,

            /// <summary>
            /// Enum ValidFuture for value: validFuture
            /// </summary>
            [EnumMember(Value = "validFuture")]
            ValidFuture = 3

        }

        /// <summary>
        /// - &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which the start date is set and in the future. 
        /// </summary>
        /// <value>- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which the start date is set and in the future. </value>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public ValidEnum? Valid { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponDeletionFilters" /> class.
        /// </summary>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally..</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally..</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally..</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally..</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which the start date is set and in the future. .</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter. .</param>
        /// <param name="redeemed">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned.  **Note:** This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter. .</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field. .</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (default to false).</param>
        /// <param name="value">Filter results by the coupon code.</param>
        /// <param name="batchId">Filter results by batches of coupons.</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code..</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally..</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally..</param>
        public CouponDeletionFilters(DateTime createdBefore = default(DateTime), DateTime createdAfter = default(DateTime), DateTime startsAfter = default(DateTime), DateTime startsBefore = default(DateTime), ValidEnum? valid = default(ValidEnum?), bool usable = default(bool), bool redeemed = default(bool), string recipientIntegrationId = default(string), bool exactMatch = false, string value = default(string), string batchId = default(string), int referralId = default(int), DateTime expiresAfter = default(DateTime), DateTime expiresBefore = default(DateTime))
        {
            this.CreatedBefore = createdBefore;
            this.CreatedAfter = createdAfter;
            this.StartsAfter = startsAfter;
            this.StartsBefore = startsBefore;
            this.Valid = valid;
            this.Usable = usable;
            this.Redeemed = redeemed;
            this.RecipientIntegrationId = recipientIntegrationId;
            this.ExactMatch = exactMatch;
            this.Value = value;
            this.BatchId = batchId;
            this.ReferralId = referralId;
            this.ExpiresAfter = expiresAfter;
            this.ExpiresBefore = expiresBefore;
        }
        
        /// <summary>
        /// Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
        /// </summary>
        /// <value>Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.</value>
        [DataMember(Name="createdBefore", EmitDefaultValue=false)]
        public DateTime CreatedBefore { get; set; }

        /// <summary>
        /// Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
        /// </summary>
        /// <value>Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.</value>
        [DataMember(Name="createdAfter", EmitDefaultValue=false)]
        public DateTime CreatedAfter { get; set; }

        /// <summary>
        /// Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
        /// </summary>
        /// <value>Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.</value>
        [DataMember(Name="startsAfter", EmitDefaultValue=false)]
        public DateTime StartsAfter { get; set; }

        /// <summary>
        /// Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
        /// </summary>
        /// <value>Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.</value>
        [DataMember(Name="startsBefore", EmitDefaultValue=false)]
        public DateTime StartsBefore { get; set; }

        /// <summary>
        /// - &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter. 
        /// </summary>
        /// <value>- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter. </value>
        [DataMember(Name="usable", EmitDefaultValue=false)]
        public bool Usable { get; set; }

        /// <summary>
        /// - &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned.  **Note:** This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter. 
        /// </summary>
        /// <value>- &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned.  **Note:** This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter. </value>
        [DataMember(Name="redeemed", EmitDefaultValue=false)]
        public bool Redeemed { get; set; }

        /// <summary>
        /// Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field. 
        /// </summary>
        /// <value>Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field. </value>
        [DataMember(Name="recipientIntegrationId", EmitDefaultValue=false)]
        public string RecipientIntegrationId { get; set; }

        /// <summary>
        /// Filter results to an exact case-insensitive matching against the coupon code
        /// </summary>
        /// <value>Filter results to an exact case-insensitive matching against the coupon code</value>
        [DataMember(Name="exactMatch", EmitDefaultValue=false)]
        public bool ExactMatch { get; set; }

        /// <summary>
        /// Filter results by the coupon code
        /// </summary>
        /// <value>Filter results by the coupon code</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Filter results by batches of coupons
        /// </summary>
        /// <value>Filter results by batches of coupons</value>
        [DataMember(Name="batchId", EmitDefaultValue=false)]
        public string BatchId { get; set; }

        /// <summary>
        /// Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
        /// </summary>
        /// <value>Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.</value>
        [DataMember(Name="referralId", EmitDefaultValue=false)]
        public int ReferralId { get; set; }

        /// <summary>
        /// Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
        /// </summary>
        /// <value>Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.</value>
        [DataMember(Name="expiresAfter", EmitDefaultValue=false)]
        public DateTime ExpiresAfter { get; set; }

        /// <summary>
        /// Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
        /// </summary>
        /// <value>Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.</value>
        [DataMember(Name="expiresBefore", EmitDefaultValue=false)]
        public DateTime ExpiresBefore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CouponDeletionFilters {\n");
            sb.Append("  CreatedBefore: ").Append(CreatedBefore).Append("\n");
            sb.Append("  CreatedAfter: ").Append(CreatedAfter).Append("\n");
            sb.Append("  StartsAfter: ").Append(StartsAfter).Append("\n");
            sb.Append("  StartsBefore: ").Append(StartsBefore).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Usable: ").Append(Usable).Append("\n");
            sb.Append("  Redeemed: ").Append(Redeemed).Append("\n");
            sb.Append("  RecipientIntegrationId: ").Append(RecipientIntegrationId).Append("\n");
            sb.Append("  ExactMatch: ").Append(ExactMatch).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  ReferralId: ").Append(ReferralId).Append("\n");
            sb.Append("  ExpiresAfter: ").Append(ExpiresAfter).Append("\n");
            sb.Append("  ExpiresBefore: ").Append(ExpiresBefore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CouponDeletionFilters);
        }

        /// <summary>
        /// Returns true if CouponDeletionFilters instances are equal
        /// </summary>
        /// <param name="input">Instance of CouponDeletionFilters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CouponDeletionFilters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedBefore == input.CreatedBefore ||
                    (this.CreatedBefore != null &&
                    this.CreatedBefore.Equals(input.CreatedBefore))
                ) && 
                (
                    this.CreatedAfter == input.CreatedAfter ||
                    (this.CreatedAfter != null &&
                    this.CreatedAfter.Equals(input.CreatedAfter))
                ) && 
                (
                    this.StartsAfter == input.StartsAfter ||
                    (this.StartsAfter != null &&
                    this.StartsAfter.Equals(input.StartsAfter))
                ) && 
                (
                    this.StartsBefore == input.StartsBefore ||
                    (this.StartsBefore != null &&
                    this.StartsBefore.Equals(input.StartsBefore))
                ) && 
                (
                    this.Valid == input.Valid ||
                    this.Valid.Equals(input.Valid)
                ) && 
                (
                    this.Usable == input.Usable ||
                    this.Usable.Equals(input.Usable)
                ) && 
                (
                    this.Redeemed == input.Redeemed ||
                    this.Redeemed.Equals(input.Redeemed)
                ) && 
                (
                    this.RecipientIntegrationId == input.RecipientIntegrationId ||
                    (this.RecipientIntegrationId != null &&
                    this.RecipientIntegrationId.Equals(input.RecipientIntegrationId))
                ) && 
                (
                    this.ExactMatch == input.ExactMatch ||
                    this.ExactMatch.Equals(input.ExactMatch)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.ReferralId == input.ReferralId ||
                    this.ReferralId.Equals(input.ReferralId)
                ) && 
                (
                    this.ExpiresAfter == input.ExpiresAfter ||
                    (this.ExpiresAfter != null &&
                    this.ExpiresAfter.Equals(input.ExpiresAfter))
                ) && 
                (
                    this.ExpiresBefore == input.ExpiresBefore ||
                    (this.ExpiresBefore != null &&
                    this.ExpiresBefore.Equals(input.ExpiresBefore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedBefore != null)
                    hashCode = hashCode * 59 + this.CreatedBefore.GetHashCode();
                if (this.CreatedAfter != null)
                    hashCode = hashCode * 59 + this.CreatedAfter.GetHashCode();
                if (this.StartsAfter != null)
                    hashCode = hashCode * 59 + this.StartsAfter.GetHashCode();
                if (this.StartsBefore != null)
                    hashCode = hashCode * 59 + this.StartsBefore.GetHashCode();
                hashCode = hashCode * 59 + this.Valid.GetHashCode();
                hashCode = hashCode * 59 + this.Usable.GetHashCode();
                hashCode = hashCode * 59 + this.Redeemed.GetHashCode();
                if (this.RecipientIntegrationId != null)
                    hashCode = hashCode * 59 + this.RecipientIntegrationId.GetHashCode();
                hashCode = hashCode * 59 + this.ExactMatch.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.BatchId != null)
                    hashCode = hashCode * 59 + this.BatchId.GetHashCode();
                hashCode = hashCode * 59 + this.ReferralId.GetHashCode();
                if (this.ExpiresAfter != null)
                    hashCode = hashCode * 59 + this.ExpiresAfter.GetHashCode();
                if (this.ExpiresBefore != null)
                    hashCode = hashCode * 59 + this.ExpiresBefore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
