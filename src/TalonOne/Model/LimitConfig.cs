/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TalonOne.Client.SwaggerDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// LimitConfig
    /// </summary>
    [DataContract]
    public partial class LimitConfig :  IEquatable<LimitConfig>, IValidatableObject
    {
        /// <summary>
        /// The limitable action to which this limit will be applied
        /// </summary>
        /// <value>The limitable action to which this limit will be applied</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum RedeemCoupon for value: redeemCoupon
            /// </summary>
            [EnumMember(Value = "redeemCoupon")]
            RedeemCoupon = 1,
            
            /// <summary>
            /// Enum RedeemReferral for value: redeemReferral
            /// </summary>
            [EnumMember(Value = "redeemReferral")]
            RedeemReferral = 2,
            
            /// <summary>
            /// Enum SetDiscount for value: setDiscount
            /// </summary>
            [EnumMember(Value = "setDiscount")]
            SetDiscount = 3,
            
            /// <summary>
            /// Enum CreateCoupon for value: createCoupon
            /// </summary>
            [EnumMember(Value = "createCoupon")]
            CreateCoupon = 4
        }

        /// <summary>
        /// The limitable action to which this limit will be applied
        /// </summary>
        /// <value>The limitable action to which this limit will be applied</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Defines Entities
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntitiesEnum
        {
            
            /// <summary>
            /// Enum Coupon for value: Coupon
            /// </summary>
            [EnumMember(Value = "Coupon")]
            Coupon = 1,
            
            /// <summary>
            /// Enum Referral for value: Referral
            /// </summary>
            [EnumMember(Value = "Referral")]
            Referral = 2,
            
            /// <summary>
            /// Enum Profile for value: Profile
            /// </summary>
            [EnumMember(Value = "Profile")]
            Profile = 3,
            
            /// <summary>
            /// Enum Identifier for value: Identifier
            /// </summary>
            [EnumMember(Value = "Identifier")]
            Identifier = 4
        }


        /// <summary>
        /// The entities that make the address of this limit
        /// </summary>
        /// <value>The entities that make the address of this limit</value>
        [DataMember(Name="entities", EmitDefaultValue=false)]
        public List<EntitiesEnum> Entities { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LimitConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LimitConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LimitConfig" /> class.
        /// </summary>
        /// <param name="action">The limitable action to which this limit will be applied (required).</param>
        /// <param name="limit">The value to set for the limit (required).</param>
        /// <param name="entities">The entities that make the address of this limit (required).</param>
        public LimitConfig(ActionEnum action = default(ActionEnum), decimal? limit = default(decimal?), List<EntitiesEnum> entities = default(List<EntitiesEnum>))
        {
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new InvalidDataException("action is a required property for LimitConfig and cannot be null");
            }
            else
            {
                this.Action = action;
            }
            // to ensure "limit" is required (not null)
            if (limit == null)
            {
                throw new InvalidDataException("limit is a required property for LimitConfig and cannot be null");
            }
            else
            {
                this.Limit = limit;
            }
            // to ensure "entities" is required (not null)
            if (entities == null)
            {
                throw new InvalidDataException("entities is a required property for LimitConfig and cannot be null");
            }
            else
            {
                this.Entities = entities;
            }
        }
        

        /// <summary>
        /// The value to set for the limit
        /// </summary>
        /// <value>The value to set for the limit</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public decimal? Limit { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LimitConfig {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LimitConfig);
        }

        /// <summary>
        /// Returns true if LimitConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of LimitConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LimitConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Entities != null)
                    hashCode = hashCode * 59 + this.Entities.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Limit (decimal?) minimum
            if(this.Limit < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value greater than or equal to 0.", new [] { "Limit" });
            }

            yield break;
        }
    }

}
