/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// PriceType
    /// </summary>
    [DataContract]
    public partial class PriceType :  IEquatable<PriceType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PriceType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceType" /> class.
        /// </summary>
        /// <param name="id">The internal ID of this entity. (required).</param>
        /// <param name="created">The time this entity was created. (required).</param>
        /// <param name="accountId">The ID of the account that owns this price type..</param>
        /// <param name="name">The API name of the price type. This is an immutable value. (required).</param>
        /// <param name="title">The title of the price type. (required).</param>
        /// <param name="description">The description of the price type..</param>
        /// <param name="modified">The date and time when the price type was last modified. (required).</param>
        /// <param name="subscribedCatalogsIds">A list of the IDs of the catalogs that are subscribed to this price type. (required).</param>
        /// <param name="targetedAudiencesIds">A list of the IDs of the audiences that are targeted by this price type. (required).</param>
        public PriceType(int id = default(int), DateTime created = default(DateTime), int accountId = default(int), string name = default(string), string title = default(string), string description = default(string), DateTime modified = default(DateTime), List<int> subscribedCatalogsIds = default(List<int>), List<int> targetedAudiencesIds = default(List<int>))
        {
            this.Id = id;
            this.Created = created;
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for PriceType and cannot be null");
            // to ensure "title" is required (not null)
            this.Title = title ?? throw new ArgumentNullException("title is a required property for PriceType and cannot be null");
            this.Modified = modified;
            // to ensure "subscribedCatalogsIds" is required (not null)
            this.SubscribedCatalogsIds = subscribedCatalogsIds ?? throw new ArgumentNullException("subscribedCatalogsIds is a required property for PriceType and cannot be null");
            // to ensure "targetedAudiencesIds" is required (not null)
            this.TargetedAudiencesIds = targetedAudiencesIds ?? throw new ArgumentNullException("targetedAudiencesIds is a required property for PriceType and cannot be null");
            this.AccountId = accountId;
            this.Description = description;
        }
        
        /// <summary>
        /// The internal ID of this entity.
        /// </summary>
        /// <value>The internal ID of this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The time this entity was created.
        /// </summary>
        /// <value>The time this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The ID of the account that owns this price type.
        /// </summary>
        /// <value>The ID of the account that owns this price type.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int AccountId { get; set; }

        /// <summary>
        /// The API name of the price type. This is an immutable value.
        /// </summary>
        /// <value>The API name of the price type. This is an immutable value.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The title of the price type.
        /// </summary>
        /// <value>The title of the price type.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The description of the price type.
        /// </summary>
        /// <value>The description of the price type.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The date and time when the price type was last modified.
        /// </summary>
        /// <value>The date and time when the price type was last modified.</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// A list of the IDs of the catalogs that are subscribed to this price type.
        /// </summary>
        /// <value>A list of the IDs of the catalogs that are subscribed to this price type.</value>
        [DataMember(Name="subscribedCatalogsIds", EmitDefaultValue=false)]
        public List<int> SubscribedCatalogsIds { get; set; }

        /// <summary>
        /// A list of the IDs of the audiences that are targeted by this price type.
        /// </summary>
        /// <value>A list of the IDs of the audiences that are targeted by this price type.</value>
        [DataMember(Name="targetedAudiencesIds", EmitDefaultValue=false)]
        public List<int> TargetedAudiencesIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  SubscribedCatalogsIds: ").Append(SubscribedCatalogsIds).Append("\n");
            sb.Append("  TargetedAudiencesIds: ").Append(TargetedAudiencesIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceType);
        }

        /// <summary>
        /// Returns true if PriceType instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId.Equals(input.AccountId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.SubscribedCatalogsIds == input.SubscribedCatalogsIds ||
                    this.SubscribedCatalogsIds != null &&
                    input.SubscribedCatalogsIds != null &&
                    this.SubscribedCatalogsIds.SequenceEqual(input.SubscribedCatalogsIds)
                ) && 
                (
                    this.TargetedAudiencesIds == input.TargetedAudiencesIds ||
                    this.TargetedAudiencesIds != null &&
                    input.TargetedAudiencesIds != null &&
                    this.TargetedAudiencesIds.SequenceEqual(input.TargetedAudiencesIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.SubscribedCatalogsIds != null)
                    hashCode = hashCode * 59 + this.SubscribedCatalogsIds.GetHashCode();
                if (this.TargetedAudiencesIds != null)
                    hashCode = hashCode * 59 + this.TargetedAudiencesIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) pattern
            Regex regexName = new Regex(@"^[A-Za-z]\\w*$", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }

            yield break;
        }
    }

}
