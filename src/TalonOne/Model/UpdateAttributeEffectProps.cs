/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The properties specific to the \&quot;updateAttribute\&quot; effect. This gets triggered whenever a validated rule contained an \&quot;update an attribute\&quot; effect.
    /// </summary>
    [DataContract]
    public partial class UpdateAttributeEffectProps :  IEquatable<UpdateAttributeEffectProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAttributeEffectProps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateAttributeEffectProps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAttributeEffectProps" /> class.
        /// </summary>
        /// <param name="path">The exact path of the attribute that was updated (required).</param>
        /// <param name="value">The new value of this attribute. Value can be any of the following types (time, string, number, location, boolean) or a list of any of those types (required).</param>
        public UpdateAttributeEffectProps(string path = default(string), Object value = default(Object))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for UpdateAttributeEffectProps and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for UpdateAttributeEffectProps and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            
        }
        
        /// <summary>
        /// The exact path of the attribute that was updated
        /// </summary>
        /// <value>The exact path of the attribute that was updated</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// The new value of this attribute. Value can be any of the following types (time, string, number, location, boolean) or a list of any of those types
        /// </summary>
        /// <value>The new value of this attribute. Value can be any of the following types (time, string, number, location, boolean) or a list of any of those types</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateAttributeEffectProps {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateAttributeEffectProps);
        }

        /// <summary>
        /// Returns true if UpdateAttributeEffectProps instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateAttributeEffectProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateAttributeEffectProps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
