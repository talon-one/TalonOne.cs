/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TalonOne.Client.SwaggerDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CartItemAdjustment
    /// </summary>
    [DataContract]
    public partial class CartItemAdjustment :  IEquatable<CartItemAdjustment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItemAdjustment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CartItemAdjustment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItemAdjustment" /> class.
        /// </summary>
        /// <param name="payFromLoyaltyProgram">Loyalty Program to be used for payment (required).</param>
        /// <param name="pointPayment">Amount of points to be spend (required).</param>
        /// <param name="remainingPrice">Remaining price in currency after payment in points has been made.</param>
        public CartItemAdjustment(int? payFromLoyaltyProgram = default(int?), int? pointPayment = default(int?), decimal? remainingPrice = default(decimal?))
        {
            // to ensure "payFromLoyaltyProgram" is required (not null)
            if (payFromLoyaltyProgram == null)
            {
                throw new InvalidDataException("payFromLoyaltyProgram is a required property for CartItemAdjustment and cannot be null");
            }
            else
            {
                this.PayFromLoyaltyProgram = payFromLoyaltyProgram;
            }
            // to ensure "pointPayment" is required (not null)
            if (pointPayment == null)
            {
                throw new InvalidDataException("pointPayment is a required property for CartItemAdjustment and cannot be null");
            }
            else
            {
                this.PointPayment = pointPayment;
            }
            this.RemainingPrice = remainingPrice;
        }
        
        /// <summary>
        /// Loyalty Program to be used for payment
        /// </summary>
        /// <value>Loyalty Program to be used for payment</value>
        [DataMember(Name="payFromLoyaltyProgram", EmitDefaultValue=false)]
        public int? PayFromLoyaltyProgram { get; set; }

        /// <summary>
        /// Amount of points to be spend
        /// </summary>
        /// <value>Amount of points to be spend</value>
        [DataMember(Name="pointPayment", EmitDefaultValue=false)]
        public int? PointPayment { get; set; }

        /// <summary>
        /// Remaining price in currency after payment in points has been made
        /// </summary>
        /// <value>Remaining price in currency after payment in points has been made</value>
        [DataMember(Name="remainingPrice", EmitDefaultValue=false)]
        public decimal? RemainingPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartItemAdjustment {\n");
            sb.Append("  PayFromLoyaltyProgram: ").Append(PayFromLoyaltyProgram).Append("\n");
            sb.Append("  PointPayment: ").Append(PointPayment).Append("\n");
            sb.Append("  RemainingPrice: ").Append(RemainingPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartItemAdjustment);
        }

        /// <summary>
        /// Returns true if CartItemAdjustment instances are equal
        /// </summary>
        /// <param name="input">Instance of CartItemAdjustment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartItemAdjustment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayFromLoyaltyProgram == input.PayFromLoyaltyProgram ||
                    (this.PayFromLoyaltyProgram != null &&
                    this.PayFromLoyaltyProgram.Equals(input.PayFromLoyaltyProgram))
                ) && 
                (
                    this.PointPayment == input.PointPayment ||
                    (this.PointPayment != null &&
                    this.PointPayment.Equals(input.PointPayment))
                ) && 
                (
                    this.RemainingPrice == input.RemainingPrice ||
                    (this.RemainingPrice != null &&
                    this.RemainingPrice.Equals(input.RemainingPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayFromLoyaltyProgram != null)
                    hashCode = hashCode * 59 + this.PayFromLoyaltyProgram.GetHashCode();
                if (this.PointPayment != null)
                    hashCode = hashCode * 59 + this.PointPayment.GetHashCode();
                if (this.RemainingPrice != null)
                    hashCode = hashCode * 59 + this.RemainingPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PointPayment (int?) minimum
            if(this.PointPayment < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointPayment, must be a value greater than or equal to 1.", new [] { "PointPayment" });
            }

            // RemainingPrice (decimal?) minimum
            if(this.RemainingPrice < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RemainingPrice, must be a value greater than or equal to 0.", new [] { "RemainingPrice" });
            }

            yield break;
        }
    }

}
