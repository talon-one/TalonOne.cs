/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// ListCampaignStoreBudgets
    /// </summary>
    [DataContract]
    public partial class ListCampaignStoreBudgets :  IEquatable<ListCampaignStoreBudgets>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListCampaignStoreBudgets" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListCampaignStoreBudgets() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListCampaignStoreBudgets" /> class.
        /// </summary>
        /// <param name="store">store (required).</param>
        /// <param name="limit">limit (required).</param>
        /// <param name="action">action (required).</param>
        /// <param name="period">period.</param>
        public ListCampaignStoreBudgets(ListCampaignStoreBudgetsStore store = default(ListCampaignStoreBudgetsStore), int limit = default(int), string action = default(string), string period = default(string))
        {
            // to ensure "store" is required (not null)
            this.Store = store ?? throw new ArgumentNullException("store is a required property for ListCampaignStoreBudgets and cannot be null");
            this.Limit = limit;
            // to ensure "action" is required (not null)
            this.Action = action ?? throw new ArgumentNullException("action is a required property for ListCampaignStoreBudgets and cannot be null");
            this.Period = period;
        }
        
        /// <summary>
        /// Gets or Sets Store
        /// </summary>
        [DataMember(Name="store", EmitDefaultValue=false)]
        public ListCampaignStoreBudgetsStore Store { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public string Period { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListCampaignStoreBudgets {\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListCampaignStoreBudgets);
        }

        /// <summary>
        /// Returns true if ListCampaignStoreBudgets instances are equal
        /// </summary>
        /// <param name="input">Instance of ListCampaignStoreBudgets to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListCampaignStoreBudgets input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Store == input.Store ||
                    (this.Store != null &&
                    this.Store.Equals(input.Store))
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Store != null)
                    hashCode = hashCode * 59 + this.Store.GetHashCode();
                hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
