/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TalonOne.Client;
using TalonOne.Model;

namespace TalonOne.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create coupon reservation
        /// </summary>
        /// <remarks>
        /// Create a coupon reservation for all passed customer profiles on this couponID. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>Coupon</returns>
        Coupon CreateCouponReservation (string couponValue, CouponReservations body);

        /// <summary>
        /// Create coupon reservation
        /// </summary>
        /// <remarks>
        /// Create a coupon reservation for all passed customer profiles on this couponID. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Coupon</returns>
        ApiResponse<Coupon> CreateCouponReservationWithHttpInfo (string couponValue, CouponReservations body);
        /// <summary>
        /// Create referral code for an advocate
        /// </summary>
        /// <remarks>
        /// Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the &#x60;campaignId&#x60; parameter, and will be associated with the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Referral</returns>
        Referral CreateReferral (NewReferral body);

        /// <summary>
        /// Create referral code for an advocate
        /// </summary>
        /// <remarks>
        /// Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the &#x60;campaignId&#x60; parameter, and will be associated with the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Referral</returns>
        ApiResponse<Referral> CreateReferralWithHttpInfo (NewReferral body);
        /// <summary>
        /// Create referral codes for multiple advocates
        /// </summary>
        /// <remarks>
        /// Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the &#x60;campaignId&#x60; parameter, and one referral code will be associated with one advocate using the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 CreateReferralsForMultipleAdvocates (NewReferralsForMultipleAdvocates body, string silent = default(string));

        /// <summary>
        /// Create referral codes for multiple advocates
        /// </summary>
        /// <remarks>
        /// Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the &#x60;campaignId&#x60; parameter, and one referral code will be associated with one advocate using the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> CreateReferralsForMultipleAdvocatesWithHttpInfo (NewReferralsForMultipleAdvocates body, string silent = default(string));
        /// <summary>
        /// Delete coupon reservations
        /// </summary>
        /// <remarks>
        /// Remove all passed customer profiles reservation from this coupon. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns></returns>
        void DeleteCouponReservation (string couponValue, CouponReservations body);

        /// <summary>
        /// Delete coupon reservations
        /// </summary>
        /// <remarks>
        /// Remove all passed customer profiles reservation from this coupon. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponReservationWithHttpInfo (string couponValue, CouponReservations body);
        /// <summary>
        /// Delete the personal data of a customer
        /// </summary>
        /// <remarks>
        /// Delete all attributes on the customer profile and on entities that reference that customer profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns></returns>
        void DeleteCustomerData (string integrationId);

        /// <summary>
        /// Delete the personal data of a customer
        /// </summary>
        /// <remarks>
        /// Delete all attributes on the customer profile and on entities that reference that customer profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomerDataWithHttpInfo (string integrationId);
        /// <summary>
        /// List all data associated with a specific customer profile
        /// </summary>
        /// <remarks>
        /// Get information regarding entities referencing this customer profile&#39;s integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="profile">optional flag to decide if you would like customer profile information in the response (optional)</param>
        /// <param name="referrals">optional flag to decide if you would like referral information in the response (optional)</param>
        /// <param name="coupons">optional flag to decide if you would like coupon information in the response (optional)</param>
        /// <param name="loyalty">optional flag to decide if you would like loyalty information in the response (optional)</param>
        /// <param name="giveaways">optional flag to decide if you would like giveaways information in the response (optional)</param>
        /// <returns>CustomerInventory</returns>
        CustomerInventory GetCustomerInventory (string integrationId, bool? profile = default(bool?), bool? referrals = default(bool?), bool? coupons = default(bool?), bool? loyalty = default(bool?), bool? giveaways = default(bool?));

        /// <summary>
        /// List all data associated with a specific customer profile
        /// </summary>
        /// <remarks>
        /// Get information regarding entities referencing this customer profile&#39;s integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="profile">optional flag to decide if you would like customer profile information in the response (optional)</param>
        /// <param name="referrals">optional flag to decide if you would like referral information in the response (optional)</param>
        /// <param name="coupons">optional flag to decide if you would like coupon information in the response (optional)</param>
        /// <param name="loyalty">optional flag to decide if you would like loyalty information in the response (optional)</param>
        /// <param name="giveaways">optional flag to decide if you would like giveaways information in the response (optional)</param>
        /// <returns>ApiResponse of CustomerInventory</returns>
        ApiResponse<CustomerInventory> GetCustomerInventoryWithHttpInfo (string integrationId, bool? profile = default(bool?), bool? referrals = default(bool?), bool? coupons = default(bool?), bool? loyalty = default(bool?), bool? giveaways = default(bool?));
        /// <summary>
        /// List users that have this coupon reserved
        /// </summary>
        /// <remarks>
        /// Return all users that have this coupon marked as reserved. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetReservedCustomers (string couponValue);

        /// <summary>
        /// List users that have this coupon reserved
        /// </summary>
        /// <remarks>
        /// Return all users that have this coupon marked as reserved. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetReservedCustomersWithHttpInfo (string couponValue);
        /// <summary>
        /// Track an Event
        /// </summary>
        /// <remarks>
        /// Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The &#x60;sessionId&#x60; body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same &#x60;profileId&#x60; or an error will be returned.  As with customer sessions, you can use an empty string for &#x60;profileId&#x60; to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>IntegrationState</returns>
        IntegrationState TrackEvent (NewEvent body, bool? dry = default(bool?));

        /// <summary>
        /// Track an Event
        /// </summary>
        /// <remarks>
        /// Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The &#x60;sessionId&#x60; body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same &#x60;profileId&#x60; or an error will be returned.  As with customer sessions, you can use an empty string for &#x60;profileId&#x60; to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>ApiResponse of IntegrationState</returns>
        ApiResponse<IntegrationState> TrackEventWithHttpInfo (NewEvent body, bool? dry = default(bool?));
        /// <summary>
        /// Update customer profile V1
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/getting-started/apiv2).  Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile). This profile information can then be matched and/or updated by campaign [Rules][].  The &#x60;integrationId&#x60; may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the &#x60;integrationId&#x60;. It is vital that this ID **not** change over time, so **don&#39;t** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>IntegrationState</returns>
        IntegrationState UpdateCustomerProfile (string integrationId, NewCustomerProfile body, bool? dry = default(bool?));

        /// <summary>
        /// Update customer profile V1
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/getting-started/apiv2).  Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile). This profile information can then be matched and/or updated by campaign [Rules][].  The &#x60;integrationId&#x60; may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the &#x60;integrationId&#x60;. It is vital that this ID **not** change over time, so **don&#39;t** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>ApiResponse of IntegrationState</returns>
        ApiResponse<IntegrationState> UpdateCustomerProfileWithHttpInfo (string integrationId, NewCustomerProfile body, bool? dry = default(bool?));
        /// <summary>
        /// Update customer profile
        /// </summary>
        /// <remarks>
        /// Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile).  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  **Performance tips**  Updating a customer profile returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile. Must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="runRuleEngine">Indicates whether to run the rule engine. Setting this property to &#x60;false&#x60; improves response times. (optional, default to false)</param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;.  (optional)</param>
        /// <returns>IntegrationStateV2</returns>
        IntegrationStateV2 UpdateCustomerProfileV2 (string integrationId, CustomerProfileIntegrationRequestV2 body, bool? runRuleEngine = default(bool?), bool? dry = default(bool?));

        /// <summary>
        /// Update customer profile
        /// </summary>
        /// <remarks>
        /// Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile).  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  **Performance tips**  Updating a customer profile returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile. Must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="runRuleEngine">Indicates whether to run the rule engine. Setting this property to &#x60;false&#x60; improves response times. (optional, default to false)</param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;.  (optional)</param>
        /// <returns>ApiResponse of IntegrationStateV2</returns>
        ApiResponse<IntegrationStateV2> UpdateCustomerProfileV2WithHttpInfo (string integrationId, CustomerProfileIntegrationRequestV2 body, bool? runRuleEngine = default(bool?), bool? dry = default(bool?));
        /// <summary>
        /// Update multiple customer profiles
        /// </summary>
        /// <remarks>
        /// Update (or create) up to 1000 [customer profiles](/docs/dev/concepts/entities#customer-profile) in 1 request.  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  A customer profile [can be linked to one or more sessions](/integration-api/#tag/Customer-sessions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>MultipleCustomerProfileIntegrationResponseV2</returns>
        MultipleCustomerProfileIntegrationResponseV2 UpdateCustomerProfilesV2 (MultipleCustomerProfileIntegrationRequest body, string silent = default(string));

        /// <summary>
        /// Update multiple customer profiles
        /// </summary>
        /// <remarks>
        /// Update (or create) up to 1000 [customer profiles](/docs/dev/concepts/entities#customer-profile) in 1 request.  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  A customer profile [can be linked to one or more sessions](/integration-api/#tag/Customer-sessions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of MultipleCustomerProfileIntegrationResponseV2</returns>
        ApiResponse<MultipleCustomerProfileIntegrationResponseV2> UpdateCustomerProfilesV2WithHttpInfo (MultipleCustomerProfileIntegrationRequest body, string silent = default(string));
        /// <summary>
        /// Update customer session V1
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/docs/dev/getting-started/apiv2#migrating-to-v2).  Update (or create) a [Customer Session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to represent which items are in the customer&#39;s cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer profile returns a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>IntegrationState</returns>
        IntegrationState UpdateCustomerSession (string customerSessionId, NewCustomerSession body, bool? dry = default(bool?));

        /// <summary>
        /// Update customer session V1
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/docs/dev/getting-started/apiv2#migrating-to-v2).  Update (or create) a [Customer Session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to represent which items are in the customer&#39;s cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer profile returns a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>ApiResponse of IntegrationState</returns>
        ApiResponse<IntegrationState> UpdateCustomerSessionWithHttpInfo (string customerSessionId, NewCustomerSession body, bool? dry = default(bool?));
        /// <summary>
        /// Update customer session
        /// </summary>
        /// <remarks>
        /// Update (or create) a [customer session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to share the content of a customer&#39;s cart with Talon.One and to check which promotion rules apply.  **Note:** The currency for the session and the cart items in the session is the same as the Application that owns this session.  **Session management**  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same Application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  **Sessions and customer profiles**  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  **Performance tips**  Updating a customer session returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response also includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects.  See more information and tips about session management in [Entities](/docs/dev/concepts/entities#customer-session). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>IntegrationStateV2</returns>
        IntegrationStateV2 UpdateCustomerSessionV2 (string customerSessionId, IntegrationRequest body, bool? dry = default(bool?));

        /// <summary>
        /// Update customer session
        /// </summary>
        /// <remarks>
        /// Update (or create) a [customer session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to share the content of a customer&#39;s cart with Talon.One and to check which promotion rules apply.  **Note:** The currency for the session and the cart items in the session is the same as the Application that owns this session.  **Session management**  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same Application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  **Sessions and customer profiles**  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  **Performance tips**  Updating a customer session returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response also includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects.  See more information and tips about session management in [Entities](/docs/dev/concepts/entities#customer-session). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>ApiResponse of IntegrationStateV2</returns>
        ApiResponse<IntegrationStateV2> UpdateCustomerSessionV2WithHttpInfo (string customerSessionId, IntegrationRequest body, bool? dry = default(bool?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create coupon reservation
        /// </summary>
        /// <remarks>
        /// Create a coupon reservation for all passed customer profiles on this couponID. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>Task of Coupon</returns>
        System.Threading.Tasks.Task<Coupon> CreateCouponReservationAsync (string couponValue, CouponReservations body);

        /// <summary>
        /// Create coupon reservation
        /// </summary>
        /// <remarks>
        /// Create a coupon reservation for all passed customer profiles on this couponID. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<Coupon>> CreateCouponReservationAsyncWithHttpInfo (string couponValue, CouponReservations body);
        /// <summary>
        /// Create referral code for an advocate
        /// </summary>
        /// <remarks>
        /// Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the &#x60;campaignId&#x60; parameter, and will be associated with the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Referral</returns>
        System.Threading.Tasks.Task<Referral> CreateReferralAsync (NewReferral body);

        /// <summary>
        /// Create referral code for an advocate
        /// </summary>
        /// <remarks>
        /// Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the &#x60;campaignId&#x60; parameter, and will be associated with the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        System.Threading.Tasks.Task<ApiResponse<Referral>> CreateReferralAsyncWithHttpInfo (NewReferral body);
        /// <summary>
        /// Create referral codes for multiple advocates
        /// </summary>
        /// <remarks>
        /// Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the &#x60;campaignId&#x60; parameter, and one referral code will be associated with one advocate using the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> CreateReferralsForMultipleAdvocatesAsync (NewReferralsForMultipleAdvocates body, string silent = default(string));

        /// <summary>
        /// Create referral codes for multiple advocates
        /// </summary>
        /// <remarks>
        /// Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the &#x60;campaignId&#x60; parameter, and one referral code will be associated with one advocate using the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateReferralsForMultipleAdvocatesAsyncWithHttpInfo (NewReferralsForMultipleAdvocates body, string silent = default(string));
        /// <summary>
        /// Delete coupon reservations
        /// </summary>
        /// <remarks>
        /// Remove all passed customer profiles reservation from this coupon. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponReservationAsync (string couponValue, CouponReservations body);

        /// <summary>
        /// Delete coupon reservations
        /// </summary>
        /// <remarks>
        /// Remove all passed customer profiles reservation from this coupon. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponReservationAsyncWithHttpInfo (string couponValue, CouponReservations body);
        /// <summary>
        /// Delete the personal data of a customer
        /// </summary>
        /// <remarks>
        /// Delete all attributes on the customer profile and on entities that reference that customer profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomerDataAsync (string integrationId);

        /// <summary>
        /// Delete the personal data of a customer
        /// </summary>
        /// <remarks>
        /// Delete all attributes on the customer profile and on entities that reference that customer profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerDataAsyncWithHttpInfo (string integrationId);
        /// <summary>
        /// List all data associated with a specific customer profile
        /// </summary>
        /// <remarks>
        /// Get information regarding entities referencing this customer profile&#39;s integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="profile">optional flag to decide if you would like customer profile information in the response (optional)</param>
        /// <param name="referrals">optional flag to decide if you would like referral information in the response (optional)</param>
        /// <param name="coupons">optional flag to decide if you would like coupon information in the response (optional)</param>
        /// <param name="loyalty">optional flag to decide if you would like loyalty information in the response (optional)</param>
        /// <param name="giveaways">optional flag to decide if you would like giveaways information in the response (optional)</param>
        /// <returns>Task of CustomerInventory</returns>
        System.Threading.Tasks.Task<CustomerInventory> GetCustomerInventoryAsync (string integrationId, bool? profile = default(bool?), bool? referrals = default(bool?), bool? coupons = default(bool?), bool? loyalty = default(bool?), bool? giveaways = default(bool?));

        /// <summary>
        /// List all data associated with a specific customer profile
        /// </summary>
        /// <remarks>
        /// Get information regarding entities referencing this customer profile&#39;s integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="profile">optional flag to decide if you would like customer profile information in the response (optional)</param>
        /// <param name="referrals">optional flag to decide if you would like referral information in the response (optional)</param>
        /// <param name="coupons">optional flag to decide if you would like coupon information in the response (optional)</param>
        /// <param name="loyalty">optional flag to decide if you would like loyalty information in the response (optional)</param>
        /// <param name="giveaways">optional flag to decide if you would like giveaways information in the response (optional)</param>
        /// <returns>Task of ApiResponse (CustomerInventory)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerInventory>> GetCustomerInventoryAsyncWithHttpInfo (string integrationId, bool? profile = default(bool?), bool? referrals = default(bool?), bool? coupons = default(bool?), bool? loyalty = default(bool?), bool? giveaways = default(bool?));
        /// <summary>
        /// List users that have this coupon reserved
        /// </summary>
        /// <remarks>
        /// Return all users that have this coupon marked as reserved. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetReservedCustomersAsync (string couponValue);

        /// <summary>
        /// List users that have this coupon reserved
        /// </summary>
        /// <remarks>
        /// Return all users that have this coupon marked as reserved. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetReservedCustomersAsyncWithHttpInfo (string couponValue);
        /// <summary>
        /// Track an Event
        /// </summary>
        /// <remarks>
        /// Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The &#x60;sessionId&#x60; body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same &#x60;profileId&#x60; or an error will be returned.  As with customer sessions, you can use an empty string for &#x60;profileId&#x60; to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of IntegrationState</returns>
        System.Threading.Tasks.Task<IntegrationState> TrackEventAsync (NewEvent body, bool? dry = default(bool?));

        /// <summary>
        /// Track an Event
        /// </summary>
        /// <remarks>
        /// Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The &#x60;sessionId&#x60; body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same &#x60;profileId&#x60; or an error will be returned.  As with customer sessions, you can use an empty string for &#x60;profileId&#x60; to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationState)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegrationState>> TrackEventAsyncWithHttpInfo (NewEvent body, bool? dry = default(bool?));
        /// <summary>
        /// Update customer profile V1
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/getting-started/apiv2).  Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile). This profile information can then be matched and/or updated by campaign [Rules][].  The &#x60;integrationId&#x60; may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the &#x60;integrationId&#x60;. It is vital that this ID **not** change over time, so **don&#39;t** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of IntegrationState</returns>
        System.Threading.Tasks.Task<IntegrationState> UpdateCustomerProfileAsync (string integrationId, NewCustomerProfile body, bool? dry = default(bool?));

        /// <summary>
        /// Update customer profile V1
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/getting-started/apiv2).  Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile). This profile information can then be matched and/or updated by campaign [Rules][].  The &#x60;integrationId&#x60; may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the &#x60;integrationId&#x60;. It is vital that this ID **not** change over time, so **don&#39;t** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationState)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegrationState>> UpdateCustomerProfileAsyncWithHttpInfo (string integrationId, NewCustomerProfile body, bool? dry = default(bool?));
        /// <summary>
        /// Update customer profile
        /// </summary>
        /// <remarks>
        /// Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile).  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  **Performance tips**  Updating a customer profile returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile. Must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="runRuleEngine">Indicates whether to run the rule engine. Setting this property to &#x60;false&#x60; improves response times. (optional, default to false)</param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;.  (optional)</param>
        /// <returns>Task of IntegrationStateV2</returns>
        System.Threading.Tasks.Task<IntegrationStateV2> UpdateCustomerProfileV2Async (string integrationId, CustomerProfileIntegrationRequestV2 body, bool? runRuleEngine = default(bool?), bool? dry = default(bool?));

        /// <summary>
        /// Update customer profile
        /// </summary>
        /// <remarks>
        /// Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile).  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  **Performance tips**  Updating a customer profile returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile. Must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="runRuleEngine">Indicates whether to run the rule engine. Setting this property to &#x60;false&#x60; improves response times. (optional, default to false)</param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationStateV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegrationStateV2>> UpdateCustomerProfileV2AsyncWithHttpInfo (string integrationId, CustomerProfileIntegrationRequestV2 body, bool? runRuleEngine = default(bool?), bool? dry = default(bool?));
        /// <summary>
        /// Update multiple customer profiles
        /// </summary>
        /// <remarks>
        /// Update (or create) up to 1000 [customer profiles](/docs/dev/concepts/entities#customer-profile) in 1 request.  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  A customer profile [can be linked to one or more sessions](/integration-api/#tag/Customer-sessions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of MultipleCustomerProfileIntegrationResponseV2</returns>
        System.Threading.Tasks.Task<MultipleCustomerProfileIntegrationResponseV2> UpdateCustomerProfilesV2Async (MultipleCustomerProfileIntegrationRequest body, string silent = default(string));

        /// <summary>
        /// Update multiple customer profiles
        /// </summary>
        /// <remarks>
        /// Update (or create) up to 1000 [customer profiles](/docs/dev/concepts/entities#customer-profile) in 1 request.  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  A customer profile [can be linked to one or more sessions](/integration-api/#tag/Customer-sessions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (MultipleCustomerProfileIntegrationResponseV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipleCustomerProfileIntegrationResponseV2>> UpdateCustomerProfilesV2AsyncWithHttpInfo (MultipleCustomerProfileIntegrationRequest body, string silent = default(string));
        /// <summary>
        /// Update customer session V1
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/docs/dev/getting-started/apiv2#migrating-to-v2).  Update (or create) a [Customer Session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to represent which items are in the customer&#39;s cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer profile returns a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of IntegrationState</returns>
        System.Threading.Tasks.Task<IntegrationState> UpdateCustomerSessionAsync (string customerSessionId, NewCustomerSession body, bool? dry = default(bool?));

        /// <summary>
        /// Update customer session V1
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/docs/dev/getting-started/apiv2#migrating-to-v2).  Update (or create) a [Customer Session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to represent which items are in the customer&#39;s cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer profile returns a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationState)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegrationState>> UpdateCustomerSessionAsyncWithHttpInfo (string customerSessionId, NewCustomerSession body, bool? dry = default(bool?));
        /// <summary>
        /// Update customer session
        /// </summary>
        /// <remarks>
        /// Update (or create) a [customer session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to share the content of a customer&#39;s cart with Talon.One and to check which promotion rules apply.  **Note:** The currency for the session and the cart items in the session is the same as the Application that owns this session.  **Session management**  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same Application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  **Sessions and customer profiles**  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  **Performance tips**  Updating a customer session returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response also includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects.  See more information and tips about session management in [Entities](/docs/dev/concepts/entities#customer-session). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of IntegrationStateV2</returns>
        System.Threading.Tasks.Task<IntegrationStateV2> UpdateCustomerSessionV2Async (string customerSessionId, IntegrationRequest body, bool? dry = default(bool?));

        /// <summary>
        /// Update customer session
        /// </summary>
        /// <remarks>
        /// Update (or create) a [customer session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to share the content of a customer&#39;s cart with Talon.One and to check which promotion rules apply.  **Note:** The currency for the session and the cart items in the session is the same as the Application that owns this session.  **Session management**  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same Application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  **Sessions and customer profiles**  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  **Performance tips**  Updating a customer session returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response also includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects.  See more information and tips about session management in [Entities](/docs/dev/concepts/entities#customer-session). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationStateV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegrationStateV2>> UpdateCustomerSessionV2AsyncWithHttpInfo (string customerSessionId, IntegrationRequest body, bool? dry = default(bool?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IntegrationApi : IIntegrationApi
    {
        private TalonOne.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IntegrationApi(String basePath)
        {
            this.Configuration = new TalonOne.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class
        /// </summary>
        /// <returns></returns>
        public IntegrationApi()
        {
            this.Configuration = TalonOne.Client.Configuration.Default;

            ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IntegrationApi(TalonOne.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TalonOne.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TalonOne.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TalonOne.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create coupon reservation Create a coupon reservation for all passed customer profiles on this couponID. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>Coupon</returns>
        public Coupon CreateCouponReservation (string couponValue, CouponReservations body)
        {
             ApiResponse<Coupon> localVarResponse = CreateCouponReservationWithHttpInfo(couponValue, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupon reservation Create a coupon reservation for all passed customer profiles on this couponID. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Coupon</returns>
        public ApiResponse<Coupon> CreateCouponReservationWithHttpInfo (string couponValue, CouponReservations body)
        {
            // verify the required parameter 'couponValue' is set
            if (couponValue == null)
                throw new ApiException(400, "Missing required parameter 'couponValue' when calling IntegrationApi->CreateCouponReservation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->CreateCouponReservation");

            var localVarPath = "/v1/coupon_reservations/{couponValue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponValue != null) localVarPathParams.Add("couponValue", this.Configuration.ApiClient.ParameterToString(couponValue)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCouponReservation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Create coupon reservation Create a coupon reservation for all passed customer profiles on this couponID. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>Task of Coupon</returns>
        public async System.Threading.Tasks.Task<Coupon> CreateCouponReservationAsync (string couponValue, CouponReservations body)
        {
             ApiResponse<Coupon> localVarResponse = await CreateCouponReservationAsyncWithHttpInfo(couponValue, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupon reservation Create a coupon reservation for all passed customer profiles on this couponID. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Coupon>> CreateCouponReservationAsyncWithHttpInfo (string couponValue, CouponReservations body)
        {
            // verify the required parameter 'couponValue' is set
            if (couponValue == null)
                throw new ApiException(400, "Missing required parameter 'couponValue' when calling IntegrationApi->CreateCouponReservation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->CreateCouponReservation");

            var localVarPath = "/v1/coupon_reservations/{couponValue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponValue != null) localVarPathParams.Add("couponValue", this.Configuration.ApiClient.ParameterToString(couponValue)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCouponReservation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Create referral code for an advocate Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the &#x60;campaignId&#x60; parameter, and will be associated with the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Referral</returns>
        public Referral CreateReferral (NewReferral body)
        {
             ApiResponse<Referral> localVarResponse = CreateReferralWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create referral code for an advocate Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the &#x60;campaignId&#x60; parameter, and will be associated with the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Referral</returns>
        public ApiResponse<Referral> CreateReferralWithHttpInfo (NewReferral body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->CreateReferral");

            var localVarPath = "/v1/referrals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReferral", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Referral>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Referral) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Referral)));
        }

        /// <summary>
        /// Create referral code for an advocate Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the &#x60;campaignId&#x60; parameter, and will be associated with the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Referral</returns>
        public async System.Threading.Tasks.Task<Referral> CreateReferralAsync (NewReferral body)
        {
             ApiResponse<Referral> localVarResponse = await CreateReferralAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create referral code for an advocate Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the &#x60;campaignId&#x60; parameter, and will be associated with the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Referral>> CreateReferralAsyncWithHttpInfo (NewReferral body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->CreateReferral");

            var localVarPath = "/v1/referrals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReferral", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Referral>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Referral) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Referral)));
        }

        /// <summary>
        /// Create referral codes for multiple advocates Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the &#x60;campaignId&#x60; parameter, and one referral code will be associated with one advocate using the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 CreateReferralsForMultipleAdvocates (NewReferralsForMultipleAdvocates body, string silent = default(string))
        {
             ApiResponse<InlineResponse201> localVarResponse = CreateReferralsForMultipleAdvocatesWithHttpInfo(body, silent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create referral codes for multiple advocates Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the &#x60;campaignId&#x60; parameter, and one referral code will be associated with one advocate using the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse<InlineResponse201> CreateReferralsForMultipleAdvocatesWithHttpInfo (NewReferralsForMultipleAdvocates body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->CreateReferralsForMultipleAdvocates");

            var localVarPath = "/v1/referrals_for_multiple_advocates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (silent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "silent", silent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReferralsForMultipleAdvocates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Create referral codes for multiple advocates Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the &#x60;campaignId&#x60; parameter, and one referral code will be associated with one advocate using the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> CreateReferralsForMultipleAdvocatesAsync (NewReferralsForMultipleAdvocates body, string silent = default(string))
        {
             ApiResponse<InlineResponse201> localVarResponse = await CreateReferralsForMultipleAdvocatesAsyncWithHttpInfo(body, silent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create referral codes for multiple advocates Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the &#x60;campaignId&#x60; parameter, and one referral code will be associated with one advocate using the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateReferralsForMultipleAdvocatesAsyncWithHttpInfo (NewReferralsForMultipleAdvocates body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->CreateReferralsForMultipleAdvocates");

            var localVarPath = "/v1/referrals_for_multiple_advocates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (silent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "silent", silent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReferralsForMultipleAdvocates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Delete coupon reservations Remove all passed customer profiles reservation from this coupon. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void DeleteCouponReservation (string couponValue, CouponReservations body)
        {
             DeleteCouponReservationWithHttpInfo(couponValue, body);
        }

        /// <summary>
        /// Delete coupon reservations Remove all passed customer profiles reservation from this coupon. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCouponReservationWithHttpInfo (string couponValue, CouponReservations body)
        {
            // verify the required parameter 'couponValue' is set
            if (couponValue == null)
                throw new ApiException(400, "Missing required parameter 'couponValue' when calling IntegrationApi->DeleteCouponReservation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->DeleteCouponReservation");

            var localVarPath = "/v1/coupon_reservations/{couponValue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponValue != null) localVarPathParams.Add("couponValue", this.Configuration.ApiClient.ParameterToString(couponValue)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCouponReservation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete coupon reservations Remove all passed customer profiles reservation from this coupon. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponReservationAsync (string couponValue, CouponReservations body)
        {
             await DeleteCouponReservationAsyncWithHttpInfo(couponValue, body);

        }

        /// <summary>
        /// Delete coupon reservations Remove all passed customer profiles reservation from this coupon. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponReservationAsyncWithHttpInfo (string couponValue, CouponReservations body)
        {
            // verify the required parameter 'couponValue' is set
            if (couponValue == null)
                throw new ApiException(400, "Missing required parameter 'couponValue' when calling IntegrationApi->DeleteCouponReservation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->DeleteCouponReservation");

            var localVarPath = "/v1/coupon_reservations/{couponValue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponValue != null) localVarPathParams.Add("couponValue", this.Configuration.ApiClient.ParameterToString(couponValue)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCouponReservation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete the personal data of a customer Delete all attributes on the customer profile and on entities that reference that customer profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns></returns>
        public void DeleteCustomerData (string integrationId)
        {
             DeleteCustomerDataWithHttpInfo(integrationId);
        }

        /// <summary>
        /// Delete the personal data of a customer Delete all attributes on the customer profile and on entities that reference that customer profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomerDataWithHttpInfo (string integrationId)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationApi->DeleteCustomerData");

            var localVarPath = "/v1/customer_data/{integrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integrationId", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomerData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete the personal data of a customer Delete all attributes on the customer profile and on entities that reference that customer profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomerDataAsync (string integrationId)
        {
             await DeleteCustomerDataAsyncWithHttpInfo(integrationId);

        }

        /// <summary>
        /// Delete the personal data of a customer Delete all attributes on the customer profile and on entities that reference that customer profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerDataAsyncWithHttpInfo (string integrationId)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationApi->DeleteCustomerData");

            var localVarPath = "/v1/customer_data/{integrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integrationId", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomerData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List all data associated with a specific customer profile Get information regarding entities referencing this customer profile&#39;s integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="profile">optional flag to decide if you would like customer profile information in the response (optional)</param>
        /// <param name="referrals">optional flag to decide if you would like referral information in the response (optional)</param>
        /// <param name="coupons">optional flag to decide if you would like coupon information in the response (optional)</param>
        /// <param name="loyalty">optional flag to decide if you would like loyalty information in the response (optional)</param>
        /// <param name="giveaways">optional flag to decide if you would like giveaways information in the response (optional)</param>
        /// <returns>CustomerInventory</returns>
        public CustomerInventory GetCustomerInventory (string integrationId, bool? profile = default(bool?), bool? referrals = default(bool?), bool? coupons = default(bool?), bool? loyalty = default(bool?), bool? giveaways = default(bool?))
        {
             ApiResponse<CustomerInventory> localVarResponse = GetCustomerInventoryWithHttpInfo(integrationId, profile, referrals, coupons, loyalty, giveaways);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all data associated with a specific customer profile Get information regarding entities referencing this customer profile&#39;s integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="profile">optional flag to decide if you would like customer profile information in the response (optional)</param>
        /// <param name="referrals">optional flag to decide if you would like referral information in the response (optional)</param>
        /// <param name="coupons">optional flag to decide if you would like coupon information in the response (optional)</param>
        /// <param name="loyalty">optional flag to decide if you would like loyalty information in the response (optional)</param>
        /// <param name="giveaways">optional flag to decide if you would like giveaways information in the response (optional)</param>
        /// <returns>ApiResponse of CustomerInventory</returns>
        public ApiResponse<CustomerInventory> GetCustomerInventoryWithHttpInfo (string integrationId, bool? profile = default(bool?), bool? referrals = default(bool?), bool? coupons = default(bool?), bool? loyalty = default(bool?), bool? giveaways = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationApi->GetCustomerInventory");

            var localVarPath = "/v1/customer_profiles/{integrationId}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integrationId", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (referrals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referrals", referrals)); // query parameter
            if (coupons != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "coupons", coupons)); // query parameter
            if (loyalty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loyalty", loyalty)); // query parameter
            if (giveaways != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "giveaways", giveaways)); // query parameter

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInventory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerInventory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInventory)));
        }

        /// <summary>
        /// List all data associated with a specific customer profile Get information regarding entities referencing this customer profile&#39;s integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="profile">optional flag to decide if you would like customer profile information in the response (optional)</param>
        /// <param name="referrals">optional flag to decide if you would like referral information in the response (optional)</param>
        /// <param name="coupons">optional flag to decide if you would like coupon information in the response (optional)</param>
        /// <param name="loyalty">optional flag to decide if you would like loyalty information in the response (optional)</param>
        /// <param name="giveaways">optional flag to decide if you would like giveaways information in the response (optional)</param>
        /// <returns>Task of CustomerInventory</returns>
        public async System.Threading.Tasks.Task<CustomerInventory> GetCustomerInventoryAsync (string integrationId, bool? profile = default(bool?), bool? referrals = default(bool?), bool? coupons = default(bool?), bool? loyalty = default(bool?), bool? giveaways = default(bool?))
        {
             ApiResponse<CustomerInventory> localVarResponse = await GetCustomerInventoryAsyncWithHttpInfo(integrationId, profile, referrals, coupons, loyalty, giveaways);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all data associated with a specific customer profile Get information regarding entities referencing this customer profile&#39;s integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="profile">optional flag to decide if you would like customer profile information in the response (optional)</param>
        /// <param name="referrals">optional flag to decide if you would like referral information in the response (optional)</param>
        /// <param name="coupons">optional flag to decide if you would like coupon information in the response (optional)</param>
        /// <param name="loyalty">optional flag to decide if you would like loyalty information in the response (optional)</param>
        /// <param name="giveaways">optional flag to decide if you would like giveaways information in the response (optional)</param>
        /// <returns>Task of ApiResponse (CustomerInventory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerInventory>> GetCustomerInventoryAsyncWithHttpInfo (string integrationId, bool? profile = default(bool?), bool? referrals = default(bool?), bool? coupons = default(bool?), bool? loyalty = default(bool?), bool? giveaways = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationApi->GetCustomerInventory");

            var localVarPath = "/v1/customer_profiles/{integrationId}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integrationId", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (referrals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referrals", referrals)); // query parameter
            if (coupons != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "coupons", coupons)); // query parameter
            if (loyalty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loyalty", loyalty)); // query parameter
            if (giveaways != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "giveaways", giveaways)); // query parameter

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInventory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerInventory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInventory)));
        }

        /// <summary>
        /// List users that have this coupon reserved Return all users that have this coupon marked as reserved. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetReservedCustomers (string couponValue)
        {
             ApiResponse<InlineResponse200> localVarResponse = GetReservedCustomersWithHttpInfo(couponValue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users that have this coupon reserved Return all users that have this coupon marked as reserved. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> GetReservedCustomersWithHttpInfo (string couponValue)
        {
            // verify the required parameter 'couponValue' is set
            if (couponValue == null)
                throw new ApiException(400, "Missing required parameter 'couponValue' when calling IntegrationApi->GetReservedCustomers");

            var localVarPath = "/v1/coupon_reservations/customerprofiles/{couponValue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponValue != null) localVarPathParams.Add("couponValue", this.Configuration.ApiClient.ParameterToString(couponValue)); // path parameter

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReservedCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// List users that have this coupon reserved Return all users that have this coupon marked as reserved. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetReservedCustomersAsync (string couponValue)
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetReservedCustomersAsyncWithHttpInfo(couponValue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users that have this coupon reserved Return all users that have this coupon marked as reserved. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponValue">The value of a coupon</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetReservedCustomersAsyncWithHttpInfo (string couponValue)
        {
            // verify the required parameter 'couponValue' is set
            if (couponValue == null)
                throw new ApiException(400, "Missing required parameter 'couponValue' when calling IntegrationApi->GetReservedCustomers");

            var localVarPath = "/v1/coupon_reservations/customerprofiles/{couponValue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponValue != null) localVarPathParams.Add("couponValue", this.Configuration.ApiClient.ParameterToString(couponValue)); // path parameter

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReservedCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Track an Event Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The &#x60;sessionId&#x60; body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same &#x60;profileId&#x60; or an error will be returned.  As with customer sessions, you can use an empty string for &#x60;profileId&#x60; to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>IntegrationState</returns>
        public IntegrationState TrackEvent (NewEvent body, bool? dry = default(bool?))
        {
             ApiResponse<IntegrationState> localVarResponse = TrackEventWithHttpInfo(body, dry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Track an Event Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The &#x60;sessionId&#x60; body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same &#x60;profileId&#x60; or an error will be returned.  As with customer sessions, you can use an empty string for &#x60;profileId&#x60; to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>ApiResponse of IntegrationState</returns>
        public ApiResponse<IntegrationState> TrackEventWithHttpInfo (NewEvent body, bool? dry = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->TrackEvent");

            var localVarPath = "/v1/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry", dry)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationState)));
        }

        /// <summary>
        /// Track an Event Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The &#x60;sessionId&#x60; body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same &#x60;profileId&#x60; or an error will be returned.  As with customer sessions, you can use an empty string for &#x60;profileId&#x60; to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of IntegrationState</returns>
        public async System.Threading.Tasks.Task<IntegrationState> TrackEventAsync (NewEvent body, bool? dry = default(bool?))
        {
             ApiResponse<IntegrationState> localVarResponse = await TrackEventAsyncWithHttpInfo(body, dry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Track an Event Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The &#x60;sessionId&#x60; body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same &#x60;profileId&#x60; or an error will be returned.  As with customer sessions, you can use an empty string for &#x60;profileId&#x60; to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegrationState>> TrackEventAsyncWithHttpInfo (NewEvent body, bool? dry = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->TrackEvent");

            var localVarPath = "/v1/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry", dry)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationState)));
        }

        /// <summary>
        /// Update customer profile V1 ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/getting-started/apiv2).  Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile). This profile information can then be matched and/or updated by campaign [Rules][].  The &#x60;integrationId&#x60; may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the &#x60;integrationId&#x60;. It is vital that this ID **not** change over time, so **don&#39;t** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>IntegrationState</returns>
        public IntegrationState UpdateCustomerProfile (string integrationId, NewCustomerProfile body, bool? dry = default(bool?))
        {
             ApiResponse<IntegrationState> localVarResponse = UpdateCustomerProfileWithHttpInfo(integrationId, body, dry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update customer profile V1 ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/getting-started/apiv2).  Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile). This profile information can then be matched and/or updated by campaign [Rules][].  The &#x60;integrationId&#x60; may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the &#x60;integrationId&#x60;. It is vital that this ID **not** change over time, so **don&#39;t** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>ApiResponse of IntegrationState</returns>
        public ApiResponse<IntegrationState> UpdateCustomerProfileWithHttpInfo (string integrationId, NewCustomerProfile body, bool? dry = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationApi->UpdateCustomerProfile");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->UpdateCustomerProfile");

            var localVarPath = "/v1/customer_profiles/{integrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integrationId", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (dry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry", dry)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationState)));
        }

        /// <summary>
        /// Update customer profile V1 ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/getting-started/apiv2).  Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile). This profile information can then be matched and/or updated by campaign [Rules][].  The &#x60;integrationId&#x60; may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the &#x60;integrationId&#x60;. It is vital that this ID **not** change over time, so **don&#39;t** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of IntegrationState</returns>
        public async System.Threading.Tasks.Task<IntegrationState> UpdateCustomerProfileAsync (string integrationId, NewCustomerProfile body, bool? dry = default(bool?))
        {
             ApiResponse<IntegrationState> localVarResponse = await UpdateCustomerProfileAsyncWithHttpInfo(integrationId, body, dry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update customer profile V1 ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/getting-started/apiv2).  Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile). This profile information can then be matched and/or updated by campaign [Rules][].  The &#x60;integrationId&#x60; may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the &#x60;integrationId&#x60;. It is vital that this ID **not** change over time, so **don&#39;t** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegrationState>> UpdateCustomerProfileAsyncWithHttpInfo (string integrationId, NewCustomerProfile body, bool? dry = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationApi->UpdateCustomerProfile");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->UpdateCustomerProfile");

            var localVarPath = "/v1/customer_profiles/{integrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integrationId", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (dry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry", dry)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationState)));
        }

        /// <summary>
        /// Update customer profile Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile).  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  **Performance tips**  Updating a customer profile returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile. Must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="runRuleEngine">Indicates whether to run the rule engine. Setting this property to &#x60;false&#x60; improves response times. (optional, default to false)</param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;.  (optional)</param>
        /// <returns>IntegrationStateV2</returns>
        public IntegrationStateV2 UpdateCustomerProfileV2 (string integrationId, CustomerProfileIntegrationRequestV2 body, bool? runRuleEngine = default(bool?), bool? dry = default(bool?))
        {
             ApiResponse<IntegrationStateV2> localVarResponse = UpdateCustomerProfileV2WithHttpInfo(integrationId, body, runRuleEngine, dry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update customer profile Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile).  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  **Performance tips**  Updating a customer profile returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile. Must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="runRuleEngine">Indicates whether to run the rule engine. Setting this property to &#x60;false&#x60; improves response times. (optional, default to false)</param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;.  (optional)</param>
        /// <returns>ApiResponse of IntegrationStateV2</returns>
        public ApiResponse<IntegrationStateV2> UpdateCustomerProfileV2WithHttpInfo (string integrationId, CustomerProfileIntegrationRequestV2 body, bool? runRuleEngine = default(bool?), bool? dry = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationApi->UpdateCustomerProfileV2");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->UpdateCustomerProfileV2");

            var localVarPath = "/v2/customer_profiles/{integrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integrationId", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (runRuleEngine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "runRuleEngine", runRuleEngine)); // query parameter
            if (dry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry", dry)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerProfileV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationStateV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationStateV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationStateV2)));
        }

        /// <summary>
        /// Update customer profile Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile).  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  **Performance tips**  Updating a customer profile returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile. Must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="runRuleEngine">Indicates whether to run the rule engine. Setting this property to &#x60;false&#x60; improves response times. (optional, default to false)</param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;.  (optional)</param>
        /// <returns>Task of IntegrationStateV2</returns>
        public async System.Threading.Tasks.Task<IntegrationStateV2> UpdateCustomerProfileV2Async (string integrationId, CustomerProfileIntegrationRequestV2 body, bool? runRuleEngine = default(bool?), bool? dry = default(bool?))
        {
             ApiResponse<IntegrationStateV2> localVarResponse = await UpdateCustomerProfileV2AsyncWithHttpInfo(integrationId, body, runRuleEngine, dry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update customer profile Update (or create) a [Customer Profile](/docs/dev/concepts/entities#customer-profile).  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  **Performance tips**  Updating a customer profile returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The custom identifier for this profile. Must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="runRuleEngine">Indicates whether to run the rule engine. Setting this property to &#x60;false&#x60; improves response times. (optional, default to false)</param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationStateV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegrationStateV2>> UpdateCustomerProfileV2AsyncWithHttpInfo (string integrationId, CustomerProfileIntegrationRequestV2 body, bool? runRuleEngine = default(bool?), bool? dry = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationApi->UpdateCustomerProfileV2");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->UpdateCustomerProfileV2");

            var localVarPath = "/v2/customer_profiles/{integrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integrationId", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (runRuleEngine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "runRuleEngine", runRuleEngine)); // query parameter
            if (dry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry", dry)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerProfileV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationStateV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationStateV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationStateV2)));
        }

        /// <summary>
        /// Update multiple customer profiles Update (or create) up to 1000 [customer profiles](/docs/dev/concepts/entities#customer-profile) in 1 request.  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  A customer profile [can be linked to one or more sessions](/integration-api/#tag/Customer-sessions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>MultipleCustomerProfileIntegrationResponseV2</returns>
        public MultipleCustomerProfileIntegrationResponseV2 UpdateCustomerProfilesV2 (MultipleCustomerProfileIntegrationRequest body, string silent = default(string))
        {
             ApiResponse<MultipleCustomerProfileIntegrationResponseV2> localVarResponse = UpdateCustomerProfilesV2WithHttpInfo(body, silent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update multiple customer profiles Update (or create) up to 1000 [customer profiles](/docs/dev/concepts/entities#customer-profile) in 1 request.  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  A customer profile [can be linked to one or more sessions](/integration-api/#tag/Customer-sessions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of MultipleCustomerProfileIntegrationResponseV2</returns>
        public ApiResponse<MultipleCustomerProfileIntegrationResponseV2> UpdateCustomerProfilesV2WithHttpInfo (MultipleCustomerProfileIntegrationRequest body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->UpdateCustomerProfilesV2");

            var localVarPath = "/v2/customer_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (silent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "silent", silent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerProfilesV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleCustomerProfileIntegrationResponseV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultipleCustomerProfileIntegrationResponseV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleCustomerProfileIntegrationResponseV2)));
        }

        /// <summary>
        /// Update multiple customer profiles Update (or create) up to 1000 [customer profiles](/docs/dev/concepts/entities#customer-profile) in 1 request.  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  A customer profile [can be linked to one or more sessions](/integration-api/#tag/Customer-sessions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of MultipleCustomerProfileIntegrationResponseV2</returns>
        public async System.Threading.Tasks.Task<MultipleCustomerProfileIntegrationResponseV2> UpdateCustomerProfilesV2Async (MultipleCustomerProfileIntegrationRequest body, string silent = default(string))
        {
             ApiResponse<MultipleCustomerProfileIntegrationResponseV2> localVarResponse = await UpdateCustomerProfilesV2AsyncWithHttpInfo(body, silent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update multiple customer profiles Update (or create) up to 1000 [customer profiles](/docs/dev/concepts/entities#customer-profile) in 1 request.  The &#x60;integrationId&#x60; must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  A customer profile [can be linked to one or more sessions](/integration-api/#tag/Customer-sessions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (MultipleCustomerProfileIntegrationResponseV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultipleCustomerProfileIntegrationResponseV2>> UpdateCustomerProfilesV2AsyncWithHttpInfo (MultipleCustomerProfileIntegrationRequest body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->UpdateCustomerProfilesV2");

            var localVarPath = "/v2/customer_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (silent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "silent", silent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerProfilesV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleCustomerProfileIntegrationResponseV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultipleCustomerProfileIntegrationResponseV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleCustomerProfileIntegrationResponseV2)));
        }

        /// <summary>
        /// Update customer session V1 ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/docs/dev/getting-started/apiv2#migrating-to-v2).  Update (or create) a [Customer Session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to represent which items are in the customer&#39;s cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer profile returns a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>IntegrationState</returns>
        public IntegrationState UpdateCustomerSession (string customerSessionId, NewCustomerSession body, bool? dry = default(bool?))
        {
             ApiResponse<IntegrationState> localVarResponse = UpdateCustomerSessionWithHttpInfo(customerSessionId, body, dry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update customer session V1 ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/docs/dev/getting-started/apiv2#migrating-to-v2).  Update (or create) a [Customer Session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to represent which items are in the customer&#39;s cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer profile returns a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>ApiResponse of IntegrationState</returns>
        public ApiResponse<IntegrationState> UpdateCustomerSessionWithHttpInfo (string customerSessionId, NewCustomerSession body, bool? dry = default(bool?))
        {
            // verify the required parameter 'customerSessionId' is set
            if (customerSessionId == null)
                throw new ApiException(400, "Missing required parameter 'customerSessionId' when calling IntegrationApi->UpdateCustomerSession");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->UpdateCustomerSession");

            var localVarPath = "/v1/customer_sessions/{customerSessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerSessionId != null) localVarPathParams.Add("customerSessionId", this.Configuration.ApiClient.ParameterToString(customerSessionId)); // path parameter
            if (dry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry", dry)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationState)));
        }

        /// <summary>
        /// Update customer session V1 ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/docs/dev/getting-started/apiv2#migrating-to-v2).  Update (or create) a [Customer Session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to represent which items are in the customer&#39;s cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer profile returns a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of IntegrationState</returns>
        public async System.Threading.Tasks.Task<IntegrationState> UpdateCustomerSessionAsync (string customerSessionId, NewCustomerSession body, bool? dry = default(bool?))
        {
             ApiResponse<IntegrationState> localVarResponse = await UpdateCustomerSessionAsyncWithHttpInfo(customerSessionId, body, dry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update customer session V1 ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/docs/dev/docs/dev/getting-started/apiv2#migrating-to-v2).  Update (or create) a [Customer Session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to represent which items are in the customer&#39;s cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer profile returns a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegrationState>> UpdateCustomerSessionAsyncWithHttpInfo (string customerSessionId, NewCustomerSession body, bool? dry = default(bool?))
        {
            // verify the required parameter 'customerSessionId' is set
            if (customerSessionId == null)
                throw new ApiException(400, "Missing required parameter 'customerSessionId' when calling IntegrationApi->UpdateCustomerSession");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->UpdateCustomerSession");

            var localVarPath = "/v1/customer_sessions/{customerSessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerSessionId != null) localVarPathParams.Add("customerSessionId", this.Configuration.ApiClient.ParameterToString(customerSessionId)); // path parameter
            if (dry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry", dry)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationState)));
        }

        /// <summary>
        /// Update customer session Update (or create) a [customer session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to share the content of a customer&#39;s cart with Talon.One and to check which promotion rules apply.  **Note:** The currency for the session and the cart items in the session is the same as the Application that owns this session.  **Session management**  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same Application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  **Sessions and customer profiles**  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  **Performance tips**  Updating a customer session returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response also includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects.  See more information and tips about session management in [Entities](/docs/dev/concepts/entities#customer-session). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>IntegrationStateV2</returns>
        public IntegrationStateV2 UpdateCustomerSessionV2 (string customerSessionId, IntegrationRequest body, bool? dry = default(bool?))
        {
             ApiResponse<IntegrationStateV2> localVarResponse = UpdateCustomerSessionV2WithHttpInfo(customerSessionId, body, dry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update customer session Update (or create) a [customer session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to share the content of a customer&#39;s cart with Talon.One and to check which promotion rules apply.  **Note:** The currency for the session and the cart items in the session is the same as the Application that owns this session.  **Session management**  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same Application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  **Sessions and customer profiles**  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  **Performance tips**  Updating a customer session returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response also includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects.  See more information and tips about session management in [Entities](/docs/dev/concepts/entities#customer-session). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>ApiResponse of IntegrationStateV2</returns>
        public ApiResponse<IntegrationStateV2> UpdateCustomerSessionV2WithHttpInfo (string customerSessionId, IntegrationRequest body, bool? dry = default(bool?))
        {
            // verify the required parameter 'customerSessionId' is set
            if (customerSessionId == null)
                throw new ApiException(400, "Missing required parameter 'customerSessionId' when calling IntegrationApi->UpdateCustomerSessionV2");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->UpdateCustomerSessionV2");

            var localVarPath = "/v2/customer_sessions/{customerSessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerSessionId != null) localVarPathParams.Add("customerSessionId", this.Configuration.ApiClient.ParameterToString(customerSessionId)); // path parameter
            if (dry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry", dry)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerSessionV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationStateV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationStateV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationStateV2)));
        }

        /// <summary>
        /// Update customer session Update (or create) a [customer session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to share the content of a customer&#39;s cart with Talon.One and to check which promotion rules apply.  **Note:** The currency for the session and the cart items in the session is the same as the Application that owns this session.  **Session management**  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same Application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  **Sessions and customer profiles**  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  **Performance tips**  Updating a customer session returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response also includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects.  See more information and tips about session management in [Entities](/docs/dev/concepts/entities#customer-session). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of IntegrationStateV2</returns>
        public async System.Threading.Tasks.Task<IntegrationStateV2> UpdateCustomerSessionV2Async (string customerSessionId, IntegrationRequest body, bool? dry = default(bool?))
        {
             ApiResponse<IntegrationStateV2> localVarResponse = await UpdateCustomerSessionV2AsyncWithHttpInfo(customerSessionId, body, dry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update customer session Update (or create) a [customer session](/docs/dev/concepts/entities#customer-session). For example, use this endpoint to share the content of a customer&#39;s cart with Talon.One and to check which promotion rules apply.  **Note:** The currency for the session and the cart items in the session is the same as the Application that owns this session.  **Session management**  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same Application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user&#39;s cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  **Sessions and customer profiles**  To link a session to a customer profile, set the &#x60;profileId&#x60; parameter in the request body to a customer profile&#39;s &#x60;integrationId&#x60;. To track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  **Performance tips**  Updating a customer session returns a response with the requested integration state.  You can use the &#x60;responseContent&#x60; property to save yourself extra API calls. For example, you can get the customer profile details directly without extra requests.  You can also set &#x60;runRuleEngine&#x60; to &#x60;false&#x60; to prevent unwanted rule executions. This allows you to improve response times.  If &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;, the response also includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects.  See more information and tips about session management in [Entities](/docs/dev/concepts/entities#customer-session). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="body"></param>
        /// <param name="dry">Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationStateV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegrationStateV2>> UpdateCustomerSessionV2AsyncWithHttpInfo (string customerSessionId, IntegrationRequest body, bool? dry = default(bool?))
        {
            // verify the required parameter 'customerSessionId' is set
            if (customerSessionId == null)
                throw new ApiException(400, "Missing required parameter 'customerSessionId' when calling IntegrationApi->UpdateCustomerSessionV2");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationApi->UpdateCustomerSessionV2");

            var localVarPath = "/v2/customer_sessions/{customerSessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerSessionId != null) localVarPathParams.Add("customerSessionId", this.Configuration.ApiClient.ParameterToString(customerSessionId)); // path parameter
            if (dry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry", dry)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key_v1) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerSessionV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationStateV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationStateV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationStateV2)));
        }

    }
}
