/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// AccountDashboardStatistic
    /// </summary>
    [DataContract]
    public partial class AccountDashboardStatistic :  IEquatable<AccountDashboardStatistic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDashboardStatistic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountDashboardStatistic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDashboardStatistic" /> class.
        /// </summary>
        /// <param name="revenue">Aggregated statistic for account revenue..</param>
        /// <param name="discounts">Aggregated statistic for account discount..</param>
        /// <param name="loyaltyPoints">Aggregated statistic for account loyalty points..</param>
        /// <param name="referrals">Aggregated statistic for account referrals..</param>
        /// <param name="apiCalls">Aggregated statistic for the number of account API calls..</param>
        /// <param name="campaigns">campaigns (required).</param>
        public AccountDashboardStatistic(List<AccountDashboardStatisticRevenue> revenue = default(List<AccountDashboardStatisticRevenue>), List<AccountDashboardStatisticDiscount> discounts = default(List<AccountDashboardStatisticDiscount>), List<AccountDashboardStatisticLoyaltyPoints> loyaltyPoints = default(List<AccountDashboardStatisticLoyaltyPoints>), List<AccountDashboardStatisticReferrals> referrals = default(List<AccountDashboardStatisticReferrals>), List<AccountDashboardStatisticApiCalls> apiCalls = default(List<AccountDashboardStatisticApiCalls>), AccountDashboardStatisticCampaigns campaigns = default(AccountDashboardStatisticCampaigns))
        {
            // to ensure "campaigns" is required (not null)
            this.Campaigns = campaigns ?? throw new ArgumentNullException("campaigns is a required property for AccountDashboardStatistic and cannot be null");
            this.Revenue = revenue;
            this.Discounts = discounts;
            this.LoyaltyPoints = loyaltyPoints;
            this.Referrals = referrals;
            this.ApiCalls = apiCalls;
        }
        
        /// <summary>
        /// Aggregated statistic for account revenue.
        /// </summary>
        /// <value>Aggregated statistic for account revenue.</value>
        [DataMember(Name="revenue", EmitDefaultValue=false)]
        public List<AccountDashboardStatisticRevenue> Revenue { get; set; }

        /// <summary>
        /// Aggregated statistic for account discount.
        /// </summary>
        /// <value>Aggregated statistic for account discount.</value>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public List<AccountDashboardStatisticDiscount> Discounts { get; set; }

        /// <summary>
        /// Aggregated statistic for account loyalty points.
        /// </summary>
        /// <value>Aggregated statistic for account loyalty points.</value>
        [DataMember(Name="loyaltyPoints", EmitDefaultValue=false)]
        public List<AccountDashboardStatisticLoyaltyPoints> LoyaltyPoints { get; set; }

        /// <summary>
        /// Aggregated statistic for account referrals.
        /// </summary>
        /// <value>Aggregated statistic for account referrals.</value>
        [DataMember(Name="referrals", EmitDefaultValue=false)]
        public List<AccountDashboardStatisticReferrals> Referrals { get; set; }

        /// <summary>
        /// Aggregated statistic for the number of account API calls.
        /// </summary>
        /// <value>Aggregated statistic for the number of account API calls.</value>
        [DataMember(Name="apiCalls", EmitDefaultValue=false)]
        public List<AccountDashboardStatisticApiCalls> ApiCalls { get; set; }

        /// <summary>
        /// Gets or Sets Campaigns
        /// </summary>
        [DataMember(Name="campaigns", EmitDefaultValue=false)]
        public AccountDashboardStatisticCampaigns Campaigns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDashboardStatistic {\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  LoyaltyPoints: ").Append(LoyaltyPoints).Append("\n");
            sb.Append("  Referrals: ").Append(Referrals).Append("\n");
            sb.Append("  ApiCalls: ").Append(ApiCalls).Append("\n");
            sb.Append("  Campaigns: ").Append(Campaigns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDashboardStatistic);
        }

        /// <summary>
        /// Returns true if AccountDashboardStatistic instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDashboardStatistic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDashboardStatistic input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Revenue == input.Revenue ||
                    this.Revenue != null &&
                    input.Revenue != null &&
                    this.Revenue.SequenceEqual(input.Revenue)
                ) && 
                (
                    this.Discounts == input.Discounts ||
                    this.Discounts != null &&
                    input.Discounts != null &&
                    this.Discounts.SequenceEqual(input.Discounts)
                ) && 
                (
                    this.LoyaltyPoints == input.LoyaltyPoints ||
                    this.LoyaltyPoints != null &&
                    input.LoyaltyPoints != null &&
                    this.LoyaltyPoints.SequenceEqual(input.LoyaltyPoints)
                ) && 
                (
                    this.Referrals == input.Referrals ||
                    this.Referrals != null &&
                    input.Referrals != null &&
                    this.Referrals.SequenceEqual(input.Referrals)
                ) && 
                (
                    this.ApiCalls == input.ApiCalls ||
                    this.ApiCalls != null &&
                    input.ApiCalls != null &&
                    this.ApiCalls.SequenceEqual(input.ApiCalls)
                ) && 
                (
                    this.Campaigns == input.Campaigns ||
                    (this.Campaigns != null &&
                    this.Campaigns.Equals(input.Campaigns))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Revenue != null)
                    hashCode = hashCode * 59 + this.Revenue.GetHashCode();
                if (this.Discounts != null)
                    hashCode = hashCode * 59 + this.Discounts.GetHashCode();
                if (this.LoyaltyPoints != null)
                    hashCode = hashCode * 59 + this.LoyaltyPoints.GetHashCode();
                if (this.Referrals != null)
                    hashCode = hashCode * 59 + this.Referrals.GetHashCode();
                if (this.ApiCalls != null)
                    hashCode = hashCode * 59 + this.ApiCalls.GetHashCode();
                if (this.Campaigns != null)
                    hashCode = hashCode * 59 + this.Campaigns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
