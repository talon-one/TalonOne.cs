/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// RoleAssign
    /// </summary>
    [DataContract]
    public partial class RoleAssign :  IEquatable<RoleAssign>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleAssign" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RoleAssign() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleAssign" /> class.
        /// </summary>
        /// <param name="users">An array of userIDs (required).</param>
        /// <param name="roles">An array of roleIDs (required).</param>
        public RoleAssign(List<int> users = default(List<int>), List<int> roles = default(List<int>))
        {
            // to ensure "users" is required (not null)
            if (users == null)
            {
                throw new InvalidDataException("users is a required property for RoleAssign and cannot be null");
            }
            else
            {
                this.Users = users;
            }
            
            // to ensure "roles" is required (not null)
            if (roles == null)
            {
                throw new InvalidDataException("roles is a required property for RoleAssign and cannot be null");
            }
            else
            {
                this.Roles = roles;
            }
            
        }
        
        /// <summary>
        /// An array of userIDs
        /// </summary>
        /// <value>An array of userIDs</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<int> Users { get; set; }

        /// <summary>
        /// An array of roleIDs
        /// </summary>
        /// <value>An array of roleIDs</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<int> Roles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RoleAssign {\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoleAssign);
        }

        /// <summary>
        /// Returns true if RoleAssign instances are equal
        /// </summary>
        /// <param name="input">Instance of RoleAssign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoleAssign input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
