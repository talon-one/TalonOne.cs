/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// ReturnedCartItem
    /// </summary>
    [DataContract]
    public partial class ReturnedCartItem :  IEquatable<ReturnedCartItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnedCartItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReturnedCartItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnedCartItem" /> class.
        /// </summary>
        /// <param name="position">The index of the cart item in the provided customer session&#39;s &#x60;cartItems&#x60; property. (required).</param>
        /// <param name="quantity">Number of cart items to return. It is only available when [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items) is enabled. If cart item flattening is disabled, the cart item can only be returned in its entirety. .</param>
        public ReturnedCartItem(int position = default(int), int quantity = default(int))
        {
            this.Position = position;
            this.Quantity = quantity;
        }
        
        /// <summary>
        /// The index of the cart item in the provided customer session&#39;s &#x60;cartItems&#x60; property.
        /// </summary>
        /// <value>The index of the cart item in the provided customer session&#39;s &#x60;cartItems&#x60; property.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int Position { get; set; }

        /// <summary>
        /// Number of cart items to return. It is only available when [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items) is enabled. If cart item flattening is disabled, the cart item can only be returned in its entirety. 
        /// </summary>
        /// <value>Number of cart items to return. It is only available when [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items) is enabled. If cart item flattening is disabled, the cart item can only be returned in its entirety. </value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnedCartItem {\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReturnedCartItem);
        }

        /// <summary>
        /// Returns true if ReturnedCartItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReturnedCartItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnedCartItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Position.GetHashCode();
                hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
