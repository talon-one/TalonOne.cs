/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract]
    public partial class User :  IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// State of the user.
        /// </summary>
        /// <value>State of the user.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Invited for value: invited
            /// </summary>
            [EnumMember(Value = "invited")]
            Invited = 1,

            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 2,

            /// <summary>
            /// Enum Deactivated for value: deactivated
            /// </summary>
            [EnumMember(Value = "deactivated")]
            Deactivated = 3

        }

        /// <summary>
        /// State of the user.
        /// </summary>
        /// <value>State of the user.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected User() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">Internal ID of this entity. (required).</param>
        /// <param name="created">The time this entity was created. (required).</param>
        /// <param name="modified">The time this entity was last modified. (required).</param>
        /// <param name="email">The email address associated with the user profile. (required).</param>
        /// <param name="accountId">The ID of the account that owns this entity. (required).</param>
        /// <param name="name">Name of the user. (required).</param>
        /// <param name="state">State of the user. (required).</param>
        /// <param name="inviteToken">Invitation token of the user.  **Note**: If the user has already accepted their invitation, this is &#x60;null&#x60;.  (required).</param>
        /// <param name="isAdmin">Indicates whether the user is an &#x60;admin&#x60;..</param>
        /// <param name="policy">Access level of the user. (required).</param>
        /// <param name="roles">A list of the IDs of the roles assigned to the user..</param>
        /// <param name="authMethod">Authentication method for this user..</param>
        /// <param name="applicationNotificationSubscriptions">Application notifications that the user is subscribed to..</param>
        /// <param name="lastSignedIn">Timestamp when the user last signed in to Talon.One..</param>
        /// <param name="lastAccessed">Timestamp of the user&#39;s last activity after signing in to Talon.One..</param>
        /// <param name="latestFeedTimestamp">Timestamp when the user was notified for feed..</param>
        /// <param name="additionalAttributes">Additional user attributes, created and used by external identity providers..</param>
        public User(int id = default(int), DateTime created = default(DateTime), DateTime modified = default(DateTime), string email = default(string), int accountId = default(int), string name = default(string), StateEnum state = default(StateEnum), string inviteToken = default(string), bool isAdmin = default(bool), Object policy = default(Object), List<int> roles = default(List<int>), string authMethod = default(string), Object applicationNotificationSubscriptions = default(Object), DateTime lastSignedIn = default(DateTime), DateTime lastAccessed = default(DateTime), DateTime latestFeedTimestamp = default(DateTime), Object additionalAttributes = default(Object))
        {
            this.Id = id;
            this.Created = created;
            this.Modified = modified;
            // to ensure "email" is required (not null)
            this.Email = email ?? throw new ArgumentNullException("email is a required property for User and cannot be null");
            this.AccountId = accountId;
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for User and cannot be null");
            this.State = state;
            // to ensure "inviteToken" is required (not null)
            this.InviteToken = inviteToken ?? throw new ArgumentNullException("inviteToken is a required property for User and cannot be null");
            // to ensure "policy" is required (not null)
            this.Policy = policy ?? throw new ArgumentNullException("policy is a required property for User and cannot be null");
            this.IsAdmin = isAdmin;
            this.Roles = roles;
            this.AuthMethod = authMethod;
            this.ApplicationNotificationSubscriptions = applicationNotificationSubscriptions;
            this.LastSignedIn = lastSignedIn;
            this.LastAccessed = lastAccessed;
            this.LatestFeedTimestamp = latestFeedTimestamp;
            this.AdditionalAttributes = additionalAttributes;
        }
        
        /// <summary>
        /// Internal ID of this entity.
        /// </summary>
        /// <value>Internal ID of this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The time this entity was created.
        /// </summary>
        /// <value>The time this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The time this entity was last modified.
        /// </summary>
        /// <value>The time this entity was last modified.</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// The email address associated with the user profile.
        /// </summary>
        /// <value>The email address associated with the user profile.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The ID of the account that owns this entity.
        /// </summary>
        /// <value>The ID of the account that owns this entity.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int AccountId { get; set; }

        /// <summary>
        /// Name of the user.
        /// </summary>
        /// <value>Name of the user.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Invitation token of the user.  **Note**: If the user has already accepted their invitation, this is &#x60;null&#x60;. 
        /// </summary>
        /// <value>Invitation token of the user.  **Note**: If the user has already accepted their invitation, this is &#x60;null&#x60;. </value>
        [DataMember(Name="inviteToken", EmitDefaultValue=false)]
        public string InviteToken { get; set; }

        /// <summary>
        /// Indicates whether the user is an &#x60;admin&#x60;.
        /// </summary>
        /// <value>Indicates whether the user is an &#x60;admin&#x60;.</value>
        [DataMember(Name="isAdmin", EmitDefaultValue=false)]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// Access level of the user.
        /// </summary>
        /// <value>Access level of the user.</value>
        [DataMember(Name="policy", EmitDefaultValue=false)]
        public Object Policy { get; set; }

        /// <summary>
        /// A list of the IDs of the roles assigned to the user.
        /// </summary>
        /// <value>A list of the IDs of the roles assigned to the user.</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<int> Roles { get; set; }

        /// <summary>
        /// Authentication method for this user.
        /// </summary>
        /// <value>Authentication method for this user.</value>
        [DataMember(Name="authMethod", EmitDefaultValue=false)]
        public string AuthMethod { get; set; }

        /// <summary>
        /// Application notifications that the user is subscribed to.
        /// </summary>
        /// <value>Application notifications that the user is subscribed to.</value>
        [DataMember(Name="applicationNotificationSubscriptions", EmitDefaultValue=false)]
        public Object ApplicationNotificationSubscriptions { get; set; }

        /// <summary>
        /// Timestamp when the user last signed in to Talon.One.
        /// </summary>
        /// <value>Timestamp when the user last signed in to Talon.One.</value>
        [DataMember(Name="lastSignedIn", EmitDefaultValue=false)]
        public DateTime LastSignedIn { get; set; }

        /// <summary>
        /// Timestamp of the user&#39;s last activity after signing in to Talon.One.
        /// </summary>
        /// <value>Timestamp of the user&#39;s last activity after signing in to Talon.One.</value>
        [DataMember(Name="lastAccessed", EmitDefaultValue=false)]
        public DateTime LastAccessed { get; set; }

        /// <summary>
        /// Timestamp when the user was notified for feed.
        /// </summary>
        /// <value>Timestamp when the user was notified for feed.</value>
        [DataMember(Name="latestFeedTimestamp", EmitDefaultValue=false)]
        public DateTime LatestFeedTimestamp { get; set; }

        /// <summary>
        /// Additional user attributes, created and used by external identity providers.
        /// </summary>
        /// <value>Additional user attributes, created and used by external identity providers.</value>
        [DataMember(Name="additionalAttributes", EmitDefaultValue=false)]
        public Object AdditionalAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  InviteToken: ").Append(InviteToken).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  AuthMethod: ").Append(AuthMethod).Append("\n");
            sb.Append("  ApplicationNotificationSubscriptions: ").Append(ApplicationNotificationSubscriptions).Append("\n");
            sb.Append("  LastSignedIn: ").Append(LastSignedIn).Append("\n");
            sb.Append("  LastAccessed: ").Append(LastAccessed).Append("\n");
            sb.Append("  LatestFeedTimestamp: ").Append(LatestFeedTimestamp).Append("\n");
            sb.Append("  AdditionalAttributes: ").Append(AdditionalAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId.Equals(input.AccountId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.InviteToken == input.InviteToken ||
                    (this.InviteToken != null &&
                    this.InviteToken.Equals(input.InviteToken))
                ) && 
                (
                    this.IsAdmin == input.IsAdmin ||
                    this.IsAdmin.Equals(input.IsAdmin)
                ) && 
                (
                    this.Policy == input.Policy ||
                    (this.Policy != null &&
                    this.Policy.Equals(input.Policy))
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                ) && 
                (
                    this.AuthMethod == input.AuthMethod ||
                    (this.AuthMethod != null &&
                    this.AuthMethod.Equals(input.AuthMethod))
                ) && 
                (
                    this.ApplicationNotificationSubscriptions == input.ApplicationNotificationSubscriptions ||
                    (this.ApplicationNotificationSubscriptions != null &&
                    this.ApplicationNotificationSubscriptions.Equals(input.ApplicationNotificationSubscriptions))
                ) && 
                (
                    this.LastSignedIn == input.LastSignedIn ||
                    (this.LastSignedIn != null &&
                    this.LastSignedIn.Equals(input.LastSignedIn))
                ) && 
                (
                    this.LastAccessed == input.LastAccessed ||
                    (this.LastAccessed != null &&
                    this.LastAccessed.Equals(input.LastAccessed))
                ) && 
                (
                    this.LatestFeedTimestamp == input.LatestFeedTimestamp ||
                    (this.LatestFeedTimestamp != null &&
                    this.LatestFeedTimestamp.Equals(input.LatestFeedTimestamp))
                ) && 
                (
                    this.AdditionalAttributes == input.AdditionalAttributes ||
                    (this.AdditionalAttributes != null &&
                    this.AdditionalAttributes.Equals(input.AdditionalAttributes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.InviteToken != null)
                    hashCode = hashCode * 59 + this.InviteToken.GetHashCode();
                hashCode = hashCode * 59 + this.IsAdmin.GetHashCode();
                if (this.Policy != null)
                    hashCode = hashCode * 59 + this.Policy.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                if (this.AuthMethod != null)
                    hashCode = hashCode * 59 + this.AuthMethod.GetHashCode();
                if (this.ApplicationNotificationSubscriptions != null)
                    hashCode = hashCode * 59 + this.ApplicationNotificationSubscriptions.GetHashCode();
                if (this.LastSignedIn != null)
                    hashCode = hashCode * 59 + this.LastSignedIn.GetHashCode();
                if (this.LastAccessed != null)
                    hashCode = hashCode * 59 + this.LastAccessed.GetHashCode();
                if (this.LatestFeedTimestamp != null)
                    hashCode = hashCode * 59 + this.LatestFeedTimestamp.GetHashCode();
                if (this.AdditionalAttributes != null)
                    hashCode = hashCode * 59 + this.AdditionalAttributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
