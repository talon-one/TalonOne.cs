/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TalonOne.Client.SwaggerDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Log of activated webhooks
    /// </summary>
    [DataContract]
    public partial class WebhookActivationLogEntry :  IEquatable<WebhookActivationLogEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookActivationLogEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebhookActivationLogEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookActivationLogEntry" /> class.
        /// </summary>
        /// <param name="integrationRequestUuid">UUID reference of the integration request that triggered the effect with the webhook (required).</param>
        /// <param name="webhookId">ID of the webhook that triggered the request (required).</param>
        /// <param name="applicationId">ID of the application that triggered the webhook (required).</param>
        /// <param name="campaignId">ID of the campaign that triggered the webhook (required).</param>
        /// <param name="created">Timestamp of request (required).</param>
        public WebhookActivationLogEntry(string integrationRequestUuid = default(string), int? webhookId = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), DateTime? created = default(DateTime?))
        {
            // to ensure "integrationRequestUuid" is required (not null)
            if (integrationRequestUuid == null)
            {
                throw new InvalidDataException("integrationRequestUuid is a required property for WebhookActivationLogEntry and cannot be null");
            }
            else
            {
                this.IntegrationRequestUuid = integrationRequestUuid;
            }
            // to ensure "webhookId" is required (not null)
            if (webhookId == null)
            {
                throw new InvalidDataException("webhookId is a required property for WebhookActivationLogEntry and cannot be null");
            }
            else
            {
                this.WebhookId = webhookId;
            }
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new InvalidDataException("applicationId is a required property for WebhookActivationLogEntry and cannot be null");
            }
            else
            {
                this.ApplicationId = applicationId;
            }
            // to ensure "campaignId" is required (not null)
            if (campaignId == null)
            {
                throw new InvalidDataException("campaignId is a required property for WebhookActivationLogEntry and cannot be null");
            }
            else
            {
                this.CampaignId = campaignId;
            }
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new InvalidDataException("created is a required property for WebhookActivationLogEntry and cannot be null");
            }
            else
            {
                this.Created = created;
            }
        }
        
        /// <summary>
        /// UUID reference of the integration request that triggered the effect with the webhook
        /// </summary>
        /// <value>UUID reference of the integration request that triggered the effect with the webhook</value>
        [DataMember(Name="integrationRequestUuid", EmitDefaultValue=false)]
        public string IntegrationRequestUuid { get; set; }

        /// <summary>
        /// ID of the webhook that triggered the request
        /// </summary>
        /// <value>ID of the webhook that triggered the request</value>
        [DataMember(Name="webhookId", EmitDefaultValue=false)]
        public int? WebhookId { get; set; }

        /// <summary>
        /// ID of the application that triggered the webhook
        /// </summary>
        /// <value>ID of the application that triggered the webhook</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int? ApplicationId { get; set; }

        /// <summary>
        /// ID of the campaign that triggered the webhook
        /// </summary>
        /// <value>ID of the campaign that triggered the webhook</value>
        [DataMember(Name="campaignId", EmitDefaultValue=false)]
        public int? CampaignId { get; set; }

        /// <summary>
        /// Timestamp of request
        /// </summary>
        /// <value>Timestamp of request</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookActivationLogEntry {\n");
            sb.Append("  IntegrationRequestUuid: ").Append(IntegrationRequestUuid).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookActivationLogEntry);
        }

        /// <summary>
        /// Returns true if WebhookActivationLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookActivationLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookActivationLogEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IntegrationRequestUuid == input.IntegrationRequestUuid ||
                    (this.IntegrationRequestUuid != null &&
                    this.IntegrationRequestUuid.Equals(input.IntegrationRequestUuid))
                ) && 
                (
                    this.WebhookId == input.WebhookId ||
                    (this.WebhookId != null &&
                    this.WebhookId.Equals(input.WebhookId))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IntegrationRequestUuid != null)
                    hashCode = hashCode * 59 + this.IntegrationRequestUuid.GetHashCode();
                if (this.WebhookId != null)
                    hashCode = hashCode * 59 + this.WebhookId.GetHashCode();
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.CampaignId != null)
                    hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
