/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CustomerInventory
    /// </summary>
    [DataContract]
    public partial class CustomerInventory :  IEquatable<CustomerInventory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerInventory" /> class.
        /// </summary>
        /// <param name="profile">profile.</param>
        /// <param name="loyalty">loyalty.</param>
        /// <param name="referrals">referrals.</param>
        /// <param name="coupons">The coupons reserved by this profile. This array includes hard and soft reservations. See each coupon&#39;s &#x60;reservation&#x60; property. .</param>
        /// <param name="giveaways">giveaways.</param>
        public CustomerInventory(CustomerProfile profile = default(CustomerProfile), Loyalty loyalty = default(Loyalty), List<InventoryReferral> referrals = default(List<InventoryReferral>), List<InventoryCoupon> coupons = default(List<InventoryCoupon>), List<Giveaway> giveaways = default(List<Giveaway>))
        {
            this.Profile = profile;
            this.Loyalty = loyalty;
            this.Referrals = referrals;
            this.Coupons = coupons;
            this.Giveaways = giveaways;
        }
        
        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public CustomerProfile Profile { get; set; }

        /// <summary>
        /// Gets or Sets Loyalty
        /// </summary>
        [DataMember(Name="loyalty", EmitDefaultValue=false)]
        public Loyalty Loyalty { get; set; }

        /// <summary>
        /// Gets or Sets Referrals
        /// </summary>
        [DataMember(Name="referrals", EmitDefaultValue=false)]
        public List<InventoryReferral> Referrals { get; set; }

        /// <summary>
        /// The coupons reserved by this profile. This array includes hard and soft reservations. See each coupon&#39;s &#x60;reservation&#x60; property. 
        /// </summary>
        /// <value>The coupons reserved by this profile. This array includes hard and soft reservations. See each coupon&#39;s &#x60;reservation&#x60; property. </value>
        [DataMember(Name="coupons", EmitDefaultValue=false)]
        public List<InventoryCoupon> Coupons { get; set; }

        /// <summary>
        /// Gets or Sets Giveaways
        /// </summary>
        [DataMember(Name="giveaways", EmitDefaultValue=false)]
        public List<Giveaway> Giveaways { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerInventory {\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Loyalty: ").Append(Loyalty).Append("\n");
            sb.Append("  Referrals: ").Append(Referrals).Append("\n");
            sb.Append("  Coupons: ").Append(Coupons).Append("\n");
            sb.Append("  Giveaways: ").Append(Giveaways).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerInventory);
        }

        /// <summary>
        /// Returns true if CustomerInventory instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerInventory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerInventory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Loyalty == input.Loyalty ||
                    (this.Loyalty != null &&
                    this.Loyalty.Equals(input.Loyalty))
                ) && 
                (
                    this.Referrals == input.Referrals ||
                    this.Referrals != null &&
                    input.Referrals != null &&
                    this.Referrals.SequenceEqual(input.Referrals)
                ) && 
                (
                    this.Coupons == input.Coupons ||
                    this.Coupons != null &&
                    input.Coupons != null &&
                    this.Coupons.SequenceEqual(input.Coupons)
                ) && 
                (
                    this.Giveaways == input.Giveaways ||
                    this.Giveaways != null &&
                    input.Giveaways != null &&
                    this.Giveaways.SequenceEqual(input.Giveaways)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.Loyalty != null)
                    hashCode = hashCode * 59 + this.Loyalty.GetHashCode();
                if (this.Referrals != null)
                    hashCode = hashCode * 59 + this.Referrals.GetHashCode();
                if (this.Coupons != null)
                    hashCode = hashCode * 59 + this.Coupons.GetHashCode();
                if (this.Giveaways != null)
                    hashCode = hashCode * 59 + this.Giveaways.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
