/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Meta
    /// </summary>
    [DataContract]
    public partial class Meta :  IEquatable<Meta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Meta" /> class.
        /// </summary>
        /// <param name="campaigns">Maps each evaluated campaign ID to a key-value list of that campaigns attributes. Campaigns without attributes will be omitted..</param>
        /// <param name="coupons">Maps the coupon value to a key-value list of that coupons attributes..</param>
        /// <param name="couponRejectionReason">couponRejectionReason.</param>
        /// <param name="referralRejectionReason">referralRejectionReason.</param>
        /// <param name="warnings">Contains warnings about possible misuse..</param>
        public Meta(Object campaigns = default(Object), Object coupons = default(Object), CouponRejectionReason couponRejectionReason = default(CouponRejectionReason), ReferralRejectionReason referralRejectionReason = default(ReferralRejectionReason), Object warnings = default(Object))
        {
            this.Campaigns = campaigns;
            this.Coupons = coupons;
            this.CouponRejectionReason = couponRejectionReason;
            this.ReferralRejectionReason = referralRejectionReason;
            this.Warnings = warnings;
        }
        
        /// <summary>
        /// Maps each evaluated campaign ID to a key-value list of that campaigns attributes. Campaigns without attributes will be omitted.
        /// </summary>
        /// <value>Maps each evaluated campaign ID to a key-value list of that campaigns attributes. Campaigns without attributes will be omitted.</value>
        [DataMember(Name="campaigns", EmitDefaultValue=false)]
        public Object Campaigns { get; set; }

        /// <summary>
        /// Maps the coupon value to a key-value list of that coupons attributes.
        /// </summary>
        /// <value>Maps the coupon value to a key-value list of that coupons attributes.</value>
        [DataMember(Name="coupons", EmitDefaultValue=false)]
        public Object Coupons { get; set; }

        /// <summary>
        /// Gets or Sets CouponRejectionReason
        /// </summary>
        [DataMember(Name="couponRejectionReason", EmitDefaultValue=false)]
        public CouponRejectionReason CouponRejectionReason { get; set; }

        /// <summary>
        /// Gets or Sets ReferralRejectionReason
        /// </summary>
        [DataMember(Name="referralRejectionReason", EmitDefaultValue=false)]
        public ReferralRejectionReason ReferralRejectionReason { get; set; }

        /// <summary>
        /// Contains warnings about possible misuse.
        /// </summary>
        /// <value>Contains warnings about possible misuse.</value>
        [DataMember(Name="warnings", EmitDefaultValue=false)]
        public Object Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Meta {\n");
            sb.Append("  Campaigns: ").Append(Campaigns).Append("\n");
            sb.Append("  Coupons: ").Append(Coupons).Append("\n");
            sb.Append("  CouponRejectionReason: ").Append(CouponRejectionReason).Append("\n");
            sb.Append("  ReferralRejectionReason: ").Append(ReferralRejectionReason).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Meta);
        }

        /// <summary>
        /// Returns true if Meta instances are equal
        /// </summary>
        /// <param name="input">Instance of Meta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Meta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Campaigns == input.Campaigns ||
                    (this.Campaigns != null &&
                    this.Campaigns.Equals(input.Campaigns))
                ) && 
                (
                    this.Coupons == input.Coupons ||
                    (this.Coupons != null &&
                    this.Coupons.Equals(input.Coupons))
                ) && 
                (
                    this.CouponRejectionReason == input.CouponRejectionReason ||
                    (this.CouponRejectionReason != null &&
                    this.CouponRejectionReason.Equals(input.CouponRejectionReason))
                ) && 
                (
                    this.ReferralRejectionReason == input.ReferralRejectionReason ||
                    (this.ReferralRejectionReason != null &&
                    this.ReferralRejectionReason.Equals(input.ReferralRejectionReason))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    (this.Warnings != null &&
                    this.Warnings.Equals(input.Warnings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Campaigns != null)
                    hashCode = hashCode * 59 + this.Campaigns.GetHashCode();
                if (this.Coupons != null)
                    hashCode = hashCode * 59 + this.Coupons.GetHashCode();
                if (this.CouponRejectionReason != null)
                    hashCode = hashCode * 59 + this.CouponRejectionReason.GetHashCode();
                if (this.ReferralRejectionReason != null)
                    hashCode = hashCode * 59 + this.ReferralRejectionReason.GetHashCode();
                if (this.Warnings != null)
                    hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
