/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CampaignVersions
    /// </summary>
    [DataContract]
    public partial class CampaignVersions :  IEquatable<CampaignVersions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignVersions" /> class.
        /// </summary>
        /// <param name="activeRevisionId">ID of the revision that was last activated on this campaign. .</param>
        /// <param name="activeRevisionVersionId">ID of the revision version that is active on the campaign. .</param>
        /// <param name="version">Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign. .</param>
        /// <param name="currentRevisionId">ID of the revision currently being modified for the campaign. .</param>
        /// <param name="currentRevisionVersionId">ID of the latest version applied on the current revision. .</param>
        /// <param name="stageRevision">Flag for determining whether we use current revision when sending requests with staging API key.  (default to false).</param>
        public CampaignVersions(int activeRevisionId = default(int), int activeRevisionVersionId = default(int), int version = default(int), int currentRevisionId = default(int), int currentRevisionVersionId = default(int), bool stageRevision = false)
        {
            this.ActiveRevisionId = activeRevisionId;
            this.ActiveRevisionVersionId = activeRevisionVersionId;
            this.Version = version;
            this.CurrentRevisionId = currentRevisionId;
            this.CurrentRevisionVersionId = currentRevisionVersionId;
            this.StageRevision = stageRevision;
        }
        
        /// <summary>
        /// ID of the revision that was last activated on this campaign. 
        /// </summary>
        /// <value>ID of the revision that was last activated on this campaign. </value>
        [DataMember(Name="activeRevisionId", EmitDefaultValue=false)]
        public int ActiveRevisionId { get; set; }

        /// <summary>
        /// ID of the revision version that is active on the campaign. 
        /// </summary>
        /// <value>ID of the revision version that is active on the campaign. </value>
        [DataMember(Name="activeRevisionVersionId", EmitDefaultValue=false)]
        public int ActiveRevisionVersionId { get; set; }

        /// <summary>
        /// Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign. 
        /// </summary>
        /// <value>Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign. </value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int Version { get; set; }

        /// <summary>
        /// ID of the revision currently being modified for the campaign. 
        /// </summary>
        /// <value>ID of the revision currently being modified for the campaign. </value>
        [DataMember(Name="currentRevisionId", EmitDefaultValue=false)]
        public int CurrentRevisionId { get; set; }

        /// <summary>
        /// ID of the latest version applied on the current revision. 
        /// </summary>
        /// <value>ID of the latest version applied on the current revision. </value>
        [DataMember(Name="currentRevisionVersionId", EmitDefaultValue=false)]
        public int CurrentRevisionVersionId { get; set; }

        /// <summary>
        /// Flag for determining whether we use current revision when sending requests with staging API key. 
        /// </summary>
        /// <value>Flag for determining whether we use current revision when sending requests with staging API key. </value>
        [DataMember(Name="stageRevision", EmitDefaultValue=false)]
        public bool StageRevision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CampaignVersions {\n");
            sb.Append("  ActiveRevisionId: ").Append(ActiveRevisionId).Append("\n");
            sb.Append("  ActiveRevisionVersionId: ").Append(ActiveRevisionVersionId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  CurrentRevisionId: ").Append(CurrentRevisionId).Append("\n");
            sb.Append("  CurrentRevisionVersionId: ").Append(CurrentRevisionVersionId).Append("\n");
            sb.Append("  StageRevision: ").Append(StageRevision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CampaignVersions);
        }

        /// <summary>
        /// Returns true if CampaignVersions instances are equal
        /// </summary>
        /// <param name="input">Instance of CampaignVersions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampaignVersions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveRevisionId == input.ActiveRevisionId ||
                    this.ActiveRevisionId.Equals(input.ActiveRevisionId)
                ) && 
                (
                    this.ActiveRevisionVersionId == input.ActiveRevisionVersionId ||
                    this.ActiveRevisionVersionId.Equals(input.ActiveRevisionVersionId)
                ) && 
                (
                    this.Version == input.Version ||
                    this.Version.Equals(input.Version)
                ) && 
                (
                    this.CurrentRevisionId == input.CurrentRevisionId ||
                    this.CurrentRevisionId.Equals(input.CurrentRevisionId)
                ) && 
                (
                    this.CurrentRevisionVersionId == input.CurrentRevisionVersionId ||
                    this.CurrentRevisionVersionId.Equals(input.CurrentRevisionVersionId)
                ) && 
                (
                    this.StageRevision == input.StageRevision ||
                    this.StageRevision.Equals(input.StageRevision)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ActiveRevisionId.GetHashCode();
                hashCode = hashCode * 59 + this.ActiveRevisionVersionId.GetHashCode();
                hashCode = hashCode * 59 + this.Version.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentRevisionId.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentRevisionVersionId.GetHashCode();
                hashCode = hashCode * 59 + this.StageRevision.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
