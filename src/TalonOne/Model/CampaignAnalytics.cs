/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TalonOne.Client.SwaggerDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CampaignAnalytics
    /// </summary>
    [DataContract]
    public partial class CampaignAnalytics :  IEquatable<CampaignAnalytics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignAnalytics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CampaignAnalytics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignAnalytics" /> class.
        /// </summary>
        /// <param name="date">date (required).</param>
        /// <param name="campaignRevenue">Amount of revenue in this campaign (for coupon or discount sessions). (required).</param>
        /// <param name="totalCampaignRevenue">Amount of revenue in this campaign since it began (for coupon or discount sessions). (required).</param>
        /// <param name="campaignRefund">Amount of refunds in this campaign (for coupon or discount sessions). (required).</param>
        /// <param name="totalCampaignRefund">Amount of refunds in this campaign since it began (for coupon or discount sessions). (required).</param>
        /// <param name="campaignDiscountCosts">Amount of cost caused by discounts given in the campaign. (required).</param>
        /// <param name="totalCampaignDiscountCosts">Amount of cost caused by discounts given in the campaign since it began. (required).</param>
        /// <param name="campaignRefundedDiscounts">Amount of discounts rolledback due to refund in the campaign. (required).</param>
        /// <param name="totalCampaignRefundedDiscounts">Amount of discounts rolledback due to refund in the campaign since it began. (required).</param>
        /// <param name="campaignFreeItems">Amount of free items given in the campaign. (required).</param>
        /// <param name="totalCampaignFreeItems">Amount of free items given in the campaign since it began. (required).</param>
        /// <param name="couponRedemptions">Number of coupon redemptions in the campaign. (required).</param>
        /// <param name="totalCouponRedemptions">Number of coupon redemptions in the campaign since it began. (required).</param>
        /// <param name="couponRolledbackRedemptions">Number of coupon redemptions that have been rolled back (due to canceling closed session) in the campaign. (required).</param>
        /// <param name="totalCouponRolledbackRedemptions">Number of coupon redemptions that have been rolled back (due to canceling closed session) in the campaign since it began. (required).</param>
        /// <param name="referralRedemptions">Number of referral redemptions in the campaign. (required).</param>
        /// <param name="totalReferralRedemptions">Number of referral redemptions in the campaign since it began. (required).</param>
        /// <param name="couponsCreated">Number of coupons created in the campaign by the rule engine. (required).</param>
        /// <param name="totalCouponsCreated">Number of coupons created in the campaign by the rule engine since it began. (required).</param>
        /// <param name="referralsCreated">Number of referrals created in the campaign by the rule engine. (required).</param>
        /// <param name="totalReferralsCreated">Number of referrals created in the campaign by the rule engine since it began. (required).</param>
        public CampaignAnalytics(DateTime? date = default(DateTime?), decimal? campaignRevenue = default(decimal?), decimal? totalCampaignRevenue = default(decimal?), decimal? campaignRefund = default(decimal?), decimal? totalCampaignRefund = default(decimal?), decimal? campaignDiscountCosts = default(decimal?), decimal? totalCampaignDiscountCosts = default(decimal?), decimal? campaignRefundedDiscounts = default(decimal?), decimal? totalCampaignRefundedDiscounts = default(decimal?), int? campaignFreeItems = default(int?), int? totalCampaignFreeItems = default(int?), int? couponRedemptions = default(int?), int? totalCouponRedemptions = default(int?), int? couponRolledbackRedemptions = default(int?), int? totalCouponRolledbackRedemptions = default(int?), int? referralRedemptions = default(int?), int? totalReferralRedemptions = default(int?), int? couponsCreated = default(int?), int? totalCouponsCreated = default(int?), int? referralsCreated = default(int?), int? totalReferralsCreated = default(int?))
        {
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "campaignRevenue" is required (not null)
            if (campaignRevenue == null)
            {
                throw new InvalidDataException("campaignRevenue is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.CampaignRevenue = campaignRevenue;
            }
            // to ensure "totalCampaignRevenue" is required (not null)
            if (totalCampaignRevenue == null)
            {
                throw new InvalidDataException("totalCampaignRevenue is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.TotalCampaignRevenue = totalCampaignRevenue;
            }
            // to ensure "campaignRefund" is required (not null)
            if (campaignRefund == null)
            {
                throw new InvalidDataException("campaignRefund is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.CampaignRefund = campaignRefund;
            }
            // to ensure "totalCampaignRefund" is required (not null)
            if (totalCampaignRefund == null)
            {
                throw new InvalidDataException("totalCampaignRefund is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.TotalCampaignRefund = totalCampaignRefund;
            }
            // to ensure "campaignDiscountCosts" is required (not null)
            if (campaignDiscountCosts == null)
            {
                throw new InvalidDataException("campaignDiscountCosts is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.CampaignDiscountCosts = campaignDiscountCosts;
            }
            // to ensure "totalCampaignDiscountCosts" is required (not null)
            if (totalCampaignDiscountCosts == null)
            {
                throw new InvalidDataException("totalCampaignDiscountCosts is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.TotalCampaignDiscountCosts = totalCampaignDiscountCosts;
            }
            // to ensure "campaignRefundedDiscounts" is required (not null)
            if (campaignRefundedDiscounts == null)
            {
                throw new InvalidDataException("campaignRefundedDiscounts is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.CampaignRefundedDiscounts = campaignRefundedDiscounts;
            }
            // to ensure "totalCampaignRefundedDiscounts" is required (not null)
            if (totalCampaignRefundedDiscounts == null)
            {
                throw new InvalidDataException("totalCampaignRefundedDiscounts is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.TotalCampaignRefundedDiscounts = totalCampaignRefundedDiscounts;
            }
            // to ensure "campaignFreeItems" is required (not null)
            if (campaignFreeItems == null)
            {
                throw new InvalidDataException("campaignFreeItems is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.CampaignFreeItems = campaignFreeItems;
            }
            // to ensure "totalCampaignFreeItems" is required (not null)
            if (totalCampaignFreeItems == null)
            {
                throw new InvalidDataException("totalCampaignFreeItems is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.TotalCampaignFreeItems = totalCampaignFreeItems;
            }
            // to ensure "couponRedemptions" is required (not null)
            if (couponRedemptions == null)
            {
                throw new InvalidDataException("couponRedemptions is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.CouponRedemptions = couponRedemptions;
            }
            // to ensure "totalCouponRedemptions" is required (not null)
            if (totalCouponRedemptions == null)
            {
                throw new InvalidDataException("totalCouponRedemptions is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.TotalCouponRedemptions = totalCouponRedemptions;
            }
            // to ensure "couponRolledbackRedemptions" is required (not null)
            if (couponRolledbackRedemptions == null)
            {
                throw new InvalidDataException("couponRolledbackRedemptions is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.CouponRolledbackRedemptions = couponRolledbackRedemptions;
            }
            // to ensure "totalCouponRolledbackRedemptions" is required (not null)
            if (totalCouponRolledbackRedemptions == null)
            {
                throw new InvalidDataException("totalCouponRolledbackRedemptions is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.TotalCouponRolledbackRedemptions = totalCouponRolledbackRedemptions;
            }
            // to ensure "referralRedemptions" is required (not null)
            if (referralRedemptions == null)
            {
                throw new InvalidDataException("referralRedemptions is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.ReferralRedemptions = referralRedemptions;
            }
            // to ensure "totalReferralRedemptions" is required (not null)
            if (totalReferralRedemptions == null)
            {
                throw new InvalidDataException("totalReferralRedemptions is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.TotalReferralRedemptions = totalReferralRedemptions;
            }
            // to ensure "couponsCreated" is required (not null)
            if (couponsCreated == null)
            {
                throw new InvalidDataException("couponsCreated is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.CouponsCreated = couponsCreated;
            }
            // to ensure "totalCouponsCreated" is required (not null)
            if (totalCouponsCreated == null)
            {
                throw new InvalidDataException("totalCouponsCreated is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.TotalCouponsCreated = totalCouponsCreated;
            }
            // to ensure "referralsCreated" is required (not null)
            if (referralsCreated == null)
            {
                throw new InvalidDataException("referralsCreated is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.ReferralsCreated = referralsCreated;
            }
            // to ensure "totalReferralsCreated" is required (not null)
            if (totalReferralsCreated == null)
            {
                throw new InvalidDataException("totalReferralsCreated is a required property for CampaignAnalytics and cannot be null");
            }
            else
            {
                this.TotalReferralsCreated = totalReferralsCreated;
            }
        }
        
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Amount of revenue in this campaign (for coupon or discount sessions).
        /// </summary>
        /// <value>Amount of revenue in this campaign (for coupon or discount sessions).</value>
        [DataMember(Name="campaignRevenue", EmitDefaultValue=false)]
        public decimal? CampaignRevenue { get; set; }

        /// <summary>
        /// Amount of revenue in this campaign since it began (for coupon or discount sessions).
        /// </summary>
        /// <value>Amount of revenue in this campaign since it began (for coupon or discount sessions).</value>
        [DataMember(Name="totalCampaignRevenue", EmitDefaultValue=false)]
        public decimal? TotalCampaignRevenue { get; set; }

        /// <summary>
        /// Amount of refunds in this campaign (for coupon or discount sessions).
        /// </summary>
        /// <value>Amount of refunds in this campaign (for coupon or discount sessions).</value>
        [DataMember(Name="campaignRefund", EmitDefaultValue=false)]
        public decimal? CampaignRefund { get; set; }

        /// <summary>
        /// Amount of refunds in this campaign since it began (for coupon or discount sessions).
        /// </summary>
        /// <value>Amount of refunds in this campaign since it began (for coupon or discount sessions).</value>
        [DataMember(Name="totalCampaignRefund", EmitDefaultValue=false)]
        public decimal? TotalCampaignRefund { get; set; }

        /// <summary>
        /// Amount of cost caused by discounts given in the campaign.
        /// </summary>
        /// <value>Amount of cost caused by discounts given in the campaign.</value>
        [DataMember(Name="campaignDiscountCosts", EmitDefaultValue=false)]
        public decimal? CampaignDiscountCosts { get; set; }

        /// <summary>
        /// Amount of cost caused by discounts given in the campaign since it began.
        /// </summary>
        /// <value>Amount of cost caused by discounts given in the campaign since it began.</value>
        [DataMember(Name="totalCampaignDiscountCosts", EmitDefaultValue=false)]
        public decimal? TotalCampaignDiscountCosts { get; set; }

        /// <summary>
        /// Amount of discounts rolledback due to refund in the campaign.
        /// </summary>
        /// <value>Amount of discounts rolledback due to refund in the campaign.</value>
        [DataMember(Name="campaignRefundedDiscounts", EmitDefaultValue=false)]
        public decimal? CampaignRefundedDiscounts { get; set; }

        /// <summary>
        /// Amount of discounts rolledback due to refund in the campaign since it began.
        /// </summary>
        /// <value>Amount of discounts rolledback due to refund in the campaign since it began.</value>
        [DataMember(Name="totalCampaignRefundedDiscounts", EmitDefaultValue=false)]
        public decimal? TotalCampaignRefundedDiscounts { get; set; }

        /// <summary>
        /// Amount of free items given in the campaign.
        /// </summary>
        /// <value>Amount of free items given in the campaign.</value>
        [DataMember(Name="campaignFreeItems", EmitDefaultValue=false)]
        public int? CampaignFreeItems { get; set; }

        /// <summary>
        /// Amount of free items given in the campaign since it began.
        /// </summary>
        /// <value>Amount of free items given in the campaign since it began.</value>
        [DataMember(Name="totalCampaignFreeItems", EmitDefaultValue=false)]
        public int? TotalCampaignFreeItems { get; set; }

        /// <summary>
        /// Number of coupon redemptions in the campaign.
        /// </summary>
        /// <value>Number of coupon redemptions in the campaign.</value>
        [DataMember(Name="couponRedemptions", EmitDefaultValue=false)]
        public int? CouponRedemptions { get; set; }

        /// <summary>
        /// Number of coupon redemptions in the campaign since it began.
        /// </summary>
        /// <value>Number of coupon redemptions in the campaign since it began.</value>
        [DataMember(Name="totalCouponRedemptions", EmitDefaultValue=false)]
        public int? TotalCouponRedemptions { get; set; }

        /// <summary>
        /// Number of coupon redemptions that have been rolled back (due to canceling closed session) in the campaign.
        /// </summary>
        /// <value>Number of coupon redemptions that have been rolled back (due to canceling closed session) in the campaign.</value>
        [DataMember(Name="couponRolledbackRedemptions", EmitDefaultValue=false)]
        public int? CouponRolledbackRedemptions { get; set; }

        /// <summary>
        /// Number of coupon redemptions that have been rolled back (due to canceling closed session) in the campaign since it began.
        /// </summary>
        /// <value>Number of coupon redemptions that have been rolled back (due to canceling closed session) in the campaign since it began.</value>
        [DataMember(Name="totalCouponRolledbackRedemptions", EmitDefaultValue=false)]
        public int? TotalCouponRolledbackRedemptions { get; set; }

        /// <summary>
        /// Number of referral redemptions in the campaign.
        /// </summary>
        /// <value>Number of referral redemptions in the campaign.</value>
        [DataMember(Name="referralRedemptions", EmitDefaultValue=false)]
        public int? ReferralRedemptions { get; set; }

        /// <summary>
        /// Number of referral redemptions in the campaign since it began.
        /// </summary>
        /// <value>Number of referral redemptions in the campaign since it began.</value>
        [DataMember(Name="totalReferralRedemptions", EmitDefaultValue=false)]
        public int? TotalReferralRedemptions { get; set; }

        /// <summary>
        /// Number of coupons created in the campaign by the rule engine.
        /// </summary>
        /// <value>Number of coupons created in the campaign by the rule engine.</value>
        [DataMember(Name="couponsCreated", EmitDefaultValue=false)]
        public int? CouponsCreated { get; set; }

        /// <summary>
        /// Number of coupons created in the campaign by the rule engine since it began.
        /// </summary>
        /// <value>Number of coupons created in the campaign by the rule engine since it began.</value>
        [DataMember(Name="totalCouponsCreated", EmitDefaultValue=false)]
        public int? TotalCouponsCreated { get; set; }

        /// <summary>
        /// Number of referrals created in the campaign by the rule engine.
        /// </summary>
        /// <value>Number of referrals created in the campaign by the rule engine.</value>
        [DataMember(Name="referralsCreated", EmitDefaultValue=false)]
        public int? ReferralsCreated { get; set; }

        /// <summary>
        /// Number of referrals created in the campaign by the rule engine since it began.
        /// </summary>
        /// <value>Number of referrals created in the campaign by the rule engine since it began.</value>
        [DataMember(Name="totalReferralsCreated", EmitDefaultValue=false)]
        public int? TotalReferralsCreated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CampaignAnalytics {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  CampaignRevenue: ").Append(CampaignRevenue).Append("\n");
            sb.Append("  TotalCampaignRevenue: ").Append(TotalCampaignRevenue).Append("\n");
            sb.Append("  CampaignRefund: ").Append(CampaignRefund).Append("\n");
            sb.Append("  TotalCampaignRefund: ").Append(TotalCampaignRefund).Append("\n");
            sb.Append("  CampaignDiscountCosts: ").Append(CampaignDiscountCosts).Append("\n");
            sb.Append("  TotalCampaignDiscountCosts: ").Append(TotalCampaignDiscountCosts).Append("\n");
            sb.Append("  CampaignRefundedDiscounts: ").Append(CampaignRefundedDiscounts).Append("\n");
            sb.Append("  TotalCampaignRefundedDiscounts: ").Append(TotalCampaignRefundedDiscounts).Append("\n");
            sb.Append("  CampaignFreeItems: ").Append(CampaignFreeItems).Append("\n");
            sb.Append("  TotalCampaignFreeItems: ").Append(TotalCampaignFreeItems).Append("\n");
            sb.Append("  CouponRedemptions: ").Append(CouponRedemptions).Append("\n");
            sb.Append("  TotalCouponRedemptions: ").Append(TotalCouponRedemptions).Append("\n");
            sb.Append("  CouponRolledbackRedemptions: ").Append(CouponRolledbackRedemptions).Append("\n");
            sb.Append("  TotalCouponRolledbackRedemptions: ").Append(TotalCouponRolledbackRedemptions).Append("\n");
            sb.Append("  ReferralRedemptions: ").Append(ReferralRedemptions).Append("\n");
            sb.Append("  TotalReferralRedemptions: ").Append(TotalReferralRedemptions).Append("\n");
            sb.Append("  CouponsCreated: ").Append(CouponsCreated).Append("\n");
            sb.Append("  TotalCouponsCreated: ").Append(TotalCouponsCreated).Append("\n");
            sb.Append("  ReferralsCreated: ").Append(ReferralsCreated).Append("\n");
            sb.Append("  TotalReferralsCreated: ").Append(TotalReferralsCreated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CampaignAnalytics);
        }

        /// <summary>
        /// Returns true if CampaignAnalytics instances are equal
        /// </summary>
        /// <param name="input">Instance of CampaignAnalytics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampaignAnalytics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.CampaignRevenue == input.CampaignRevenue ||
                    (this.CampaignRevenue != null &&
                    this.CampaignRevenue.Equals(input.CampaignRevenue))
                ) && 
                (
                    this.TotalCampaignRevenue == input.TotalCampaignRevenue ||
                    (this.TotalCampaignRevenue != null &&
                    this.TotalCampaignRevenue.Equals(input.TotalCampaignRevenue))
                ) && 
                (
                    this.CampaignRefund == input.CampaignRefund ||
                    (this.CampaignRefund != null &&
                    this.CampaignRefund.Equals(input.CampaignRefund))
                ) && 
                (
                    this.TotalCampaignRefund == input.TotalCampaignRefund ||
                    (this.TotalCampaignRefund != null &&
                    this.TotalCampaignRefund.Equals(input.TotalCampaignRefund))
                ) && 
                (
                    this.CampaignDiscountCosts == input.CampaignDiscountCosts ||
                    (this.CampaignDiscountCosts != null &&
                    this.CampaignDiscountCosts.Equals(input.CampaignDiscountCosts))
                ) && 
                (
                    this.TotalCampaignDiscountCosts == input.TotalCampaignDiscountCosts ||
                    (this.TotalCampaignDiscountCosts != null &&
                    this.TotalCampaignDiscountCosts.Equals(input.TotalCampaignDiscountCosts))
                ) && 
                (
                    this.CampaignRefundedDiscounts == input.CampaignRefundedDiscounts ||
                    (this.CampaignRefundedDiscounts != null &&
                    this.CampaignRefundedDiscounts.Equals(input.CampaignRefundedDiscounts))
                ) && 
                (
                    this.TotalCampaignRefundedDiscounts == input.TotalCampaignRefundedDiscounts ||
                    (this.TotalCampaignRefundedDiscounts != null &&
                    this.TotalCampaignRefundedDiscounts.Equals(input.TotalCampaignRefundedDiscounts))
                ) && 
                (
                    this.CampaignFreeItems == input.CampaignFreeItems ||
                    (this.CampaignFreeItems != null &&
                    this.CampaignFreeItems.Equals(input.CampaignFreeItems))
                ) && 
                (
                    this.TotalCampaignFreeItems == input.TotalCampaignFreeItems ||
                    (this.TotalCampaignFreeItems != null &&
                    this.TotalCampaignFreeItems.Equals(input.TotalCampaignFreeItems))
                ) && 
                (
                    this.CouponRedemptions == input.CouponRedemptions ||
                    (this.CouponRedemptions != null &&
                    this.CouponRedemptions.Equals(input.CouponRedemptions))
                ) && 
                (
                    this.TotalCouponRedemptions == input.TotalCouponRedemptions ||
                    (this.TotalCouponRedemptions != null &&
                    this.TotalCouponRedemptions.Equals(input.TotalCouponRedemptions))
                ) && 
                (
                    this.CouponRolledbackRedemptions == input.CouponRolledbackRedemptions ||
                    (this.CouponRolledbackRedemptions != null &&
                    this.CouponRolledbackRedemptions.Equals(input.CouponRolledbackRedemptions))
                ) && 
                (
                    this.TotalCouponRolledbackRedemptions == input.TotalCouponRolledbackRedemptions ||
                    (this.TotalCouponRolledbackRedemptions != null &&
                    this.TotalCouponRolledbackRedemptions.Equals(input.TotalCouponRolledbackRedemptions))
                ) && 
                (
                    this.ReferralRedemptions == input.ReferralRedemptions ||
                    (this.ReferralRedemptions != null &&
                    this.ReferralRedemptions.Equals(input.ReferralRedemptions))
                ) && 
                (
                    this.TotalReferralRedemptions == input.TotalReferralRedemptions ||
                    (this.TotalReferralRedemptions != null &&
                    this.TotalReferralRedemptions.Equals(input.TotalReferralRedemptions))
                ) && 
                (
                    this.CouponsCreated == input.CouponsCreated ||
                    (this.CouponsCreated != null &&
                    this.CouponsCreated.Equals(input.CouponsCreated))
                ) && 
                (
                    this.TotalCouponsCreated == input.TotalCouponsCreated ||
                    (this.TotalCouponsCreated != null &&
                    this.TotalCouponsCreated.Equals(input.TotalCouponsCreated))
                ) && 
                (
                    this.ReferralsCreated == input.ReferralsCreated ||
                    (this.ReferralsCreated != null &&
                    this.ReferralsCreated.Equals(input.ReferralsCreated))
                ) && 
                (
                    this.TotalReferralsCreated == input.TotalReferralsCreated ||
                    (this.TotalReferralsCreated != null &&
                    this.TotalReferralsCreated.Equals(input.TotalReferralsCreated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.CampaignRevenue != null)
                    hashCode = hashCode * 59 + this.CampaignRevenue.GetHashCode();
                if (this.TotalCampaignRevenue != null)
                    hashCode = hashCode * 59 + this.TotalCampaignRevenue.GetHashCode();
                if (this.CampaignRefund != null)
                    hashCode = hashCode * 59 + this.CampaignRefund.GetHashCode();
                if (this.TotalCampaignRefund != null)
                    hashCode = hashCode * 59 + this.TotalCampaignRefund.GetHashCode();
                if (this.CampaignDiscountCosts != null)
                    hashCode = hashCode * 59 + this.CampaignDiscountCosts.GetHashCode();
                if (this.TotalCampaignDiscountCosts != null)
                    hashCode = hashCode * 59 + this.TotalCampaignDiscountCosts.GetHashCode();
                if (this.CampaignRefundedDiscounts != null)
                    hashCode = hashCode * 59 + this.CampaignRefundedDiscounts.GetHashCode();
                if (this.TotalCampaignRefundedDiscounts != null)
                    hashCode = hashCode * 59 + this.TotalCampaignRefundedDiscounts.GetHashCode();
                if (this.CampaignFreeItems != null)
                    hashCode = hashCode * 59 + this.CampaignFreeItems.GetHashCode();
                if (this.TotalCampaignFreeItems != null)
                    hashCode = hashCode * 59 + this.TotalCampaignFreeItems.GetHashCode();
                if (this.CouponRedemptions != null)
                    hashCode = hashCode * 59 + this.CouponRedemptions.GetHashCode();
                if (this.TotalCouponRedemptions != null)
                    hashCode = hashCode * 59 + this.TotalCouponRedemptions.GetHashCode();
                if (this.CouponRolledbackRedemptions != null)
                    hashCode = hashCode * 59 + this.CouponRolledbackRedemptions.GetHashCode();
                if (this.TotalCouponRolledbackRedemptions != null)
                    hashCode = hashCode * 59 + this.TotalCouponRolledbackRedemptions.GetHashCode();
                if (this.ReferralRedemptions != null)
                    hashCode = hashCode * 59 + this.ReferralRedemptions.GetHashCode();
                if (this.TotalReferralRedemptions != null)
                    hashCode = hashCode * 59 + this.TotalReferralRedemptions.GetHashCode();
                if (this.CouponsCreated != null)
                    hashCode = hashCode * 59 + this.CouponsCreated.GetHashCode();
                if (this.TotalCouponsCreated != null)
                    hashCode = hashCode * 59 + this.TotalCouponsCreated.GetHashCode();
                if (this.ReferralsCreated != null)
                    hashCode = hashCode * 59 + this.ReferralsCreated.GetHashCode();
                if (this.TotalReferralsCreated != null)
                    hashCode = hashCode * 59 + this.TotalReferralsCreated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
