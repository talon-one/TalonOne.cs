/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// TalangAttribute
    /// </summary>
    [DataContract]
    public partial class TalangAttribute :  IEquatable<TalangAttribute>, IValidatableObject
    {
        /// <summary>
        /// The name of the entity of the attribute.
        /// </summary>
        /// <value>The name of the entity of the attribute.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntityEnum
        {
            /// <summary>
            /// Enum AdvocateProfile for value: AdvocateProfile
            /// </summary>
            [EnumMember(Value = "AdvocateProfile")]
            AdvocateProfile = 1,

            /// <summary>
            /// Enum Account for value: Account
            /// </summary>
            [EnumMember(Value = "Account")]
            Account = 2,

            /// <summary>
            /// Enum Application for value: Application
            /// </summary>
            [EnumMember(Value = "Application")]
            Application = 3,

            /// <summary>
            /// Enum AwardedGiveaway for value: AwardedGiveaway
            /// </summary>
            [EnumMember(Value = "AwardedGiveaway")]
            AwardedGiveaway = 4,

            /// <summary>
            /// Enum Bundle for value: Bundle
            /// </summary>
            [EnumMember(Value = "Bundle")]
            Bundle = 5,

            /// <summary>
            /// Enum Campaign for value: Campaign
            /// </summary>
            [EnumMember(Value = "Campaign")]
            Campaign = 6,

            /// <summary>
            /// Enum CartItem for value: CartItem
            /// </summary>
            [EnumMember(Value = "CartItem")]
            CartItem = 7,

            /// <summary>
            /// Enum Coupon for value: Coupon
            /// </summary>
            [EnumMember(Value = "Coupon")]
            Coupon = 8,

            /// <summary>
            /// Enum CustomerProfile for value: CustomerProfile
            /// </summary>
            [EnumMember(Value = "CustomerProfile")]
            CustomerProfile = 9,

            /// <summary>
            /// Enum CustomerSession for value: CustomerSession
            /// </summary>
            [EnumMember(Value = "CustomerSession")]
            CustomerSession = 10,

            /// <summary>
            /// Enum Event for value: Event
            /// </summary>
            [EnumMember(Value = "Event")]
            Event = 11,

            /// <summary>
            /// Enum Item for value: Item
            /// </summary>
            [EnumMember(Value = "Item")]
            Item = 12,

            /// <summary>
            /// Enum Loyalty for value: Loyalty
            /// </summary>
            [EnumMember(Value = "Loyalty")]
            Loyalty = 13,

            /// <summary>
            /// Enum Profile for value: Profile
            /// </summary>
            [EnumMember(Value = "Profile")]
            Profile = 14,

            /// <summary>
            /// Enum Giveaway for value: Giveaway
            /// </summary>
            [EnumMember(Value = "Giveaway")]
            Giveaway = 15,

            /// <summary>
            /// Enum Referral for value: Referral
            /// </summary>
            [EnumMember(Value = "Referral")]
            Referral = 16,

            /// <summary>
            /// Enum Session for value: Session
            /// </summary>
            [EnumMember(Value = "Session")]
            Session = 17

        }

        /// <summary>
        /// The name of the entity of the attribute.
        /// </summary>
        /// <value>The name of the entity of the attribute.</value>
        [DataMember(Name="entity", EmitDefaultValue=false)]
        public EntityEnum? Entity { get; set; }
        /// <summary>
        /// Indicate the kind of the attribute.
        /// </summary>
        /// <value>Indicate the kind of the attribute.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KindEnum
        {
            /// <summary>
            /// Enum BuiltIn for value: built-in
            /// </summary>
            [EnumMember(Value = "built-in")]
            BuiltIn = 1,

            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 2

        }

        /// <summary>
        /// Indicate the kind of the attribute.
        /// </summary>
        /// <value>Indicate the kind of the attribute.</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public KindEnum Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TalangAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TalangAttribute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TalangAttribute" /> class.
        /// </summary>
        /// <param name="entity">The name of the entity of the attribute..</param>
        /// <param name="name">The attribute name that will be used in API requests and Talang. E.g. if &#x60;name &#x3D;&#x3D; \&quot;region\&quot;&#x60; then you would set the region attribute by including an &#x60;attributes.region&#x60; property in your request payload.  (required).</param>
        /// <param name="title">The name of the attribute that is displayed to the user in the Campaign Manager..</param>
        /// <param name="type">The talang type of the attribute. (required).</param>
        /// <param name="description">A description of the attribute..</param>
        /// <param name="visible">Indicates whether the attribute is visible in the UI or not. (required) (default to true).</param>
        /// <param name="kind">Indicate the kind of the attribute. (required).</param>
        /// <param name="campaignsCount">The number of campaigns that refer to the attribute. (required).</param>
        /// <param name="exampleValue">Examples of values that can be assigned to the attribute..</param>
        public TalangAttribute(EntityEnum? entity = default(EntityEnum?), string name = default(string), string title = default(string), string type = default(string), string description = default(string), bool visible = true, KindEnum kind = default(KindEnum), int campaignsCount = default(int), List<string> exampleValue = default(List<string>))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for TalangAttribute and cannot be null");
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for TalangAttribute and cannot be null");
            this.Visible = visible;
            this.Kind = kind;
            this.CampaignsCount = campaignsCount;
            this.Entity = entity;
            this.Title = title;
            this.Description = description;
            this.ExampleValue = exampleValue;
        }
        
        /// <summary>
        /// The attribute name that will be used in API requests and Talang. E.g. if &#x60;name &#x3D;&#x3D; \&quot;region\&quot;&#x60; then you would set the region attribute by including an &#x60;attributes.region&#x60; property in your request payload. 
        /// </summary>
        /// <value>The attribute name that will be used in API requests and Talang. E.g. if &#x60;name &#x3D;&#x3D; \&quot;region\&quot;&#x60; then you would set the region attribute by including an &#x60;attributes.region&#x60; property in your request payload. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the attribute that is displayed to the user in the Campaign Manager.
        /// </summary>
        /// <value>The name of the attribute that is displayed to the user in the Campaign Manager.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The talang type of the attribute.
        /// </summary>
        /// <value>The talang type of the attribute.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// A description of the attribute.
        /// </summary>
        /// <value>A description of the attribute.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates whether the attribute is visible in the UI or not.
        /// </summary>
        /// <value>Indicates whether the attribute is visible in the UI or not.</value>
        [DataMember(Name="visible", EmitDefaultValue=false)]
        public bool Visible { get; set; }

        /// <summary>
        /// The number of campaigns that refer to the attribute.
        /// </summary>
        /// <value>The number of campaigns that refer to the attribute.</value>
        [DataMember(Name="campaignsCount", EmitDefaultValue=false)]
        public int CampaignsCount { get; set; }

        /// <summary>
        /// Examples of values that can be assigned to the attribute.
        /// </summary>
        /// <value>Examples of values that can be assigned to the attribute.</value>
        [DataMember(Name="exampleValue", EmitDefaultValue=false)]
        public List<string> ExampleValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TalangAttribute {\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  CampaignsCount: ").Append(CampaignsCount).Append("\n");
            sb.Append("  ExampleValue: ").Append(ExampleValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TalangAttribute);
        }

        /// <summary>
        /// Returns true if TalangAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of TalangAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TalangAttribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Entity == input.Entity ||
                    this.Entity.Equals(input.Entity)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Visible == input.Visible ||
                    this.Visible.Equals(input.Visible)
                ) && 
                (
                    this.Kind == input.Kind ||
                    this.Kind.Equals(input.Kind)
                ) && 
                (
                    this.CampaignsCount == input.CampaignsCount ||
                    this.CampaignsCount.Equals(input.CampaignsCount)
                ) && 
                (
                    this.ExampleValue == input.ExampleValue ||
                    this.ExampleValue != null &&
                    input.ExampleValue != null &&
                    this.ExampleValue.SequenceEqual(input.ExampleValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Entity.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Visible.GetHashCode();
                hashCode = hashCode * 59 + this.Kind.GetHashCode();
                hashCode = hashCode * 59 + this.CampaignsCount.GetHashCode();
                if (this.ExampleValue != null)
                    hashCode = hashCode * 59 + this.ExampleValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
