/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The specific properties of the \&quot;ADD_PRICE_ADJUSTMENT\&quot; catalog sync action. 
    /// </summary>
    [DataContract]
    public partial class AddPriceAdjustmentCatalogAction :  IEquatable<AddPriceAdjustmentCatalogAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddPriceAdjustmentCatalogAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddPriceAdjustmentCatalogAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddPriceAdjustmentCatalogAction" /> class.
        /// </summary>
        /// <param name="sku">The SKU of the item for which the price is being adjusted. (required).</param>
        /// <param name="adjustments">A list of adjustments to apply to a given item. (required).</param>
        public AddPriceAdjustmentCatalogAction(string sku = default(string), List<NewPriceAdjustment> adjustments = default(List<NewPriceAdjustment>))
        {
            // to ensure "sku" is required (not null)
            this.Sku = sku ?? throw new ArgumentNullException("sku is a required property for AddPriceAdjustmentCatalogAction and cannot be null");
            // to ensure "adjustments" is required (not null)
            this.Adjustments = adjustments ?? throw new ArgumentNullException("adjustments is a required property for AddPriceAdjustmentCatalogAction and cannot be null");
        }
        
        /// <summary>
        /// The SKU of the item for which the price is being adjusted.
        /// </summary>
        /// <value>The SKU of the item for which the price is being adjusted.</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// A list of adjustments to apply to a given item.
        /// </summary>
        /// <value>A list of adjustments to apply to a given item.</value>
        [DataMember(Name="adjustments", EmitDefaultValue=false)]
        public List<NewPriceAdjustment> Adjustments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddPriceAdjustmentCatalogAction {\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Adjustments: ").Append(Adjustments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddPriceAdjustmentCatalogAction);
        }

        /// <summary>
        /// Returns true if AddPriceAdjustmentCatalogAction instances are equal
        /// </summary>
        /// <param name="input">Instance of AddPriceAdjustmentCatalogAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddPriceAdjustmentCatalogAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Adjustments == input.Adjustments ||
                    this.Adjustments != null &&
                    input.Adjustments != null &&
                    this.Adjustments.SequenceEqual(input.Adjustments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Adjustments != null)
                    hashCode = hashCode * 59 + this.Adjustments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
