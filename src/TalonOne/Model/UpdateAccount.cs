/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// UpdateAccount
    /// </summary>
    [DataContract]
    public partial class UpdateAccount :  IEquatable<UpdateAccount>, IValidatableObject
    {
        /// <summary>
        /// State of the account (active, deactivated).
        /// </summary>
        /// <value>State of the account (active, deactivated).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Deactivated for value: deactivated
            /// </summary>
            [EnumMember(Value = "deactivated")]
            Deactivated = 2

        }

        /// <summary>
        /// State of the account (active, deactivated).
        /// </summary>
        /// <value>State of the account (active, deactivated).</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAccount" /> class.
        /// </summary>
        /// <param name="attributes">Arbitrary properties associated with this campaign..</param>
        /// <param name="companyName">Name of your company. (required).</param>
        /// <param name="billingEmail">The billing email address associated with your company account. (required).</param>
        /// <param name="state">State of the account (active, deactivated)..</param>
        /// <param name="planExpires">The point in time at which your current plan expires..</param>
        public UpdateAccount(Object attributes = default(Object), string companyName = default(string), string billingEmail = default(string), StateEnum? state = default(StateEnum?), DateTime planExpires = default(DateTime))
        {
            // to ensure "companyName" is required (not null)
            this.CompanyName = companyName ?? throw new ArgumentNullException("companyName is a required property for UpdateAccount and cannot be null");
            // to ensure "billingEmail" is required (not null)
            this.BillingEmail = billingEmail ?? throw new ArgumentNullException("billingEmail is a required property for UpdateAccount and cannot be null");
            this.Attributes = attributes;
            this.State = state;
            this.PlanExpires = planExpires;
        }
        
        /// <summary>
        /// Arbitrary properties associated with this campaign.
        /// </summary>
        /// <value>Arbitrary properties associated with this campaign.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }

        /// <summary>
        /// Name of your company.
        /// </summary>
        /// <value>Name of your company.</value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The billing email address associated with your company account.
        /// </summary>
        /// <value>The billing email address associated with your company account.</value>
        [DataMember(Name="billingEmail", EmitDefaultValue=false)]
        public string BillingEmail { get; set; }

        /// <summary>
        /// The point in time at which your current plan expires.
        /// </summary>
        /// <value>The point in time at which your current plan expires.</value>
        [DataMember(Name="planExpires", EmitDefaultValue=false)]
        public DateTime PlanExpires { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateAccount {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  BillingEmail: ").Append(BillingEmail).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PlanExpires: ").Append(PlanExpires).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateAccount);
        }

        /// <summary>
        /// Returns true if UpdateAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.BillingEmail == input.BillingEmail ||
                    (this.BillingEmail != null &&
                    this.BillingEmail.Equals(input.BillingEmail))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.PlanExpires == input.PlanExpires ||
                    (this.PlanExpires != null &&
                    this.PlanExpires.Equals(input.PlanExpires))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.BillingEmail != null)
                    hashCode = hashCode * 59 + this.BillingEmail.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.PlanExpires != null)
                    hashCode = hashCode * 59 + this.PlanExpires.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CompanyName (string) minLength
            if(this.CompanyName != null && this.CompanyName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be greater than 1.", new [] { "CompanyName" });
            }

            yield break;
        }
    }

}
