/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The properties specific to the \&quot;ShowBundleMetadata\&quot; effect. This effect contains information that allows you to associate the discounts from a rule in a bundle campaign with specific cart items. This way you can distinguish from \&quot;normal\&quot; discounts that were not the result of a product bundle.
    /// </summary>
    [DataContract]
    public partial class ShowBundleMetadataEffectProps :  IEquatable<ShowBundleMetadataEffectProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowBundleMetadataEffectProps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShowBundleMetadataEffectProps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowBundleMetadataEffectProps" /> class.
        /// </summary>
        /// <param name="description">Description of the product bundle (required).</param>
        /// <param name="bundleAttributes">The cart item attributes that determined which items are being bundled together (required).</param>
        /// <param name="itemsIndices">The indices in the cart items array of the bundled items (required).</param>
        public ShowBundleMetadataEffectProps(string description = default(string), List<string> bundleAttributes = default(List<string>), List<decimal> itemsIndices = default(List<decimal>))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for ShowBundleMetadataEffectProps and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            
            // to ensure "bundleAttributes" is required (not null)
            if (bundleAttributes == null)
            {
                throw new InvalidDataException("bundleAttributes is a required property for ShowBundleMetadataEffectProps and cannot be null");
            }
            else
            {
                this.BundleAttributes = bundleAttributes;
            }
            
            // to ensure "itemsIndices" is required (not null)
            if (itemsIndices == null)
            {
                throw new InvalidDataException("itemsIndices is a required property for ShowBundleMetadataEffectProps and cannot be null");
            }
            else
            {
                this.ItemsIndices = itemsIndices;
            }
            
        }
        
        /// <summary>
        /// Description of the product bundle
        /// </summary>
        /// <value>Description of the product bundle</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// The cart item attributes that determined which items are being bundled together
        /// </summary>
        /// <value>The cart item attributes that determined which items are being bundled together</value>
        [DataMember(Name="bundleAttributes", EmitDefaultValue=true)]
        public List<string> BundleAttributes { get; set; }

        /// <summary>
        /// The indices in the cart items array of the bundled items
        /// </summary>
        /// <value>The indices in the cart items array of the bundled items</value>
        [DataMember(Name="itemsIndices", EmitDefaultValue=true)]
        public List<decimal> ItemsIndices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShowBundleMetadataEffectProps {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BundleAttributes: ").Append(BundleAttributes).Append("\n");
            sb.Append("  ItemsIndices: ").Append(ItemsIndices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowBundleMetadataEffectProps);
        }

        /// <summary>
        /// Returns true if ShowBundleMetadataEffectProps instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowBundleMetadataEffectProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowBundleMetadataEffectProps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.BundleAttributes == input.BundleAttributes ||
                    this.BundleAttributes != null &&
                    input.BundleAttributes != null &&
                    this.BundleAttributes.SequenceEqual(input.BundleAttributes)
                ) && 
                (
                    this.ItemsIndices == input.ItemsIndices ||
                    this.ItemsIndices != null &&
                    input.ItemsIndices != null &&
                    this.ItemsIndices.SequenceEqual(input.ItemsIndices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.BundleAttributes != null)
                    hashCode = hashCode * 59 + this.BundleAttributes.GetHashCode();
                if (this.ItemsIndices != null)
                    hashCode = hashCode * 59 + this.ItemsIndices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
