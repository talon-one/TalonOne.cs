/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CustomerProfileSearchQuery
    /// </summary>
    [DataContract]
    public partial class CustomerProfileSearchQuery :  IEquatable<CustomerProfileSearchQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerProfileSearchQuery" /> class.
        /// </summary>
        /// <param name="attributes">Properties to match against a customer profile. All provided attributes will be exactly matched against profile attributes.</param>
        /// <param name="integrationIDs">integrationIDs.</param>
        /// <param name="profileIDs">profileIDs.</param>
        public CustomerProfileSearchQuery(Object attributes = default(Object), List<string> integrationIDs = default(List<string>), List<int> profileIDs = default(List<int>))
        {
            this.Attributes = attributes;
            this.IntegrationIDs = integrationIDs;
            this.ProfileIDs = profileIDs;
        }
        
        /// <summary>
        /// Properties to match against a customer profile. All provided attributes will be exactly matched against profile attributes
        /// </summary>
        /// <value>Properties to match against a customer profile. All provided attributes will be exactly matched against profile attributes</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationIDs
        /// </summary>
        [DataMember(Name="integrationIDs", EmitDefaultValue=false)]
        public List<string> IntegrationIDs { get; set; }

        /// <summary>
        /// Gets or Sets ProfileIDs
        /// </summary>
        [DataMember(Name="profileIDs", EmitDefaultValue=false)]
        public List<int> ProfileIDs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerProfileSearchQuery {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  IntegrationIDs: ").Append(IntegrationIDs).Append("\n");
            sb.Append("  ProfileIDs: ").Append(ProfileIDs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerProfileSearchQuery);
        }

        /// <summary>
        /// Returns true if CustomerProfileSearchQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerProfileSearchQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerProfileSearchQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.IntegrationIDs == input.IntegrationIDs ||
                    this.IntegrationIDs != null &&
                    input.IntegrationIDs != null &&
                    this.IntegrationIDs.SequenceEqual(input.IntegrationIDs)
                ) && 
                (
                    this.ProfileIDs == input.ProfileIDs ||
                    this.ProfileIDs != null &&
                    input.ProfileIDs != null &&
                    this.ProfileIDs.SequenceEqual(input.ProfileIDs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.IntegrationIDs != null)
                    hashCode = hashCode * 59 + this.IntegrationIDs.GetHashCode();
                if (this.ProfileIDs != null)
                    hashCode = hashCode * 59 + this.ProfileIDs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
