/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The strikethrough labels notification for an application.
    /// </summary>
    [DataContract]
    public partial class StrikethroughLabelingNotification :  IEquatable<StrikethroughLabelingNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StrikethroughLabelingNotification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StrikethroughLabelingNotification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StrikethroughLabelingNotification" /> class.
        /// </summary>
        /// <param name="applicationId">The ID of the application that catalog items labels belongs to. (required).</param>
        /// <param name="currentBatch">The batch number of the notification. Notifications might be sent in different batches. (required).</param>
        /// <param name="totalBatches">The total number of batches for the notification. (required).</param>
        /// <param name="trigger">trigger (required).</param>
        /// <param name="changedItems">changedItems (required).</param>
        public StrikethroughLabelingNotification(int applicationId = default(int), int currentBatch = default(int), int totalBatches = default(int), StrikethroughTrigger trigger = default(StrikethroughTrigger), List<StrikethroughChangedItem> changedItems = default(List<StrikethroughChangedItem>))
        {
            this.ApplicationId = applicationId;
            this.CurrentBatch = currentBatch;
            this.TotalBatches = totalBatches;
            // to ensure "trigger" is required (not null)
            this.Trigger = trigger ?? throw new ArgumentNullException("trigger is a required property for StrikethroughLabelingNotification and cannot be null");
            // to ensure "changedItems" is required (not null)
            this.ChangedItems = changedItems ?? throw new ArgumentNullException("changedItems is a required property for StrikethroughLabelingNotification and cannot be null");
        }
        
        /// <summary>
        /// The ID of the application that catalog items labels belongs to.
        /// </summary>
        /// <value>The ID of the application that catalog items labels belongs to.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int ApplicationId { get; set; }

        /// <summary>
        /// The batch number of the notification. Notifications might be sent in different batches.
        /// </summary>
        /// <value>The batch number of the notification. Notifications might be sent in different batches.</value>
        [DataMember(Name="currentBatch", EmitDefaultValue=false)]
        public int CurrentBatch { get; set; }

        /// <summary>
        /// The total number of batches for the notification.
        /// </summary>
        /// <value>The total number of batches for the notification.</value>
        [DataMember(Name="totalBatches", EmitDefaultValue=false)]
        public int TotalBatches { get; set; }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public StrikethroughTrigger Trigger { get; set; }

        /// <summary>
        /// Gets or Sets ChangedItems
        /// </summary>
        [DataMember(Name="changedItems", EmitDefaultValue=false)]
        public List<StrikethroughChangedItem> ChangedItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StrikethroughLabelingNotification {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  CurrentBatch: ").Append(CurrentBatch).Append("\n");
            sb.Append("  TotalBatches: ").Append(TotalBatches).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  ChangedItems: ").Append(ChangedItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StrikethroughLabelingNotification);
        }

        /// <summary>
        /// Returns true if StrikethroughLabelingNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of StrikethroughLabelingNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StrikethroughLabelingNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    this.ApplicationId.Equals(input.ApplicationId)
                ) && 
                (
                    this.CurrentBatch == input.CurrentBatch ||
                    this.CurrentBatch.Equals(input.CurrentBatch)
                ) && 
                (
                    this.TotalBatches == input.TotalBatches ||
                    this.TotalBatches.Equals(input.TotalBatches)
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.ChangedItems == input.ChangedItems ||
                    this.ChangedItems != null &&
                    input.ChangedItems != null &&
                    this.ChangedItems.SequenceEqual(input.ChangedItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentBatch.GetHashCode();
                hashCode = hashCode * 59 + this.TotalBatches.GetHashCode();
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.ChangedItems != null)
                    hashCode = hashCode * 59 + this.ChangedItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
