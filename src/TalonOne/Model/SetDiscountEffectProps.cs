/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The properties specific to the \&quot;setDiscount\&quot; effect. This gets triggered whenever a validated rule contained a \&quot;set discount\&quot; effect. This is a discount that should be applied on the scope of defined with it.
    /// </summary>
    [DataContract]
    public partial class SetDiscountEffectProps :  IEquatable<SetDiscountEffectProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetDiscountEffectProps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetDiscountEffectProps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetDiscountEffectProps" /> class.
        /// </summary>
        /// <param name="name">The name / description of this discount (required).</param>
        /// <param name="value">The total monetary value of the discount. (required).</param>
        /// <param name="scope">The scope which the discount was applied on, can be one of (cartItems,additionalCosts,sessionTotal)..</param>
        /// <param name="desiredValue">The original value of the discount..</param>
        public SetDiscountEffectProps(string name = default(string), decimal value = default(decimal), string scope = default(string), decimal desiredValue = default(decimal))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for SetDiscountEffectProps and cannot be null");
            this.Value = value;
            this.Scope = scope;
            this.DesiredValue = desiredValue;
        }
        
        /// <summary>
        /// The name / description of this discount
        /// </summary>
        /// <value>The name / description of this discount</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The total monetary value of the discount.
        /// </summary>
        /// <value>The total monetary value of the discount.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal Value { get; set; }

        /// <summary>
        /// The scope which the discount was applied on, can be one of (cartItems,additionalCosts,sessionTotal).
        /// </summary>
        /// <value>The scope which the discount was applied on, can be one of (cartItems,additionalCosts,sessionTotal).</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// The original value of the discount.
        /// </summary>
        /// <value>The original value of the discount.</value>
        [DataMember(Name="desiredValue", EmitDefaultValue=false)]
        public decimal DesiredValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetDiscountEffectProps {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  DesiredValue: ").Append(DesiredValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetDiscountEffectProps);
        }

        /// <summary>
        /// Returns true if SetDiscountEffectProps instances are equal
        /// </summary>
        /// <param name="input">Instance of SetDiscountEffectProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetDiscountEffectProps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.DesiredValue == input.DesiredValue ||
                    this.DesiredValue.Equals(input.DesiredValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                hashCode = hashCode * 59 + this.DesiredValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
