/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The properties specific to the \&quot;triggerWebhook\&quot; effect. This gets triggered whenever a validated rule contained a \&quot;trigger webhook\&quot; effect. This is communicated as an FYI and should usually not require action on your side.
    /// </summary>
    [DataContract]
    public partial class TriggerWebhookEffectProps :  IEquatable<TriggerWebhookEffectProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerWebhookEffectProps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TriggerWebhookEffectProps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerWebhookEffectProps" /> class.
        /// </summary>
        /// <param name="webhookId">The ID of the webhook that was triggered (required).</param>
        /// <param name="webhookName">The name of the webhook that was triggered (required).</param>
        public TriggerWebhookEffectProps(decimal webhookId = default(decimal), string webhookName = default(string))
        {
            this.WebhookId = webhookId;
            // to ensure "webhookName" is required (not null)
            this.WebhookName = webhookName ?? throw new ArgumentNullException("webhookName is a required property for TriggerWebhookEffectProps and cannot be null");
        }
        
        /// <summary>
        /// The ID of the webhook that was triggered
        /// </summary>
        /// <value>The ID of the webhook that was triggered</value>
        [DataMember(Name="webhookId", EmitDefaultValue=false)]
        public decimal WebhookId { get; set; }

        /// <summary>
        /// The name of the webhook that was triggered
        /// </summary>
        /// <value>The name of the webhook that was triggered</value>
        [DataMember(Name="webhookName", EmitDefaultValue=false)]
        public string WebhookName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TriggerWebhookEffectProps {\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  WebhookName: ").Append(WebhookName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TriggerWebhookEffectProps);
        }

        /// <summary>
        /// Returns true if TriggerWebhookEffectProps instances are equal
        /// </summary>
        /// <param name="input">Instance of TriggerWebhookEffectProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TriggerWebhookEffectProps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WebhookId == input.WebhookId ||
                    this.WebhookId.Equals(input.WebhookId)
                ) && 
                (
                    this.WebhookName == input.WebhookName ||
                    (this.WebhookName != null &&
                    this.WebhookName.Equals(input.WebhookName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.WebhookId.GetHashCode();
                if (this.WebhookName != null)
                    hashCode = hashCode * 59 + this.WebhookName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
