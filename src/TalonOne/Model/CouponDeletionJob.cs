/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CouponDeletionJob
    /// </summary>
    [DataContract]
    public partial class CouponDeletionJob :  IEquatable<CouponDeletionJob>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponDeletionJob" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CouponDeletionJob() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponDeletionJob" /> class.
        /// </summary>
        /// <param name="id">Internal ID of this entity. (required).</param>
        /// <param name="created">The time this entity was created. (required).</param>
        /// <param name="applicationId">The ID of the Application that owns this entity. (required).</param>
        /// <param name="accountId">The ID of the account that owns this entity. (required).</param>
        /// <param name="filters">filters (required).</param>
        /// <param name="status">The current status of this request. Possible values: - &#x60;not_ready&#x60; - &#x60;pending&#x60; - &#x60;completed&#x60; - &#x60;failed&#x60;  (required).</param>
        /// <param name="deletedAmount">The number of coupon codes that were already deleted for this request..</param>
        /// <param name="failCount">The number of times this job failed. (required).</param>
        /// <param name="errors">An array of individual problems encountered during the request. (required).</param>
        /// <param name="createdBy">ID of the user who created this effect. (required).</param>
        /// <param name="communicated">Indicates whether the user that created this job was notified of its final state. (required).</param>
        /// <param name="campaignIDs">campaignIDs.</param>
        public CouponDeletionJob(int id = default(int), DateTime created = default(DateTime), int applicationId = default(int), int accountId = default(int), CouponDeletionFilters filters = default(CouponDeletionFilters), string status = default(string), int deletedAmount = default(int), int failCount = default(int), List<string> errors = default(List<string>), int createdBy = default(int), bool communicated = default(bool), List<int> campaignIDs = default(List<int>))
        {
            this.Id = id;
            this.Created = created;
            this.ApplicationId = applicationId;
            this.AccountId = accountId;
            // to ensure "filters" is required (not null)
            this.Filters = filters ?? throw new ArgumentNullException("filters is a required property for CouponDeletionJob and cannot be null");
            // to ensure "status" is required (not null)
            this.Status = status ?? throw new ArgumentNullException("status is a required property for CouponDeletionJob and cannot be null");
            this.FailCount = failCount;
            // to ensure "errors" is required (not null)
            this.Errors = errors ?? throw new ArgumentNullException("errors is a required property for CouponDeletionJob and cannot be null");
            this.CreatedBy = createdBy;
            this.Communicated = communicated;
            this.DeletedAmount = deletedAmount;
            this.CampaignIDs = campaignIDs;
        }
        
        /// <summary>
        /// Internal ID of this entity.
        /// </summary>
        /// <value>Internal ID of this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The time this entity was created.
        /// </summary>
        /// <value>The time this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The ID of the Application that owns this entity.
        /// </summary>
        /// <value>The ID of the Application that owns this entity.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int ApplicationId { get; set; }

        /// <summary>
        /// The ID of the account that owns this entity.
        /// </summary>
        /// <value>The ID of the account that owns this entity.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public CouponDeletionFilters Filters { get; set; }

        /// <summary>
        /// The current status of this request. Possible values: - &#x60;not_ready&#x60; - &#x60;pending&#x60; - &#x60;completed&#x60; - &#x60;failed&#x60; 
        /// </summary>
        /// <value>The current status of this request. Possible values: - &#x60;not_ready&#x60; - &#x60;pending&#x60; - &#x60;completed&#x60; - &#x60;failed&#x60; </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The number of coupon codes that were already deleted for this request.
        /// </summary>
        /// <value>The number of coupon codes that were already deleted for this request.</value>
        [DataMember(Name="deletedAmount", EmitDefaultValue=false)]
        public int DeletedAmount { get; set; }

        /// <summary>
        /// The number of times this job failed.
        /// </summary>
        /// <value>The number of times this job failed.</value>
        [DataMember(Name="failCount", EmitDefaultValue=false)]
        public int FailCount { get; set; }

        /// <summary>
        /// An array of individual problems encountered during the request.
        /// </summary>
        /// <value>An array of individual problems encountered during the request.</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<string> Errors { get; set; }

        /// <summary>
        /// ID of the user who created this effect.
        /// </summary>
        /// <value>ID of the user who created this effect.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public int CreatedBy { get; set; }

        /// <summary>
        /// Indicates whether the user that created this job was notified of its final state.
        /// </summary>
        /// <value>Indicates whether the user that created this job was notified of its final state.</value>
        [DataMember(Name="communicated", EmitDefaultValue=false)]
        public bool Communicated { get; set; }

        /// <summary>
        /// Gets or Sets CampaignIDs
        /// </summary>
        [DataMember(Name="campaignIDs", EmitDefaultValue=false)]
        public List<int> CampaignIDs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CouponDeletionJob {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DeletedAmount: ").Append(DeletedAmount).Append("\n");
            sb.Append("  FailCount: ").Append(FailCount).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Communicated: ").Append(Communicated).Append("\n");
            sb.Append("  CampaignIDs: ").Append(CampaignIDs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CouponDeletionJob);
        }

        /// <summary>
        /// Returns true if CouponDeletionJob instances are equal
        /// </summary>
        /// <param name="input">Instance of CouponDeletionJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CouponDeletionJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    this.ApplicationId.Equals(input.ApplicationId)
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId.Equals(input.AccountId)
                ) && 
                (
                    this.Filters == input.Filters ||
                    (this.Filters != null &&
                    this.Filters.Equals(input.Filters))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.DeletedAmount == input.DeletedAmount ||
                    this.DeletedAmount.Equals(input.DeletedAmount)
                ) && 
                (
                    this.FailCount == input.FailCount ||
                    this.FailCount.Equals(input.FailCount)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.Communicated == input.Communicated ||
                    this.Communicated.Equals(input.Communicated)
                ) && 
                (
                    this.CampaignIDs == input.CampaignIDs ||
                    this.CampaignIDs != null &&
                    input.CampaignIDs != null &&
                    this.CampaignIDs.SequenceEqual(input.CampaignIDs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.DeletedAmount.GetHashCode();
                hashCode = hashCode * 59 + this.FailCount.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                hashCode = hashCode * 59 + this.Communicated.GetHashCode();
                if (this.CampaignIDs != null)
                    hashCode = hashCode * 59 + this.CampaignIDs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
