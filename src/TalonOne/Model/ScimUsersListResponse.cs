/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// List of users that have been provisioned using the SCIM protocol with an identity provider, for example, Microsoft Entra ID.
    /// </summary>
    [DataContract]
    public partial class ScimUsersListResponse :  IEquatable<ScimUsersListResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScimUsersListResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScimUsersListResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScimUsersListResponse" /> class.
        /// </summary>
        /// <param name="resources">resources (required).</param>
        /// <param name="schemas">schemas.</param>
        /// <param name="totalResults">Number of total results in the response..</param>
        public ScimUsersListResponse(List<ScimUser> resources = default(List<ScimUser>), List<string> schemas = default(List<string>), int totalResults = default(int))
        {
            // to ensure "resources" is required (not null)
            this.Resources = resources ?? throw new ArgumentNullException("resources is a required property for ScimUsersListResponse and cannot be null");
            this.Schemas = schemas;
            this.TotalResults = totalResults;
        }
        
        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name="Resources", EmitDefaultValue=false)]
        public List<ScimUser> Resources { get; set; }

        /// <summary>
        /// Gets or Sets Schemas
        /// </summary>
        [DataMember(Name="schemas", EmitDefaultValue=false)]
        public List<string> Schemas { get; set; }

        /// <summary>
        /// Number of total results in the response.
        /// </summary>
        /// <value>Number of total results in the response.</value>
        [DataMember(Name="totalResults", EmitDefaultValue=false)]
        public int TotalResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScimUsersListResponse {\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Schemas: ").Append(Schemas).Append("\n");
            sb.Append("  TotalResults: ").Append(TotalResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScimUsersListResponse);
        }

        /// <summary>
        /// Returns true if ScimUsersListResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ScimUsersListResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScimUsersListResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.Schemas == input.Schemas ||
                    this.Schemas != null &&
                    input.Schemas != null &&
                    this.Schemas.SequenceEqual(input.Schemas)
                ) && 
                (
                    this.TotalResults == input.TotalResults ||
                    this.TotalResults.Equals(input.TotalResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.Schemas != null)
                    hashCode = hashCode * 59 + this.Schemas.GetHashCode();
                hashCode = hashCode * 59 + this.TotalResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
