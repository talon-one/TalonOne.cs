/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CustomerSessionV2
    /// </summary>
    [DataContract]
    public partial class CustomerSessionV2 :  IEquatable<CustomerSessionV2>, IValidatableObject
    {
        /// <summary>
        /// Indicates the current state of the session. Sessions can be created as &#x60;open&#x60; or &#x60;closed&#x60;, after which valid transitions are:  1. &#x60;open&#x60; → &#x60;closed&#x60; 2. &#x60;open&#x60; → &#x60;cancelled&#x60; 3. &#x60;closed&#x60; → &#x60;cancelled&#x60;  For more information, see [Entites](/docs/dev/concepts/entities#customer-session). 
        /// </summary>
        /// <value>Indicates the current state of the session. Sessions can be created as &#x60;open&#x60; or &#x60;closed&#x60;, after which valid transitions are:  1. &#x60;open&#x60; → &#x60;closed&#x60; 2. &#x60;open&#x60; → &#x60;cancelled&#x60; 3. &#x60;closed&#x60; → &#x60;cancelled&#x60;  For more information, see [Entites](/docs/dev/concepts/entities#customer-session). </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Open for value: open
            /// </summary>
            [EnumMember(Value = "open")]
            Open = 1,

            /// <summary>
            /// Enum Closed for value: closed
            /// </summary>
            [EnumMember(Value = "closed")]
            Closed = 2,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 3

        }

        /// <summary>
        /// Indicates the current state of the session. Sessions can be created as &#x60;open&#x60; or &#x60;closed&#x60;, after which valid transitions are:  1. &#x60;open&#x60; → &#x60;closed&#x60; 2. &#x60;open&#x60; → &#x60;cancelled&#x60; 3. &#x60;closed&#x60; → &#x60;cancelled&#x60;  For more information, see [Entites](/docs/dev/concepts/entities#customer-session). 
        /// </summary>
        /// <value>Indicates the current state of the session. Sessions can be created as &#x60;open&#x60; or &#x60;closed&#x60;, after which valid transitions are:  1. &#x60;open&#x60; → &#x60;closed&#x60; 2. &#x60;open&#x60; → &#x60;cancelled&#x60; 3. &#x60;closed&#x60; → &#x60;cancelled&#x60;  For more information, see [Entites](/docs/dev/concepts/entities#customer-session). </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerSessionV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerSessionV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerSessionV2" /> class.
        /// </summary>
        /// <param name="integrationId">The integration ID for this entity sent to and used in the Talon.One system. (required).</param>
        /// <param name="created">The exact moment this entity was created. (required).</param>
        /// <param name="applicationId">The ID of the application that owns this entity. (required).</param>
        /// <param name="profileId">ID of the customers profile as used within this Talon.One account. May be omitted or set to the empty string if the customer does not yet have a known profile ID. (required).</param>
        /// <param name="couponCodes">Any coupon codes entered..</param>
        /// <param name="referralCode">Any referral code entered..</param>
        /// <param name="state">Indicates the current state of the session. Sessions can be created as &#x60;open&#x60; or &#x60;closed&#x60;, after which valid transitions are:  1. &#x60;open&#x60; → &#x60;closed&#x60; 2. &#x60;open&#x60; → &#x60;cancelled&#x60; 3. &#x60;closed&#x60; → &#x60;cancelled&#x60;  For more information, see [Entites](/docs/dev/concepts/entities#customer-session).  (required) (default to StateEnum.Open).</param>
        /// <param name="cartItems">All items the customer will be purchasing in this session (required).</param>
        /// <param name="additionalCosts">Any costs associated with the session that can not be explicitly attributed to cart items. Examples include shipping costs and service fees..</param>
        /// <param name="identifiers">Session custom identifiers that you can set limits on or use inside your rules.  For example, you can use IP addresses as identifiers to potentially identify devices and limit discounts abuse in case of customers creating multiple accounts. .</param>
        /// <param name="attributes">A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings.  (required).</param>
        /// <param name="firstSession">Indicates whether this is the first session for the customer&#39;s profile. Will always be true for anonymous sessions. (required).</param>
        /// <param name="total">The total sum of cart-items, as well as additional costs, before any discounts applied (required).</param>
        /// <param name="cartItemTotal">The total sum of cart-items before any discounts applied (required).</param>
        /// <param name="additionalCostTotal">The total sum of additional costs before any discounts applied (required).</param>
        /// <param name="updated">Timestamp of the most recent event received on this session (required).</param>
        public CustomerSessionV2(string integrationId = default(string), DateTime created = default(DateTime), int applicationId = default(int), string profileId = default(string), List<string> couponCodes = default(List<string>), string referralCode = default(string), StateEnum state = StateEnum.Open, List<CartItem> cartItems = default(List<CartItem>), Dictionary<string, AdditionalCost> additionalCosts = default(Dictionary<string, AdditionalCost>), List<string> identifiers = default(List<string>), Object attributes = default(Object), bool firstSession = default(bool), decimal total = default(decimal), decimal cartItemTotal = default(decimal), decimal additionalCostTotal = default(decimal), DateTime updated = default(DateTime))
        {
            // to ensure "integrationId" is required (not null)
            this.IntegrationId = integrationId ?? throw new ArgumentNullException("integrationId is a required property for CustomerSessionV2 and cannot be null");
            this.Created = created;
            this.ApplicationId = applicationId;
            // to ensure "profileId" is required (not null)
            this.ProfileId = profileId ?? throw new ArgumentNullException("profileId is a required property for CustomerSessionV2 and cannot be null");
            this.State = state;
            // to ensure "cartItems" is required (not null)
            this.CartItems = cartItems ?? throw new ArgumentNullException("cartItems is a required property for CustomerSessionV2 and cannot be null");
            // to ensure "attributes" is required (not null)
            this.Attributes = attributes ?? throw new ArgumentNullException("attributes is a required property for CustomerSessionV2 and cannot be null");
            this.FirstSession = firstSession;
            this.Total = total;
            this.CartItemTotal = cartItemTotal;
            this.AdditionalCostTotal = additionalCostTotal;
            this.Updated = updated;
            this.CouponCodes = couponCodes;
            this.ReferralCode = referralCode;
            this.AdditionalCosts = additionalCosts;
            this.Identifiers = identifiers;
        }
        
        /// <summary>
        /// The integration ID for this entity sent to and used in the Talon.One system.
        /// </summary>
        /// <value>The integration ID for this entity sent to and used in the Talon.One system.</value>
        [DataMember(Name="integrationId", EmitDefaultValue=false)]
        public string IntegrationId { get; set; }

        /// <summary>
        /// The exact moment this entity was created.
        /// </summary>
        /// <value>The exact moment this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The ID of the application that owns this entity.
        /// </summary>
        /// <value>The ID of the application that owns this entity.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int ApplicationId { get; set; }

        /// <summary>
        /// ID of the customers profile as used within this Talon.One account. May be omitted or set to the empty string if the customer does not yet have a known profile ID.
        /// </summary>
        /// <value>ID of the customers profile as used within this Talon.One account. May be omitted or set to the empty string if the customer does not yet have a known profile ID.</value>
        [DataMember(Name="profileId", EmitDefaultValue=false)]
        public string ProfileId { get; set; }

        /// <summary>
        /// Any coupon codes entered.
        /// </summary>
        /// <value>Any coupon codes entered.</value>
        [DataMember(Name="couponCodes", EmitDefaultValue=false)]
        public List<string> CouponCodes { get; set; }

        /// <summary>
        /// Any referral code entered.
        /// </summary>
        /// <value>Any referral code entered.</value>
        [DataMember(Name="referralCode", EmitDefaultValue=false)]
        public string ReferralCode { get; set; }

        /// <summary>
        /// All items the customer will be purchasing in this session
        /// </summary>
        /// <value>All items the customer will be purchasing in this session</value>
        [DataMember(Name="cartItems", EmitDefaultValue=false)]
        public List<CartItem> CartItems { get; set; }

        /// <summary>
        /// Any costs associated with the session that can not be explicitly attributed to cart items. Examples include shipping costs and service fees.
        /// </summary>
        /// <value>Any costs associated with the session that can not be explicitly attributed to cart items. Examples include shipping costs and service fees.</value>
        [DataMember(Name="additionalCosts", EmitDefaultValue=false)]
        public Dictionary<string, AdditionalCost> AdditionalCosts { get; set; }

        /// <summary>
        /// Session custom identifiers that you can set limits on or use inside your rules.  For example, you can use IP addresses as identifiers to potentially identify devices and limit discounts abuse in case of customers creating multiple accounts. 
        /// </summary>
        /// <value>Session custom identifiers that you can set limits on or use inside your rules.  For example, you can use IP addresses as identifiers to potentially identify devices and limit discounts abuse in case of customers creating multiple accounts. </value>
        [DataMember(Name="identifiers", EmitDefaultValue=false)]
        public List<string> Identifiers { get; set; }

        /// <summary>
        /// A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings. 
        /// </summary>
        /// <value>A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings. </value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }

        /// <summary>
        /// Indicates whether this is the first session for the customer&#39;s profile. Will always be true for anonymous sessions.
        /// </summary>
        /// <value>Indicates whether this is the first session for the customer&#39;s profile. Will always be true for anonymous sessions.</value>
        [DataMember(Name="firstSession", EmitDefaultValue=false)]
        public bool FirstSession { get; set; }

        /// <summary>
        /// The total sum of cart-items, as well as additional costs, before any discounts applied
        /// </summary>
        /// <value>The total sum of cart-items, as well as additional costs, before any discounts applied</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal Total { get; set; }

        /// <summary>
        /// The total sum of cart-items before any discounts applied
        /// </summary>
        /// <value>The total sum of cart-items before any discounts applied</value>
        [DataMember(Name="cartItemTotal", EmitDefaultValue=false)]
        public decimal CartItemTotal { get; set; }

        /// <summary>
        /// The total sum of additional costs before any discounts applied
        /// </summary>
        /// <value>The total sum of additional costs before any discounts applied</value>
        [DataMember(Name="additionalCostTotal", EmitDefaultValue=false)]
        public decimal AdditionalCostTotal { get; set; }

        /// <summary>
        /// Timestamp of the most recent event received on this session
        /// </summary>
        /// <value>Timestamp of the most recent event received on this session</value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerSessionV2 {\n");
            sb.Append("  IntegrationId: ").Append(IntegrationId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  CouponCodes: ").Append(CouponCodes).Append("\n");
            sb.Append("  ReferralCode: ").Append(ReferralCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CartItems: ").Append(CartItems).Append("\n");
            sb.Append("  AdditionalCosts: ").Append(AdditionalCosts).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  FirstSession: ").Append(FirstSession).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  CartItemTotal: ").Append(CartItemTotal).Append("\n");
            sb.Append("  AdditionalCostTotal: ").Append(AdditionalCostTotal).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerSessionV2);
        }

        /// <summary>
        /// Returns true if CustomerSessionV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerSessionV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerSessionV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IntegrationId == input.IntegrationId ||
                    (this.IntegrationId != null &&
                    this.IntegrationId.Equals(input.IntegrationId))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    this.ApplicationId.Equals(input.ApplicationId)
                ) && 
                (
                    this.ProfileId == input.ProfileId ||
                    (this.ProfileId != null &&
                    this.ProfileId.Equals(input.ProfileId))
                ) && 
                (
                    this.CouponCodes == input.CouponCodes ||
                    this.CouponCodes != null &&
                    input.CouponCodes != null &&
                    this.CouponCodes.SequenceEqual(input.CouponCodes)
                ) && 
                (
                    this.ReferralCode == input.ReferralCode ||
                    (this.ReferralCode != null &&
                    this.ReferralCode.Equals(input.ReferralCode))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.CartItems == input.CartItems ||
                    this.CartItems != null &&
                    input.CartItems != null &&
                    this.CartItems.SequenceEqual(input.CartItems)
                ) && 
                (
                    this.AdditionalCosts == input.AdditionalCosts ||
                    this.AdditionalCosts != null &&
                    input.AdditionalCosts != null &&
                    this.AdditionalCosts.SequenceEqual(input.AdditionalCosts)
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.FirstSession == input.FirstSession ||
                    this.FirstSession.Equals(input.FirstSession)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.CartItemTotal == input.CartItemTotal ||
                    this.CartItemTotal.Equals(input.CartItemTotal)
                ) && 
                (
                    this.AdditionalCostTotal == input.AdditionalCostTotal ||
                    this.AdditionalCostTotal.Equals(input.AdditionalCostTotal)
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IntegrationId != null)
                    hashCode = hashCode * 59 + this.IntegrationId.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.ProfileId != null)
                    hashCode = hashCode * 59 + this.ProfileId.GetHashCode();
                if (this.CouponCodes != null)
                    hashCode = hashCode * 59 + this.CouponCodes.GetHashCode();
                if (this.ReferralCode != null)
                    hashCode = hashCode * 59 + this.ReferralCode.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.CartItems != null)
                    hashCode = hashCode * 59 + this.CartItems.GetHashCode();
                if (this.AdditionalCosts != null)
                    hashCode = hashCode * 59 + this.AdditionalCosts.GetHashCode();
                if (this.Identifiers != null)
                    hashCode = hashCode * 59 + this.Identifiers.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                hashCode = hashCode * 59 + this.FirstSession.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                hashCode = hashCode * 59 + this.CartItemTotal.GetHashCode();
                hashCode = hashCode * 59 + this.AdditionalCostTotal.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReferralCode (string) maxLength
            if(this.ReferralCode != null && this.ReferralCode.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferralCode, length must be less than 100.", new [] { "ReferralCode" });
            }

            yield break;
        }
    }

}
