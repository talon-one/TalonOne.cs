/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// SummaryCampaignStoreBudget
    /// </summary>
    [DataContract]
    public partial class SummaryCampaignStoreBudget :  IEquatable<SummaryCampaignStoreBudget>, IValidatableObject
    {
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum RedeemCoupon for value: redeemCoupon
            /// </summary>
            [EnumMember(Value = "redeemCoupon")]
            RedeemCoupon = 1,

            /// <summary>
            /// Enum RedeemReferral for value: redeemReferral
            /// </summary>
            [EnumMember(Value = "redeemReferral")]
            RedeemReferral = 2,

            /// <summary>
            /// Enum SetDiscount for value: setDiscount
            /// </summary>
            [EnumMember(Value = "setDiscount")]
            SetDiscount = 3,

            /// <summary>
            /// Enum SetDiscountEffect for value: setDiscountEffect
            /// </summary>
            [EnumMember(Value = "setDiscountEffect")]
            SetDiscountEffect = 4,

            /// <summary>
            /// Enum CreateCoupon for value: createCoupon
            /// </summary>
            [EnumMember(Value = "createCoupon")]
            CreateCoupon = 5,

            /// <summary>
            /// Enum CreateReferral for value: createReferral
            /// </summary>
            [EnumMember(Value = "createReferral")]
            CreateReferral = 6,

            /// <summary>
            /// Enum CreateLoyaltyPoints for value: createLoyaltyPoints
            /// </summary>
            [EnumMember(Value = "createLoyaltyPoints")]
            CreateLoyaltyPoints = 7,

            /// <summary>
            /// Enum RedeemLoyaltyPoints for value: redeemLoyaltyPoints
            /// </summary>
            [EnumMember(Value = "redeemLoyaltyPoints")]
            RedeemLoyaltyPoints = 8,

            /// <summary>
            /// Enum CustomEffect for value: customEffect
            /// </summary>
            [EnumMember(Value = "customEffect")]
            CustomEffect = 9,

            /// <summary>
            /// Enum CreateLoyaltyPointsEffect for value: createLoyaltyPointsEffect
            /// </summary>
            [EnumMember(Value = "createLoyaltyPointsEffect")]
            CreateLoyaltyPointsEffect = 10,

            /// <summary>
            /// Enum RedeemLoyaltyPointsEffect for value: redeemLoyaltyPointsEffect
            /// </summary>
            [EnumMember(Value = "redeemLoyaltyPointsEffect")]
            RedeemLoyaltyPointsEffect = 11,

            /// <summary>
            /// Enum CallApi for value: callApi
            /// </summary>
            [EnumMember(Value = "callApi")]
            CallApi = 12,

            /// <summary>
            /// Enum AwardGiveaway for value: awardGiveaway
            /// </summary>
            [EnumMember(Value = "awardGiveaway")]
            AwardGiveaway = 13,

            /// <summary>
            /// Enum AddFreeItemEffect for value: addFreeItemEffect
            /// </summary>
            [EnumMember(Value = "addFreeItemEffect")]
            AddFreeItemEffect = 14,

            /// <summary>
            /// Enum ReserveCoupon for value: reserveCoupon
            /// </summary>
            [EnumMember(Value = "reserveCoupon")]
            ReserveCoupon = 15

        }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Defines Period
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            /// <summary>
            /// Enum Overall for value: overall
            /// </summary>
            [EnumMember(Value = "overall")]
            Overall = 1,

            /// <summary>
            /// Enum Daily for value: daily
            /// </summary>
            [EnumMember(Value = "daily")]
            Daily = 2,

            /// <summary>
            /// Enum Weekly for value: weekly
            /// </summary>
            [EnumMember(Value = "weekly")]
            Weekly = 3,

            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            [EnumMember(Value = "monthly")]
            Monthly = 4,

            /// <summary>
            /// Enum Yearly for value: yearly
            /// </summary>
            [EnumMember(Value = "yearly")]
            Yearly = 5

        }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public PeriodEnum? Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryCampaignStoreBudget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SummaryCampaignStoreBudget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryCampaignStoreBudget" /> class.
        /// </summary>
        /// <param name="action">action (required).</param>
        /// <param name="period">period.</param>
        /// <param name="storeCount">storeCount (required).</param>
        /// <param name="imported">imported (required).</param>
        public SummaryCampaignStoreBudget(ActionEnum action = default(ActionEnum), PeriodEnum? period = default(PeriodEnum?), int storeCount = default(int), bool imported = default(bool))
        {
            this.Action = action;
            this.StoreCount = storeCount;
            this.Imported = imported;
            this.Period = period;
        }
        
        /// <summary>
        /// Gets or Sets StoreCount
        /// </summary>
        [DataMember(Name="storeCount", EmitDefaultValue=false)]
        public int StoreCount { get; set; }

        /// <summary>
        /// Gets or Sets Imported
        /// </summary>
        [DataMember(Name="imported", EmitDefaultValue=false)]
        public bool Imported { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryCampaignStoreBudget {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  StoreCount: ").Append(StoreCount).Append("\n");
            sb.Append("  Imported: ").Append(Imported).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummaryCampaignStoreBudget);
        }

        /// <summary>
        /// Returns true if SummaryCampaignStoreBudget instances are equal
        /// </summary>
        /// <param name="input">Instance of SummaryCampaignStoreBudget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryCampaignStoreBudget input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                ) && 
                (
                    this.StoreCount == input.StoreCount ||
                    this.StoreCount.Equals(input.StoreCount)
                ) && 
                (
                    this.Imported == input.Imported ||
                    this.Imported.Equals(input.Imported)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Action.GetHashCode();
                hashCode = hashCode * 59 + this.Period.GetHashCode();
                hashCode = hashCode * 59 + this.StoreCount.GetHashCode();
                hashCode = hashCode * 59 + this.Imported.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
