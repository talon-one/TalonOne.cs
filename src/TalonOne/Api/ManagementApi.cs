/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TalonOne.Client;
using TalonOne.Model;
using Attribute = TalonOne.Model.Attribute;

namespace TalonOne.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add points in loyalty program for given customer
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        void AddLoyaltyPoints (string programID, string integrationID, LoyaltyPoints body);

        /// <summary>
        /// Add points in loyalty program for given customer
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLoyaltyPointsWithHttpInfo (string programID, string integrationID, LoyaltyPoints body);
        /// <summary>
        /// Copy the campaign into every specified application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into every specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 CopyCampaignToApplications (int applicationId, int campaignId, CampaignCopy body);

        /// <summary>
        /// Copy the campaign into every specified application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into every specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> CopyCampaignToApplicationsWithHttpInfo (int applicationId, int campaignId, CampaignCopy body);
        /// <summary>
        /// Define a new additional cost
        /// </summary>
        /// <remarks>
        /// Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost CreateAdditionalCost (NewAdditionalCost body);

        /// <summary>
        /// Define a new additional cost
        /// </summary>
        /// <remarks>
        /// Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> CreateAdditionalCostWithHttpInfo (NewAdditionalCost body);
        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Attribute</returns>
        Attribute CreateAttribute (NewAttribute body);

        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> CreateAttributeWithHttpInfo (NewAttribute body);
        /// <summary>
        /// Create campaign
        /// </summary>
        /// <remarks>
        /// Create a campaign. A campaign is part of an Application and contains a set of promotion rules.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <returns>Campaign</returns>
        Campaign CreateCampaign (int applicationId, NewCampaign body);

        /// <summary>
        /// Create campaign
        /// </summary>
        /// <remarks>
        /// Create a campaign. A campaign is part of an Application and contains a set of promotion rules.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> CreateCampaignWithHttpInfo (int applicationId, NewCampaign body);
        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 CreateCoupons (int applicationId, int campaignId, NewCoupons body, string silent = default(string));

        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> CreateCouponsWithHttpInfo (int applicationId, int campaignId, NewCoupons body, string silent = default(string));
        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 CreateCouponsForMultipleRecipients (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));

        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> CreateCouponsForMultipleRecipientsWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));
        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>NewPasswordEmail</returns>
        NewPasswordEmail CreatePasswordRecoveryEmail (NewPasswordEmail body);

        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of NewPasswordEmail</returns>
        ApiResponse<NewPasswordEmail> CreatePasswordRecoveryEmailWithHttpInfo (NewPasswordEmail body);
        /// <summary>
        /// Create ruleset
        /// </summary>
        /// <remarks>
        /// Create a set of rules. A ruleset is a revision of all the rules of a campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Ruleset</returns>
        Ruleset CreateRuleset (int applicationId, int campaignId, NewRuleset body);

        /// <summary>
        /// Create ruleset
        /// </summary>
        /// <remarks>
        /// Create a set of rules. A ruleset is a revision of all the rules of a campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        ApiResponse<Ruleset> CreateRulesetWithHttpInfo (int applicationId, int campaignId, NewRuleset body);
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Session</returns>
        Session CreateSession (LoginParams body);

        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Session</returns>
        ApiResponse<Session> CreateSessionWithHttpInfo (LoginParams body);
        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns></returns>
        void DeleteCampaign (int applicationId, int campaignId);

        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCampaignWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns></returns>
        void DeleteCoupon (int applicationId, int campaignId, string couponId);

        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponWithHttpInfo (int applicationId, int campaignId, string couponId);
        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns></returns>
        void DeleteCoupons (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponsWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns></returns>
        void DeleteReferral (int applicationId, int campaignId, string referralId);

        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReferralWithHttpInfo (int applicationId, int campaignId, string referralId);
        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DestroySession ();

        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroySessionWithHttpInfo ();
        /// <summary>
        /// Export coupons to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the coupons that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>string</returns>
        string ExportCoupons (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));

        /// <summary>
        /// Export coupons to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the coupons that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCouponsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));
        /// <summary>
        /// Export customer sessions to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the customer sessions that match the request.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>string</returns>
        string ExportCustomerSessions (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));

        /// <summary>
        /// Export customer sessions to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the customer sessions that match the request.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCustomerSessionsWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));
        /// <summary>
        /// Export triggered effects to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the triggered effects that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportEffects (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));

        /// <summary>
        /// Export triggered effects to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the triggered effects that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportEffectsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));
        /// <summary>
        /// Export customer loyalty balance to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the balance of each customer in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>string</returns>
        string ExportLoyaltyBalance (string programID);

        /// <summary>
        /// Export customer loyalty balance to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the balance of each customer in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyBalanceWithHttpInfo (string programID);
        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with a customer&#39;s ledger log in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyLedger (DateTime rangeStart, DateTime rangeEnd, string programID, string integrationID, string dateFormat = default(string));

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with a customer&#39;s ledger log in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyLedgerWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string programID, string integrationID, string dateFormat = default(string));
        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls to this Application matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetAccessLogsWithoutTotalCount (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls to this Application matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetAccessLogsWithoutTotalCountWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Account</returns>
        Account GetAccount (int accountId);

        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> GetAccountWithHttpInfo (int accountId);
        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>AccountAnalytics</returns>
        AccountAnalytics GetAccountAnalytics (int accountId);

        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of AccountAnalytics</returns>
        ApiResponse<AccountAnalytics> GetAccountAnalyticsWithHttpInfo (int accountId);
        /// <summary>
        /// Get an additional cost
        /// </summary>
        /// <remarks>
        /// Returns additional cost for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost GetAdditionalCost (int additionalCostId);

        /// <summary>
        /// Get an additional cost
        /// </summary>
        /// <remarks>
        /// Returns additional cost for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> GetAdditionalCostWithHttpInfo (int additionalCostId);
        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GetAdditionalCosts (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GetAdditionalCostsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetAllAccessLogs (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetAllAccessLogsWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 GetAllRoles ();

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> GetAllRolesWithHttpInfo ();
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Application</returns>
        Application GetApplication (int applicationId);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> GetApplicationWithHttpInfo (int applicationId);
        /// <summary>
        /// Get report of health of application API
        /// </summary>
        /// <remarks>
        /// Display the health of the application and show the last time the Application was used. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApplicationApiHealth</returns>
        ApplicationApiHealth GetApplicationApiHealth (int applicationId);

        /// <summary>
        /// Get report of health of application API
        /// </summary>
        /// <remarks>
        /// Display the health of the application and show the last time the Application was used. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of ApplicationApiHealth</returns>
        ApiResponse<ApplicationApiHealth> GetApplicationApiHealthWithHttpInfo (int applicationId);
        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application.  The &#x60;customerId&#x60; parameter is the value of the &#x60;id&#x60; property of a customer profile. Get it with the [List application&#39;s customers](#operation/getApplicationCustomers) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>ApplicationCustomer</returns>
        ApplicationCustomer GetApplicationCustomer (int applicationId, int customerId);

        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application.  The &#x60;customerId&#x60; parameter is the value of the &#x60;id&#x60; property of a customer profile. Get it with the [List application&#39;s customers](#operation/getApplicationCustomers) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of ApplicationCustomer</returns>
        ApiResponse<ApplicationCustomer> GetApplicationCustomerWithHttpInfo (int applicationId, int customerId);
        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 GetApplicationCustomerFriends (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> GetApplicationCustomerFriendsWithHttpInfo (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetApplicationCustomers (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetApplicationCustomersWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetApplicationCustomersByAttributes (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetApplicationCustomersByAttributesWithHttpInfo (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/#operation/trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GetApplicationEventTypes (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/#operation/trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GetApplicationEventTypesWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 GetApplicationEventsWithoutTotalCount (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));

        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> GetApplicationEventsWithoutTotalCountWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));
        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List application sessions](#operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>ApplicationSession</returns>
        ApplicationSession GetApplicationSession (int applicationId, int sessionId);

        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List application sessions](#operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>ApiResponse of ApplicationSession</returns>
        ApiResponse<ApplicationSession> GetApplicationSessionWithHttpInfo (int applicationId, int sessionId);
        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GetApplicationSessions (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));

        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GetApplicationSessionsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all application in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetApplications (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all application in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetApplicationsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get a custom attribute
        /// </summary>
        /// <remarks>
        /// Returns custom attribute for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Attribute</returns>
        Attribute GetAttribute (int attributeId);

        /// <summary>
        /// Get a custom attribute
        /// </summary>
        /// <remarks>
        /// Returns custom attribute for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> GetAttributeWithHttpInfo (int attributeId);
        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Returns all the defined custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GetAttributes (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));

        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Returns all the defined custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GetAttributesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));
        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get All audiences created in the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 GetAudiences (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get All audiences created in the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> GetAudiencesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Campaign</returns>
        Campaign GetCampaign (int applicationId, int campaignId);

        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> GetCampaignWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 GetCampaignAnalytics (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));

        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> GetCampaignAnalyticsWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));
        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetCampaignByAttributes (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));

        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetCampaignByAttributesWithHttpInfo (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));
        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List all the campaigns of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetCampaigns (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?));

        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List all the campaigns of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetCampaignsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?));
        /// <summary>
        /// Get audit log for an account
        /// </summary>
        /// <remarks>
        /// Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GetChanges (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?));

        /// <summary>
        /// Get audit log for an account
        /// </summary>
        /// <remarks>
        /// Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GetChangesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?));
        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetCouponsByAttributes (int applicationId, int campaignId, CouponSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetCouponsByAttributesWithHttpInfo (int applicationId, int campaignId, CouponSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetCouponsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetCouponsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>CustomerActivityReport</returns>
        CustomerActivityReport GetCustomerActivityReport (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of CustomerActivityReport</returns>
        ApiResponse<CustomerActivityReport> GetCustomerActivityReportWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 GetCustomerActivityReportsWithoutTotalCount (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));

        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> GetCustomerActivityReportsWithoutTotalCountWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));
        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>CustomerAnalytics</returns>
        CustomerAnalytics GetCustomerAnalytics (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of CustomerAnalytics</returns>
        ApiResponse<CustomerAnalytics> GetCustomerAnalyticsWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  **Performance tip:** You can retrieve the same information via the Integration API, which can save you extra API requests. Consider these options: - Request the customer profile to be part of the response content using   [Update Customer Session](/integration-api/operation#updateCustomerSessionV2). - Send an empty update with the [Update Customer Profile](/integration-api/#operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>CustomerProfile</returns>
        CustomerProfile GetCustomerProfile (int customerId);

        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  **Performance tip:** You can retrieve the same information via the Integration API, which can save you extra API requests. Consider these options: - Request the customer profile to be part of the response content using   [Update Customer Session](/integration-api/operation#updateCustomerSessionV2). - Send an empty update with the [Update Customer Profile](/integration-api/#operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of CustomerProfile</returns>
        ApiResponse<CustomerProfile> GetCustomerProfileWithHttpInfo (int customerId);
        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetCustomerProfiles (int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetCustomerProfilesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetCustomersByAttributes (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetCustomersByAttributesWithHttpInfo (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List Event Types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GetEventTypes (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Event Types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GetEventTypesWithHttpInfo (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get Exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 GetExports (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string));

        /// <summary>
        /// Get Exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> GetExportsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string));
        /// <summary>
        /// Get the Loyalty Ledger for this integrationID
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the application, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>LoyaltyLedger</returns>
        LoyaltyLedger GetLoyaltyPoints (string programID, string integrationID);

        /// <summary>
        /// Get the Loyalty Ledger for this integrationID
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the application, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>ApiResponse of LoyaltyLedger</returns>
        ApiResponse<LoyaltyLedger> GetLoyaltyPointsWithHttpInfo (string programID, string integrationID);
        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://www.talon.one/glossary/loyalty). To list all loyalty programs, use [List loyalty programs](#operation/getLoyaltyPrograms). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>LoyaltyProgram</returns>
        LoyaltyProgram GetLoyaltyProgram (int programID);

        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://www.talon.one/glossary/loyalty). To list all loyalty programs, use [List loyalty programs](#operation/getLoyaltyPrograms). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        ApiResponse<LoyaltyProgram> GetLoyaltyProgramWithHttpInfo (int programID);
        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetLoyaltyPrograms ();

        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetLoyaltyProgramsWithHttpInfo ();
        /// <summary>
        /// Get loyalty program statistics by loyalty program ID
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points and expired points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>LoyaltyStatistics</returns>
        LoyaltyStatistics GetLoyaltyStatistics (string programID);

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points and expired points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>ApiResponse of LoyaltyStatistics</returns>
        ApiResponse<LoyaltyStatistics> GetLoyaltyStatisticsWithHttpInfo (string programID);
        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetReferralsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));

        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetReferralsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));
        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Role</returns>
        Role GetRole (int roleId);

        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleWithHttpInfo (int roleId);
        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Ruleset</returns>
        Ruleset GetRuleset (int applicationId, int campaignId, int rulesetId);

        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        ApiResponse<Ruleset> GetRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId);
        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetRulesets (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetRulesetsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get a single user
        /// </summary>
        /// <remarks>
        /// Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        User GetUser (int userId);

        /// <summary>
        /// Get a single user
        /// </summary>
        /// <remarks>
        /// Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo (int userId);
        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GetUsers (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GetUsersWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns an webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Webhook</returns>
        Webhook GetWebhook (int webhookId);

        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns an webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> GetWebhookWithHttpInfo (int webhookId);
        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 GetWebhookActivationLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> GetWebhookActivationLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GetWebhookLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GetWebhookLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GetWebhooks (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GetWebhooksWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Import coupons via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Defaults to &#x60;1&#x60; when not provided. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use thhe timezone of your choice. It is converted to UTC internally by Talon.One.  Example:  &#x60;&#x60;&#x60; \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#operation/getReservedCustomers). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportCoupons (int applicationId, int campaignId, string upFile = default(string));

        /// <summary>
        /// Import coupons via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Defaults to &#x60;1&#x60; when not provided. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use thhe timezone of your choice. It is converted to UTC internally by Talon.One.  Example:  &#x60;&#x60;&#x60; \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#operation/getReservedCustomers). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportCouponsWithHttpInfo (int applicationId, int campaignId, string upFile = default(string));
        /// <summary>
        /// Import loyalty points via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the [loyalty](https://www.talon.one/glossary/loyalty) points that should be created. The file should be sent as multipart data.\&quot; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportLoyaltyPoints (int programID, string upFile = default(string));

        /// <summary>
        /// Import loyalty points via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the [loyalty](https://www.talon.one/glossary/loyalty) points that should be created. The file should be sent as multipart data.\&quot; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportLoyaltyPointsWithHttpInfo (int programID, string upFile = default(string));
        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportPoolGiveaways (int poolId, string upFile = default(string));

        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportPoolGiveawaysWithHttpInfo (int poolId, string upFile = default(string));
        /// <summary>
        /// Import referrals via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportReferrals (int applicationId, int campaignId, string upFile = default(string));

        /// <summary>
        /// Import referrals via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportReferralsWithHttpInfo (int applicationId, int campaignId, string upFile = default(string));
        /// <summary>
        /// Deduct points in loyalty program for given customer
        /// </summary>
        /// <remarks>
        /// Remove points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        void RemoveLoyaltyPoints (string programID, string integrationID, LoyaltyPoints body);

        /// <summary>
        /// Deduct points in loyalty program for given customer
        /// </summary>
        /// <remarks>
        /// Remove points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveLoyaltyPointsWithHttpInfo (string programID, string integrationID, LoyaltyPoints body);
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>NewPassword</returns>
        NewPassword ResetPassword (NewPassword body);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of NewPassword</returns>
        ApiResponse<NewPassword> ResetPasswordWithHttpInfo (NewPassword body);
        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 SearchCouponsAdvancedApplicationWideWithoutTotalCount (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 SearchCouponsAdvancedWithoutTotalCount (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> SearchCouponsAdvancedWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// Update an additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="body"></param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost UpdateAdditionalCost (int additionalCostId, NewAdditionalCost body);

        /// <summary>
        /// Update an additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> UpdateAdditionalCostWithHttpInfo (int additionalCostId, NewAdditionalCost body);
        /// <summary>
        /// Update a custom attribute
        /// </summary>
        /// <remarks>
        /// Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="body"></param>
        /// <returns>Attribute</returns>
        Attribute UpdateAttribute (int attributeId, NewAttribute body);

        /// <summary>
        /// Update a custom attribute
        /// </summary>
        /// <remarks>
        /// Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> UpdateAttributeWithHttpInfo (int attributeId, NewAttribute body);
        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Campaign</returns>
        Campaign UpdateCampaign (int applicationId, int campaignId, UpdateCampaign body);

        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> UpdateCampaignWithHttpInfo (int applicationId, int campaignId, UpdateCampaign body);
        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="body"></param>
        /// <returns>Coupon</returns>
        Coupon UpdateCoupon (int applicationId, int campaignId, string couponId, UpdateCoupon body);

        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Coupon</returns>
        ApiResponse<Coupon> UpdateCouponWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon body);
        /// <summary>
        /// Update a batch of coupons
        /// </summary>
        /// <remarks>
        /// Update a batch of coupons. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager or by using [List coupons](#operation/getCouponsWithoutTotalCount).  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        void UpdateCouponBatch (int applicationId, int campaignId, UpdateCouponBatch body);

        /// <summary>
        /// Update a batch of coupons
        /// </summary>
        /// <remarks>
        /// Update a batch of coupons. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager or by using [List coupons](#operation/getCouponsWithoutTotalCount).  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCouponBatchWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch body);
        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="body"></param>
        /// <returns>Referral</returns>
        Referral UpdateReferral (int applicationId, int campaignId, string referralId, UpdateReferral body);

        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Referral</returns>
        ApiResponse<Referral> UpdateReferralWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral body);
        /// <summary>
        /// Update ruleset
        /// </summary>
        /// <remarks>
        /// Update a ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="body"></param>
        /// <returns>Ruleset</returns>
        Ruleset UpdateRuleset (int applicationId, int campaignId, int rulesetId, NewRuleset body);

        /// <summary>
        /// Update ruleset
        /// </summary>
        /// <remarks>
        /// Update a ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        ApiResponse<Ruleset> UpdateRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId, NewRuleset body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add points in loyalty program for given customer
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLoyaltyPointsAsync (string programID, string integrationID, LoyaltyPoints body);

        /// <summary>
        /// Add points in loyalty program for given customer
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLoyaltyPointsAsyncWithHttpInfo (string programID, string integrationID, LoyaltyPoints body);
        /// <summary>
        /// Copy the campaign into every specified application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into every specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> CopyCampaignToApplicationsAsync (int applicationId, int campaignId, CampaignCopy body);

        /// <summary>
        /// Copy the campaign into every specified application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into every specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CopyCampaignToApplicationsAsyncWithHttpInfo (int applicationId, int campaignId, CampaignCopy body);
        /// <summary>
        /// Define a new additional cost
        /// </summary>
        /// <remarks>
        /// Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> CreateAdditionalCostAsync (NewAdditionalCost body);

        /// <summary>
        /// Define a new additional cost
        /// </summary>
        /// <remarks>
        /// Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> CreateAdditionalCostAsyncWithHttpInfo (NewAdditionalCost body);
        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> CreateAttributeAsync (NewAttribute body);

        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> CreateAttributeAsyncWithHttpInfo (NewAttribute body);
        /// <summary>
        /// Create campaign
        /// </summary>
        /// <remarks>
        /// Create a campaign. A campaign is part of an Application and contains a set of promotion rules.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> CreateCampaignAsync (int applicationId, NewCampaign body);

        /// <summary>
        /// Create campaign
        /// </summary>
        /// <remarks>
        /// Create a campaign. A campaign is part of an Application and contains a set of promotion rules.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> CreateCampaignAsyncWithHttpInfo (int applicationId, NewCampaign body);
        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> CreateCouponsAsync (int applicationId, int campaignId, NewCoupons body, string silent = default(string));

        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> CreateCouponsAsyncWithHttpInfo (int applicationId, int campaignId, NewCoupons body, string silent = default(string));
        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> CreateCouponsForMultipleRecipientsAsync (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));

        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> CreateCouponsForMultipleRecipientsAsyncWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));
        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of NewPasswordEmail</returns>
        System.Threading.Tasks.Task<NewPasswordEmail> CreatePasswordRecoveryEmailAsync (NewPasswordEmail body);

        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (NewPasswordEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewPasswordEmail>> CreatePasswordRecoveryEmailAsyncWithHttpInfo (NewPasswordEmail body);
        /// <summary>
        /// Create ruleset
        /// </summary>
        /// <remarks>
        /// Create a set of rules. A ruleset is a revision of all the rules of a campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Ruleset</returns>
        System.Threading.Tasks.Task<Ruleset> CreateRulesetAsync (int applicationId, int campaignId, NewRuleset body);

        /// <summary>
        /// Create ruleset
        /// </summary>
        /// <remarks>
        /// Create a set of rules. A ruleset is a revision of all the rules of a campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ruleset>> CreateRulesetAsyncWithHttpInfo (int applicationId, int campaignId, NewRuleset body);
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Session</returns>
        System.Threading.Tasks.Task<Session> CreateSessionAsync (LoginParams body);

        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Session)</returns>
        System.Threading.Tasks.Task<ApiResponse<Session>> CreateSessionAsyncWithHttpInfo (LoginParams body);
        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCampaignAsync (int applicationId, int campaignId);

        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCampaignAsyncWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponAsync (int applicationId, int campaignId, string couponId);

        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId);
        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponsAsync (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReferralAsync (int applicationId, int campaignId, string referralId);

        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId);
        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroySessionAsync ();

        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroySessionAsyncWithHttpInfo ();
        /// <summary>
        /// Export coupons to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the coupons that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCouponsAsync (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));

        /// <summary>
        /// Export coupons to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the coupons that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCouponsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));
        /// <summary>
        /// Export customer sessions to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the customer sessions that match the request.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCustomerSessionsAsync (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));

        /// <summary>
        /// Export customer sessions to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the customer sessions that match the request.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCustomerSessionsAsyncWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));
        /// <summary>
        /// Export triggered effects to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the triggered effects that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportEffectsAsync (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));

        /// <summary>
        /// Export triggered effects to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file containing the triggered effects that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportEffectsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));
        /// <summary>
        /// Export customer loyalty balance to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the balance of each customer in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyBalanceAsync (string programID);

        /// <summary>
        /// Export customer loyalty balance to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the balance of each customer in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyBalanceAsyncWithHttpInfo (string programID);
        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with a customer&#39;s ledger log in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyLedgerAsync (DateTime rangeStart, DateTime rangeEnd, string programID, string integrationID, string dateFormat = default(string));

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with a customer&#39;s ledger log in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyLedgerAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string programID, string integrationID, string dateFormat = default(string));
        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls to this Application matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetAccessLogsWithoutTotalCountAsync (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls to this Application matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetAccessLogsWithoutTotalCountAsyncWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> GetAccountAsync (int accountId);

        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> GetAccountAsyncWithHttpInfo (int accountId);
        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of AccountAnalytics</returns>
        System.Threading.Tasks.Task<AccountAnalytics> GetAccountAnalyticsAsync (int accountId);

        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of ApiResponse (AccountAnalytics)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAnalytics>> GetAccountAnalyticsAsyncWithHttpInfo (int accountId);
        /// <summary>
        /// Get an additional cost
        /// </summary>
        /// <remarks>
        /// Returns additional cost for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> GetAdditionalCostAsync (int additionalCostId);

        /// <summary>
        /// Get an additional cost
        /// </summary>
        /// <remarks>
        /// Returns additional cost for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> GetAdditionalCostAsyncWithHttpInfo (int additionalCostId);
        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GetAdditionalCostsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetAdditionalCostsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetAllAccessLogsAsync (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetAllAccessLogsAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> GetAllRolesAsync ();

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetAllRolesAsyncWithHttpInfo ();
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> GetApplicationAsync (int applicationId);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationAsyncWithHttpInfo (int applicationId);
        /// <summary>
        /// Get report of health of application API
        /// </summary>
        /// <remarks>
        /// Display the health of the application and show the last time the Application was used. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApplicationApiHealth</returns>
        System.Threading.Tasks.Task<ApplicationApiHealth> GetApplicationApiHealthAsync (int applicationId);

        /// <summary>
        /// Get report of health of application API
        /// </summary>
        /// <remarks>
        /// Display the health of the application and show the last time the Application was used. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (ApplicationApiHealth)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiHealth>> GetApplicationApiHealthAsyncWithHttpInfo (int applicationId);
        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application.  The &#x60;customerId&#x60; parameter is the value of the &#x60;id&#x60; property of a customer profile. Get it with the [List application&#39;s customers](#operation/getApplicationCustomers) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of ApplicationCustomer</returns>
        System.Threading.Tasks.Task<ApplicationCustomer> GetApplicationCustomerAsync (int applicationId, int customerId);

        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application.  The &#x60;customerId&#x60; parameter is the value of the &#x60;id&#x60; property of a customer profile. Get it with the [List application&#39;s customers](#operation/getApplicationCustomers) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (ApplicationCustomer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationCustomer>> GetApplicationCustomerAsyncWithHttpInfo (int applicationId, int customerId);
        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> GetApplicationCustomerFriendsAsync (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetApplicationCustomerFriendsAsyncWithHttpInfo (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetApplicationCustomersAsync (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetApplicationCustomersAsyncWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetApplicationCustomersByAttributesAsync (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetApplicationCustomersByAttributesAsyncWithHttpInfo (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/#operation/trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GetApplicationEventTypesAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/#operation/trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetApplicationEventTypesAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> GetApplicationEventsWithoutTotalCountAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));

        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));
        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List application sessions](#operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>Task of ApplicationSession</returns>
        System.Threading.Tasks.Task<ApplicationSession> GetApplicationSessionAsync (int applicationId, int sessionId);

        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List application sessions](#operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>Task of ApiResponse (ApplicationSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationSession>> GetApplicationSessionAsyncWithHttpInfo (int applicationId, int sessionId);
        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GetApplicationSessionsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));

        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetApplicationSessionsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all application in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetApplicationsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all application in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetApplicationsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get a custom attribute
        /// </summary>
        /// <remarks>
        /// Returns custom attribute for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> GetAttributeAsync (int attributeId);

        /// <summary>
        /// Get a custom attribute
        /// </summary>
        /// <remarks>
        /// Returns custom attribute for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> GetAttributeAsyncWithHttpInfo (int attributeId);
        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Returns all the defined custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GetAttributesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));

        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Returns all the defined custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetAttributesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));
        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get All audiences created in the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> GetAudiencesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get All audiences created in the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetAudiencesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> GetCampaignAsync (int applicationId, int campaignId);

        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> GetCampaignAsyncWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> GetCampaignAnalyticsAsync (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));

        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> GetCampaignAnalyticsAsyncWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));
        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetCampaignByAttributesAsync (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));

        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetCampaignByAttributesAsyncWithHttpInfo (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));
        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List all the campaigns of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetCampaignsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?));

        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List all the campaigns of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetCampaignsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?));
        /// <summary>
        /// Get audit log for an account
        /// </summary>
        /// <remarks>
        /// Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GetChangesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?));

        /// <summary>
        /// Get audit log for an account
        /// </summary>
        /// <remarks>
        /// Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetChangesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?));
        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetCouponsByAttributesAsync (int applicationId, int campaignId, CouponSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetCouponsByAttributesAsyncWithHttpInfo (int applicationId, int campaignId, CouponSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetCouponsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetCouponsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of CustomerActivityReport</returns>
        System.Threading.Tasks.Task<CustomerActivityReport> GetCustomerActivityReportAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (CustomerActivityReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerActivityReport>> GetCustomerActivityReportAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> GetCustomerActivityReportsWithoutTotalCountAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));

        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));
        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of CustomerAnalytics</returns>
        System.Threading.Tasks.Task<CustomerAnalytics> GetCustomerAnalyticsAsync (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (CustomerAnalytics)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerAnalytics>> GetCustomerAnalyticsAsyncWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  **Performance tip:** You can retrieve the same information via the Integration API, which can save you extra API requests. Consider these options: - Request the customer profile to be part of the response content using   [Update Customer Session](/integration-api/operation#updateCustomerSessionV2). - Send an empty update with the [Update Customer Profile](/integration-api/#operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of CustomerProfile</returns>
        System.Threading.Tasks.Task<CustomerProfile> GetCustomerProfileAsync (int customerId);

        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  **Performance tip:** You can retrieve the same information via the Integration API, which can save you extra API requests. Consider these options: - Request the customer profile to be part of the response content using   [Update Customer Session](/integration-api/operation#updateCustomerSessionV2). - Send an empty update with the [Update Customer Profile](/integration-api/#operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (CustomerProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerProfile>> GetCustomerProfileAsyncWithHttpInfo (int customerId);
        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetCustomerProfilesAsync (int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetCustomerProfilesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetCustomersByAttributesAsync (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetCustomersByAttributesAsyncWithHttpInfo (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List Event Types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GetEventTypesAsync (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Event Types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetEventTypesAsyncWithHttpInfo (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get Exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> GetExportsAsync (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string));

        /// <summary>
        /// Get Exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GetExportsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string));
        /// <summary>
        /// Get the Loyalty Ledger for this integrationID
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the application, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>Task of LoyaltyLedger</returns>
        System.Threading.Tasks.Task<LoyaltyLedger> GetLoyaltyPointsAsync (string programID, string integrationID);

        /// <summary>
        /// Get the Loyalty Ledger for this integrationID
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the application, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>Task of ApiResponse (LoyaltyLedger)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyLedger>> GetLoyaltyPointsAsyncWithHttpInfo (string programID, string integrationID);
        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://www.talon.one/glossary/loyalty). To list all loyalty programs, use [List loyalty programs](#operation/getLoyaltyPrograms). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of LoyaltyProgram</returns>
        System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramAsync (int programID);

        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://www.talon.one/glossary/loyalty). To list all loyalty programs, use [List loyalty programs](#operation/getLoyaltyPrograms). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> GetLoyaltyProgramAsyncWithHttpInfo (int programID);
        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetLoyaltyProgramsAsync ();

        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetLoyaltyProgramsAsyncWithHttpInfo ();
        /// <summary>
        /// Get loyalty program statistics by loyalty program ID
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points and expired points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of LoyaltyStatistics</returns>
        System.Threading.Tasks.Task<LoyaltyStatistics> GetLoyaltyStatisticsAsync (string programID);

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points and expired points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of ApiResponse (LoyaltyStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyStatistics>> GetLoyaltyStatisticsAsyncWithHttpInfo (string programID);
        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetReferralsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));

        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetReferralsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));
        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleAsync (int roleId);

        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (int roleId);
        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of Ruleset</returns>
        System.Threading.Tasks.Task<Ruleset> GetRulesetAsync (int applicationId, int campaignId, int rulesetId);

        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ruleset>> GetRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId);
        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetRulesetsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetRulesetsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get a single user
        /// </summary>
        /// <remarks>
        /// Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync (int userId);

        /// <summary>
        /// Get a single user
        /// </summary>
        /// <remarks>
        /// Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (int userId);
        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GetUsersAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GetUsersAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns an webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> GetWebhookAsync (int webhookId);

        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns an webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (int webhookId);
        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> GetWebhookActivationLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetWebhookActivationLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GetWebhookLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetWebhookLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GetWebhooksAsync (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetWebhooksAsyncWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Import coupons via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Defaults to &#x60;1&#x60; when not provided. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use thhe timezone of your choice. It is converted to UTC internally by Talon.One.  Example:  &#x60;&#x60;&#x60; \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#operation/getReservedCustomers). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportCouponsAsync (int applicationId, int campaignId, string upFile = default(string));

        /// <summary>
        /// Import coupons via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Defaults to &#x60;1&#x60; when not provided. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use thhe timezone of your choice. It is converted to UTC internally by Talon.One.  Example:  &#x60;&#x60;&#x60; \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#operation/getReservedCustomers). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string upFile = default(string));
        /// <summary>
        /// Import loyalty points via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the [loyalty](https://www.talon.one/glossary/loyalty) points that should be created. The file should be sent as multipart data.\&quot; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportLoyaltyPointsAsync (int programID, string upFile = default(string));

        /// <summary>
        /// Import loyalty points via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the [loyalty](https://www.talon.one/glossary/loyalty) points that should be created. The file should be sent as multipart data.\&quot; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportLoyaltyPointsAsyncWithHttpInfo (int programID, string upFile = default(string));
        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportPoolGiveawaysAsync (int poolId, string upFile = default(string));

        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportPoolGiveawaysAsyncWithHttpInfo (int poolId, string upFile = default(string));
        /// <summary>
        /// Import referrals via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportReferralsAsync (int applicationId, int campaignId, string upFile = default(string));

        /// <summary>
        /// Import referrals via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportReferralsAsyncWithHttpInfo (int applicationId, int campaignId, string upFile = default(string));
        /// <summary>
        /// Deduct points in loyalty program for given customer
        /// </summary>
        /// <remarks>
        /// Remove points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveLoyaltyPointsAsync (string programID, string integrationID, LoyaltyPoints body);

        /// <summary>
        /// Deduct points in loyalty program for given customer
        /// </summary>
        /// <remarks>
        /// Remove points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveLoyaltyPointsAsyncWithHttpInfo (string programID, string integrationID, LoyaltyPoints body);
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of NewPassword</returns>
        System.Threading.Tasks.Task<NewPassword> ResetPasswordAsync (NewPassword body);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (NewPassword)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewPassword>> ResetPasswordAsyncWithHttpInfo (NewPassword body);
        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsync (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> SearchCouponsAdvancedWithoutTotalCountAsync (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// Update an additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="body"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> UpdateAdditionalCostAsync (int additionalCostId, NewAdditionalCost body);

        /// <summary>
        /// Update an additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> UpdateAdditionalCostAsyncWithHttpInfo (int additionalCostId, NewAdditionalCost body);
        /// <summary>
        /// Update a custom attribute
        /// </summary>
        /// <remarks>
        /// Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> UpdateAttributeAsync (int attributeId, NewAttribute body);

        /// <summary>
        /// Update a custom attribute
        /// </summary>
        /// <remarks>
        /// Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> UpdateAttributeAsyncWithHttpInfo (int attributeId, NewAttribute body);
        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> UpdateCampaignAsync (int applicationId, int campaignId, UpdateCampaign body);

        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> UpdateCampaignAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCampaign body);
        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="body"></param>
        /// <returns>Task of Coupon</returns>
        System.Threading.Tasks.Task<Coupon> UpdateCouponAsync (int applicationId, int campaignId, string couponId, UpdateCoupon body);

        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<Coupon>> UpdateCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon body);
        /// <summary>
        /// Update a batch of coupons
        /// </summary>
        /// <remarks>
        /// Update a batch of coupons. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager or by using [List coupons](#operation/getCouponsWithoutTotalCount).  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCouponBatchAsync (int applicationId, int campaignId, UpdateCouponBatch body);

        /// <summary>
        /// Update a batch of coupons
        /// </summary>
        /// <remarks>
        /// Update a batch of coupons. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager or by using [List coupons](#operation/getCouponsWithoutTotalCount).  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCouponBatchAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch body);
        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="body"></param>
        /// <returns>Task of Referral</returns>
        System.Threading.Tasks.Task<Referral> UpdateReferralAsync (int applicationId, int campaignId, string referralId, UpdateReferral body);

        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        System.Threading.Tasks.Task<ApiResponse<Referral>> UpdateReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral body);
        /// <summary>
        /// Update ruleset
        /// </summary>
        /// <remarks>
        /// Update a ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Ruleset</returns>
        System.Threading.Tasks.Task<Ruleset> UpdateRulesetAsync (int applicationId, int campaignId, int rulesetId, NewRuleset body);

        /// <summary>
        /// Update ruleset
        /// </summary>
        /// <remarks>
        /// Update a ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ruleset>> UpdateRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId, NewRuleset body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApi : IManagementApiSync, IManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManagementApi : IManagementApi
    {
        private TalonOne.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementApi(String basePath)
        {
            this.Configuration = TalonOne.Client.Configuration.MergeConfigurations(
                TalonOne.Client.GlobalConfiguration.Instance,
                new TalonOne.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManagementApi(TalonOne.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TalonOne.Client.Configuration.MergeConfigurations(
                TalonOne.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ManagementApi(TalonOne.Client.ISynchronousClient client,TalonOne.Client.IAsynchronousClient asyncClient, TalonOne.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TalonOne.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TalonOne.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TalonOne.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TalonOne.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add points in loyalty program for given customer Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void AddLoyaltyPoints (string programID, string integrationID, LoyaltyPoints body)
        {
             AddLoyaltyPointsWithHttpInfo(programID, integrationID, body);
        }

        /// <summary>
        /// Add points in loyalty program for given customer Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> AddLoyaltyPointsWithHttpInfo (string programID, string integrationID, LoyaltyPoints body)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->AddLoyaltyPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationID", TalonOne.Client.ClientUtils.ParameterToString(integrationID)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{programID}/profile/{integrationID}/add_points", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add points in loyalty program for given customer Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLoyaltyPointsAsync (string programID, string integrationID, LoyaltyPoints body)
        {
             await AddLoyaltyPointsAsyncWithHttpInfo(programID, integrationID, body);

        }

        /// <summary>
        /// Add points in loyalty program for given customer Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> AddLoyaltyPointsAsyncWithHttpInfo (string programID, string integrationID, LoyaltyPoints body)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->AddLoyaltyPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationID", TalonOne.Client.ClientUtils.ParameterToString(integrationID)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{programID}/profile/{integrationID}/add_points", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy the campaign into every specified application Copy the campaign into every specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 CopyCampaignToApplications (int applicationId, int campaignId, CampaignCopy body)
        {
             TalonOne.Client.ApiResponse<InlineResponse2002> localVarResponse = CopyCampaignToApplicationsWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy the campaign into every specified application Copy the campaign into every specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2002 > CopyCampaignToApplicationsWithHttpInfo (int applicationId, int campaignId, CampaignCopy body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CopyCampaignToApplications");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2002 >("/v1/applications/{applicationId}/campaigns/{campaignId}/copy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCampaignToApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy the campaign into every specified application Copy the campaign into every specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> CopyCampaignToApplicationsAsync (int applicationId, int campaignId, CampaignCopy body)
        {
             TalonOne.Client.ApiResponse<InlineResponse2002> localVarResponse = await CopyCampaignToApplicationsAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy the campaign into every specified application Copy the campaign into every specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2002>> CopyCampaignToApplicationsAsyncWithHttpInfo (int applicationId, int campaignId, CampaignCopy body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CopyCampaignToApplications");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2002>("/v1/applications/{applicationId}/campaigns/{campaignId}/copy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCampaignToApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Define a new additional cost Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost CreateAdditionalCost (NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = CreateAdditionalCostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Define a new additional cost Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public TalonOne.Client.ApiResponse< AccountAdditionalCost > CreateAdditionalCostWithHttpInfo (NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAdditionalCost");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AccountAdditionalCost >("/v1/additional_costs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Define a new additional cost Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> CreateAdditionalCostAsync (NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = await CreateAdditionalCostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Define a new additional cost Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAdditionalCost>> CreateAdditionalCostAsyncWithHttpInfo (NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAdditionalCost");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountAdditionalCost>("/v1/additional_costs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Attribute</returns>
        public Attribute CreateAttribute (NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = CreateAttributeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Attribute</returns>
        public TalonOne.Client.ApiResponse< Attribute > CreateAttributeWithHttpInfo (NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAttribute");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Attribute >("/v1/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> CreateAttributeAsync (NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = await CreateAttributeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Attribute>> CreateAttributeAsyncWithHttpInfo (NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAttribute");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Attribute>("/v1/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create campaign Create a campaign. A campaign is part of an Application and contains a set of promotion rules.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <returns>Campaign</returns>
        public Campaign CreateCampaign (int applicationId, NewCampaign body)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = CreateCampaignWithHttpInfo(applicationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create campaign Create a campaign. A campaign is part of an Application and contains a set of promotion rules.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Campaign</returns>
        public TalonOne.Client.ApiResponse< Campaign > CreateCampaignWithHttpInfo (int applicationId, NewCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCampaign");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Campaign >("/v1/applications/{applicationId}/campaigns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create campaign Create a campaign. A campaign is part of an Application and contains a set of promotion rules.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> CreateCampaignAsync (int applicationId, NewCampaign body)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = await CreateCampaignAsyncWithHttpInfo(applicationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create campaign Create a campaign. A campaign is part of an Application and contains a set of promotion rules.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Campaign>> CreateCampaignAsyncWithHttpInfo (int applicationId, NewCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCampaign");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Campaign>("/v1/applications/{applicationId}/campaigns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 CreateCoupons (int applicationId, int campaignId, NewCoupons body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = CreateCouponsWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2004 > CreateCouponsWithHttpInfo (int applicationId, int campaignId, NewCoupons body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCoupons");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2004 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> CreateCouponsAsync (int applicationId, int campaignId, NewCoupons body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = await CreateCouponsAsyncWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2004>> CreateCouponsAsyncWithHttpInfo (int applicationId, int campaignId, NewCoupons body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCoupons");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2004>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 CreateCouponsForMultipleRecipients (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = CreateCouponsForMultipleRecipientsWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2004 > CreateCouponsForMultipleRecipientsWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsForMultipleRecipients");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2004 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_with_recipients", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsForMultipleRecipients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> CreateCouponsForMultipleRecipientsAsync (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = await CreateCouponsForMultipleRecipientsAsyncWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2004>> CreateCouponsForMultipleRecipientsAsyncWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsForMultipleRecipients");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2004>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_with_recipients", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsForMultipleRecipients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>NewPasswordEmail</returns>
        public NewPasswordEmail CreatePasswordRecoveryEmail (NewPasswordEmail body)
        {
             TalonOne.Client.ApiResponse<NewPasswordEmail> localVarResponse = CreatePasswordRecoveryEmailWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of NewPasswordEmail</returns>
        public TalonOne.Client.ApiResponse< NewPasswordEmail > CreatePasswordRecoveryEmailWithHttpInfo (NewPasswordEmail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreatePasswordRecoveryEmail");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< NewPasswordEmail >("/v1/password_recovery_emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePasswordRecoveryEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of NewPasswordEmail</returns>
        public async System.Threading.Tasks.Task<NewPasswordEmail> CreatePasswordRecoveryEmailAsync (NewPasswordEmail body)
        {
             TalonOne.Client.ApiResponse<NewPasswordEmail> localVarResponse = await CreatePasswordRecoveryEmailAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (NewPasswordEmail)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<NewPasswordEmail>> CreatePasswordRecoveryEmailAsyncWithHttpInfo (NewPasswordEmail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreatePasswordRecoveryEmail");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NewPasswordEmail>("/v1/password_recovery_emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePasswordRecoveryEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create ruleset Create a set of rules. A ruleset is a revision of all the rules of a campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Ruleset</returns>
        public Ruleset CreateRuleset (int applicationId, int campaignId, NewRuleset body)
        {
             TalonOne.Client.ApiResponse<Ruleset> localVarResponse = CreateRulesetWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create ruleset Create a set of rules. A ruleset is a revision of all the rules of a campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        public TalonOne.Client.ApiResponse< Ruleset > CreateRulesetWithHttpInfo (int applicationId, int campaignId, NewRuleset body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateRuleset");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Ruleset >("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create ruleset Create a set of rules. A ruleset is a revision of all the rules of a campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Ruleset</returns>
        public async System.Threading.Tasks.Task<Ruleset> CreateRulesetAsync (int applicationId, int campaignId, NewRuleset body)
        {
             TalonOne.Client.ApiResponse<Ruleset> localVarResponse = await CreateRulesetAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create ruleset Create a set of rules. A ruleset is a revision of all the rules of a campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Ruleset>> CreateRulesetAsyncWithHttpInfo (int applicationId, int campaignId, NewRuleset body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateRuleset");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Ruleset>("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Session</returns>
        public Session CreateSession (LoginParams body)
        {
             TalonOne.Client.ApiResponse<Session> localVarResponse = CreateSessionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Session</returns>
        public TalonOne.Client.ApiResponse< Session > CreateSessionWithHttpInfo (LoginParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateSession");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Session >("/v1/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Session</returns>
        public async System.Threading.Tasks.Task<Session> CreateSessionAsync (LoginParams body)
        {
             TalonOne.Client.ApiResponse<Session> localVarResponse = await CreateSessionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Session)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Session>> CreateSessionAsyncWithHttpInfo (LoginParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateSession");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Session>("/v1/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns></returns>
        public void DeleteCampaign (int applicationId, int campaignId)
        {
             DeleteCampaignWithHttpInfo(applicationId, campaignId);
        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCampaignWithHttpInfo (int applicationId, int campaignId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCampaignAsync (int applicationId, int campaignId)
        {
             await DeleteCampaignAsyncWithHttpInfo(applicationId, campaignId);

        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCampaignAsyncWithHttpInfo (int applicationId, int campaignId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns></returns>
        public void DeleteCoupon (int applicationId, int campaignId, string couponId)
        {
             DeleteCouponWithHttpInfo(applicationId, campaignId, couponId);
        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCouponWithHttpInfo (int applicationId, int campaignId, string couponId)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->DeleteCoupon");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponAsync (int applicationId, int campaignId, string couponId)
        {
             await DeleteCouponAsyncWithHttpInfo(applicationId, campaignId, couponId);

        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->DeleteCoupon");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteCoupons (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
             DeleteCouponsWithHttpInfo(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);
        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCouponsWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (startsAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsAfter", startsAfter));
            }
            if (startsBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsBefore", startsBefore));
            }
            if (expiresAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresAfter", expiresAfter));
            }
            if (expiresBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresBefore", expiresBefore));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponsAsync (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
             await DeleteCouponsAsyncWithHttpInfo(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);

        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (startsAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsAfter", startsAfter));
            }
            if (startsBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsBefore", startsBefore));
            }
            if (expiresAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresAfter", expiresAfter));
            }
            if (expiresBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresBefore", expiresBefore));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns></returns>
        public void DeleteReferral (int applicationId, int campaignId, string referralId)
        {
             DeleteReferralWithHttpInfo(applicationId, campaignId, referralId);
        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteReferralWithHttpInfo (int applicationId, int campaignId, string referralId)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->DeleteReferral");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReferralAsync (int applicationId, int campaignId, string referralId)
        {
             await DeleteReferralAsyncWithHttpInfo(applicationId, campaignId, referralId);

        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->DeleteReferral");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DestroySession ()
        {
             DestroySessionWithHttpInfo();
        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DestroySessionWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroySessionAsync ()
        {
             await DestroySessionAsyncWithHttpInfo();

        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DestroySessionAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export coupons to CSV file Download a file containing the coupons that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>string</returns>
        public string ExportCoupons (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCouponsWithHttpInfo(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export coupons to CSV file Download a file containing the coupons that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCouponsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export coupons to CSV file Download a file containing the coupons that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCouponsAsync (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCouponsAsyncWithHttpInfo(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export coupons to CSV file Download a file containing the coupons that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCouponsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer sessions to CSV file Download a file containing the customer sessions that match the request.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>string</returns>
        public string ExportCustomerSessions (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCustomerSessionsWithHttpInfo(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer sessions to CSV file Download a file containing the customer sessions that match the request.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCustomerSessionsWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (profileIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileIntegrationId", profileIntegrationId));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (customerSessionState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerSessionState", customerSessionState));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_customer_sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCustomerSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer sessions to CSV file Download a file containing the customer sessions that match the request.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCustomerSessionsAsync (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCustomerSessionsAsyncWithHttpInfo(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer sessions to CSV file Download a file containing the customer sessions that match the request.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCustomerSessionsAsyncWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (profileIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileIntegrationId", profileIntegrationId));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (customerSessionState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerSessionState", customerSessionState));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_customer_sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCustomerSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export triggered effects to CSV file Download a file containing the triggered effects that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportEffects (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportEffectsWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export triggered effects to CSV file Download a file containing the triggered effects that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportEffectsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_effects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportEffects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export triggered effects to CSV file Download a file containing the triggered effects that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportEffectsAsync (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportEffectsAsyncWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export triggered effects to CSV file Download a file containing the triggered effects that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportEffectsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_effects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportEffects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer loyalty balance to a CSV file Download a file with the balance of each customer in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>string</returns>
        public string ExportLoyaltyBalance (string programID)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyBalanceWithHttpInfo(programID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer loyalty balance to a CSV file Download a file with the balance of each customer in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyBalanceWithHttpInfo (string programID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->ExportLoyaltyBalance");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{programID}/export_customer_balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer loyalty balance to a CSV file Download a file with the balance of each customer in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyBalanceAsync (string programID)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyBalanceAsyncWithHttpInfo(programID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer loyalty balance to a CSV file Download a file with the balance of each customer in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyBalanceAsyncWithHttpInfo (string programID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->ExportLoyaltyBalance");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{programID}/export_customer_balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to CSV file Download a file with a customer&#39;s ledger log in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyLedger (DateTime rangeStart, DateTime rangeEnd, string programID, string integrationID, string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyLedgerWithHttpInfo(rangeStart, rangeEnd, programID, integrationID, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to CSV file Download a file with a customer&#39;s ledger log in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyLedgerWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string programID, string integrationID, string dateFormat = default(string))
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->ExportLoyaltyLedger");

            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->ExportLoyaltyLedger");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationID", TalonOne.Client.ClientUtils.ParameterToString(integrationID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{programID}/profile/{integrationID}/export_log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to CSV file Download a file with a customer&#39;s ledger log in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyLedgerAsync (DateTime rangeStart, DateTime rangeEnd, string programID, string integrationID, string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyLedgerAsyncWithHttpInfo(rangeStart, rangeEnd, programID, integrationID, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to CSV file Download a file with a customer&#39;s ledger log in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyLedgerAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string programID, string integrationID, string dateFormat = default(string))
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->ExportLoyaltyLedger");

            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->ExportLoyaltyLedger");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationID", TalonOne.Client.ClientUtils.ParameterToString(integrationID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{programID}/profile/{integrationID}/export_log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls to this Application matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetAccessLogsWithoutTotalCount (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = GetAccessLogsWithoutTotalCountWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls to this Application matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2008 > GetAccessLogsWithoutTotalCountWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2008 >("/v1/applications/{applicationId}/access_logs/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccessLogsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls to this Application matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> GetAccessLogsWithoutTotalCountAsync (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = await GetAccessLogsWithoutTotalCountAsyncWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls to this Application matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2008>> GetAccessLogsWithoutTotalCountAsyncWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/v1/applications/{applicationId}/access_logs/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccessLogsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Account</returns>
        public Account GetAccount (int accountId)
        {
             TalonOne.Client.ApiResponse<Account> localVarResponse = GetAccountWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of Account</returns>
        public TalonOne.Client.ApiResponse< Account > GetAccountWithHttpInfo (int accountId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Account >("/v1/accounts/{accountId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> GetAccountAsync (int accountId)
        {
             TalonOne.Client.ApiResponse<Account> localVarResponse = await GetAccountAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Account>> GetAccountAsyncWithHttpInfo (int accountId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Account>("/v1/accounts/{accountId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account analytics Return the analytics of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>AccountAnalytics</returns>
        public AccountAnalytics GetAccountAnalytics (int accountId)
        {
             TalonOne.Client.ApiResponse<AccountAnalytics> localVarResponse = GetAccountAnalyticsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account analytics Return the analytics of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of AccountAnalytics</returns>
        public TalonOne.Client.ApiResponse< AccountAnalytics > GetAccountAnalyticsWithHttpInfo (int accountId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountAnalytics >("/v1/accounts/{accountId}/analytics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account analytics Return the analytics of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of AccountAnalytics</returns>
        public async System.Threading.Tasks.Task<AccountAnalytics> GetAccountAnalyticsAsync (int accountId)
        {
             TalonOne.Client.ApiResponse<AccountAnalytics> localVarResponse = await GetAccountAnalyticsAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account analytics Return the analytics of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of ApiResponse (AccountAnalytics)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAnalytics>> GetAccountAnalyticsAsyncWithHttpInfo (int accountId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountAnalytics>("/v1/accounts/{accountId}/analytics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an additional cost Returns additional cost for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost GetAdditionalCost (int additionalCostId)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = GetAdditionalCostWithHttpInfo(additionalCostId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an additional cost Returns additional cost for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public TalonOne.Client.ApiResponse< AccountAdditionalCost > GetAdditionalCostWithHttpInfo (int additionalCostId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountAdditionalCost >("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an additional cost Returns additional cost for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> GetAdditionalCostAsync (int additionalCostId)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = await GetAdditionalCostAsyncWithHttpInfo(additionalCostId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an additional cost Returns additional cost for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAdditionalCost>> GetAdditionalCostAsyncWithHttpInfo (int additionalCostId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountAdditionalCost>("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GetAdditionalCosts (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20021> localVarResponse = GetAdditionalCostsWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20021 > GetAdditionalCostsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20021 >("/v1/additional_costs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> GetAdditionalCostsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20021> localVarResponse = await GetAdditionalCostsAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20021>> GetAdditionalCostsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20021>("/v1/additional_costs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetAllAccessLogs (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2009> localVarResponse = GetAllAccessLogsWithHttpInfo(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2009 > GetAllAccessLogsWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2009 >("/v1/access_logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAccessLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> GetAllAccessLogsAsync (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2009> localVarResponse = await GetAllAccessLogsAsyncWithHttpInfo(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2009>> GetAllAccessLogsAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/v1/access_logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAccessLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 GetAllRoles ()
        {
             TalonOne.Client.ApiResponse<InlineResponse20029> localVarResponse = GetAllRolesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20029 > GetAllRolesWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20029 >("/v1/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> GetAllRolesAsync ()
        {
             TalonOne.Client.ApiResponse<InlineResponse20029> localVarResponse = await GetAllRolesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20029>> GetAllRolesAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20029>("/v1/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Application</returns>
        public Application GetApplication (int applicationId)
        {
             TalonOne.Client.ApiResponse<Application> localVarResponse = GetApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of Application</returns>
        public TalonOne.Client.ApiResponse< Application > GetApplicationWithHttpInfo (int applicationId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Application >("/v1/applications/{applicationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> GetApplicationAsync (int applicationId)
        {
             TalonOne.Client.ApiResponse<Application> localVarResponse = await GetApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Application>> GetApplicationAsyncWithHttpInfo (int applicationId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Application>("/v1/applications/{applicationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get report of health of application API Display the health of the application and show the last time the Application was used. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApplicationApiHealth</returns>
        public ApplicationApiHealth GetApplicationApiHealth (int applicationId)
        {
             TalonOne.Client.ApiResponse<ApplicationApiHealth> localVarResponse = GetApplicationApiHealthWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get report of health of application API Display the health of the application and show the last time the Application was used. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of ApplicationApiHealth</returns>
        public TalonOne.Client.ApiResponse< ApplicationApiHealth > GetApplicationApiHealthWithHttpInfo (int applicationId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApplicationApiHealth >("/v1/applications/{applicationId}/health_report", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationApiHealth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get report of health of application API Display the health of the application and show the last time the Application was used. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApplicationApiHealth</returns>
        public async System.Threading.Tasks.Task<ApplicationApiHealth> GetApplicationApiHealthAsync (int applicationId)
        {
             TalonOne.Client.ApiResponse<ApplicationApiHealth> localVarResponse = await GetApplicationApiHealthAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get report of health of application API Display the health of the application and show the last time the Application was used. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (ApplicationApiHealth)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ApplicationApiHealth>> GetApplicationApiHealthAsyncWithHttpInfo (int applicationId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationApiHealth>("/v1/applications/{applicationId}/health_report", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationApiHealth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application.  The &#x60;customerId&#x60; parameter is the value of the &#x60;id&#x60; property of a customer profile. Get it with the [List application&#39;s customers](#operation/getApplicationCustomers) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>ApplicationCustomer</returns>
        public ApplicationCustomer GetApplicationCustomer (int applicationId, int customerId)
        {
             TalonOne.Client.ApiResponse<ApplicationCustomer> localVarResponse = GetApplicationCustomerWithHttpInfo(applicationId, customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application.  The &#x60;customerId&#x60; parameter is the value of the &#x60;id&#x60; property of a customer profile. Get it with the [List application&#39;s customers](#operation/getApplicationCustomers) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of ApplicationCustomer</returns>
        public TalonOne.Client.ApiResponse< ApplicationCustomer > GetApplicationCustomerWithHttpInfo (int applicationId, int customerId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApplicationCustomer >("/v1/applications/{applicationId}/customers/{customerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application.  The &#x60;customerId&#x60; parameter is the value of the &#x60;id&#x60; property of a customer profile. Get it with the [List application&#39;s customers](#operation/getApplicationCustomers) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of ApplicationCustomer</returns>
        public async System.Threading.Tasks.Task<ApplicationCustomer> GetApplicationCustomerAsync (int applicationId, int customerId)
        {
             TalonOne.Client.ApiResponse<ApplicationCustomer> localVarResponse = await GetApplicationCustomerAsyncWithHttpInfo(applicationId, customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application.  The &#x60;customerId&#x60; parameter is the value of the &#x60;id&#x60; property of a customer profile. Get it with the [List application&#39;s customers](#operation/getApplicationCustomers) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (ApplicationCustomer)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ApplicationCustomer>> GetApplicationCustomerAsyncWithHttpInfo (int applicationId, int customerId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationCustomer>("/v1/applications/{applicationId}/customers/{customerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 GetApplicationCustomerFriends (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20019> localVarResponse = GetApplicationCustomerFriendsWithHttpInfo(applicationId, integrationId, pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20019 > GetApplicationCustomerFriendsWithHttpInfo (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetApplicationCustomerFriends");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20019 >("/v1/applications/{applicationId}/profile/{integrationId}/friends", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomerFriends", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> GetApplicationCustomerFriendsAsync (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20019> localVarResponse = await GetApplicationCustomerFriendsAsyncWithHttpInfo(applicationId, integrationId, pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20019>> GetApplicationCustomerFriendsAsyncWithHttpInfo (int applicationId, string integrationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetApplicationCustomerFriends");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20019>("/v1/applications/{applicationId}/profile/{integrationId}/friends", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomerFriends", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetApplicationCustomers (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20011> localVarResponse = GetApplicationCustomersWithHttpInfo(applicationId, integrationId, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20011 > GetApplicationCustomersWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/v1/applications/{applicationId}/customers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> GetApplicationCustomersAsync (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20011> localVarResponse = await GetApplicationCustomersAsyncWithHttpInfo(applicationId, integrationId, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20011>> GetApplicationCustomersAsyncWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/v1/applications/{applicationId}/customers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetApplicationCustomersByAttributes (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20012> localVarResponse = GetApplicationCustomersByAttributesWithHttpInfo(applicationId, body, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20012 > GetApplicationCustomersByAttributesWithHttpInfo (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetApplicationCustomersByAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20012 >("/v1/applications/{applicationId}/customer_search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GetApplicationCustomersByAttributesAsync (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20012> localVarResponse = await GetApplicationCustomersByAttributesAsyncWithHttpInfo(applicationId, body, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20012>> GetApplicationCustomersByAttributesAsyncWithHttpInfo (int applicationId, CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetApplicationCustomersByAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20012>("/v1/applications/{applicationId}/customer_search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/#operation/trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GetApplicationEventTypes (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20017> localVarResponse = GetApplicationEventTypesWithHttpInfo(applicationId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/#operation/trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20017 > GetApplicationEventTypesWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20017 >("/v1/applications/{applicationId}/event_types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/#operation/trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> GetApplicationEventTypesAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20017> localVarResponse = await GetApplicationEventTypesAsyncWithHttpInfo(applicationId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/#operation/trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20017>> GetApplicationEventTypesAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20017>("/v1/applications/{applicationId}/event_types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 GetApplicationEventsWithoutTotalCount (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20016> localVarResponse = GetApplicationEventsWithoutTotalCountWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20016 > GetApplicationEventsWithoutTotalCountWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (session != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "session", session));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (customerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerName", customerName));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerEmail", customerEmail));
            }
            if (couponCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "couponCode", couponCode));
            }
            if (referralCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralCode", referralCode));
            }
            if (ruleQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "ruleQuery", ruleQuery));
            }
            if (campaignQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignQuery", campaignQuery));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20016 >("/v1/applications/{applicationId}/events/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> GetApplicationEventsWithoutTotalCountAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20016> localVarResponse = await GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20016>> GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (session != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "session", session));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (customerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerName", customerName));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerEmail", customerEmail));
            }
            if (couponCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "couponCode", couponCode));
            }
            if (referralCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralCode", referralCode));
            }
            if (ruleQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "ruleQuery", ruleQuery));
            }
            if (campaignQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignQuery", campaignQuery));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20016>("/v1/applications/{applicationId}/events/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List application sessions](#operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>ApplicationSession</returns>
        public ApplicationSession GetApplicationSession (int applicationId, int sessionId)
        {
             TalonOne.Client.ApiResponse<ApplicationSession> localVarResponse = GetApplicationSessionWithHttpInfo(applicationId, sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List application sessions](#operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>ApiResponse of ApplicationSession</returns>
        public TalonOne.Client.ApiResponse< ApplicationSession > GetApplicationSessionWithHttpInfo (int applicationId, int sessionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", TalonOne.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApplicationSession >("/v1/applications/{applicationId}/sessions/{sessionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List application sessions](#operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>Task of ApplicationSession</returns>
        public async System.Threading.Tasks.Task<ApplicationSession> GetApplicationSessionAsync (int applicationId, int sessionId)
        {
             TalonOne.Client.ApiResponse<ApplicationSession> localVarResponse = await GetApplicationSessionAsyncWithHttpInfo(applicationId, sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List application sessions](#operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>Task of ApiResponse (ApplicationSession)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ApplicationSession>> GetApplicationSessionAsyncWithHttpInfo (int applicationId, int sessionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", TalonOne.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationSession>("/v1/applications/{applicationId}/sessions/{sessionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GetApplicationSessions (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20015> localVarResponse = GetApplicationSessionsWithHttpInfo(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20015 > GetApplicationSessionsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (coupon != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "coupon", coupon));
            }
            if (referral != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referral", referral));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20015 >("/v1/applications/{applicationId}/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GetApplicationSessionsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20015> localVarResponse = await GetApplicationSessionsAsyncWithHttpInfo(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20015>> GetApplicationSessionsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (coupon != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "coupon", coupon));
            }
            if (referral != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referral", referral));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20015>("/v1/applications/{applicationId}/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications List all application in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetApplications (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2001> localVarResponse = GetApplicationsWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications List all application in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2001 > GetApplicationsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2001 >("/v1/applications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications List all application in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetApplicationsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2001> localVarResponse = await GetApplicationsAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications List all application in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2001>> GetApplicationsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/v1/applications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a custom attribute Returns custom attribute for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Attribute</returns>
        public Attribute GetAttribute (int attributeId)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = GetAttributeWithHttpInfo(attributeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom attribute Returns custom attribute for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>ApiResponse of Attribute</returns>
        public TalonOne.Client.ApiResponse< Attribute > GetAttributeWithHttpInfo (int attributeId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Attribute >("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a custom attribute Returns custom attribute for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> GetAttributeAsync (int attributeId)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = await GetAttributeAsyncWithHttpInfo(attributeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a custom attribute Returns custom attribute for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Attribute>> GetAttributeAsyncWithHttpInfo (int attributeId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Attribute>("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List custom attributes Returns all the defined custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GetAttributes (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20020> localVarResponse = GetAttributesWithHttpInfo(pageSize, skip, sort, entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List custom attributes Returns all the defined custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20020 > GetAttributesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20020 >("/v1/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List custom attributes Returns all the defined custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> GetAttributesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20020> localVarResponse = await GetAttributesAsyncWithHttpInfo(pageSize, skip, sort, entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List custom attributes Returns all the defined custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20020>> GetAttributesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/v1/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List audiences Get All audiences created in the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 GetAudiences (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20018> localVarResponse = GetAudiencesWithHttpInfo(pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List audiences Get All audiences created in the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20018 > GetAudiencesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20018 >("/v1/audiences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudiences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List audiences Get All audiences created in the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> GetAudiencesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20018> localVarResponse = await GetAudiencesAsyncWithHttpInfo(pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List audiences Get All audiences created in the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20018>> GetAudiencesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20018>("/v1/audiences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudiences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Campaign</returns>
        public Campaign GetCampaign (int applicationId, int campaignId)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = GetCampaignWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>ApiResponse of Campaign</returns>
        public TalonOne.Client.ApiResponse< Campaign > GetCampaignWithHttpInfo (int applicationId, int campaignId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Campaign >("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> GetCampaignAsync (int applicationId, int campaignId)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = await GetCampaignAsyncWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Campaign>> GetCampaignAsyncWithHttpInfo (int applicationId, int campaignId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Campaign>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 GetCampaignAnalytics (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20010> localVarResponse = GetCampaignAnalyticsWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, granularity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20010 > GetCampaignAnalyticsWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20010 >("/v1/applications/{applicationId}/campaigns/{campaignId}/analytics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> GetCampaignAnalyticsAsync (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20010> localVarResponse = await GetCampaignAnalyticsAsyncWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, granularity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20010>> GetCampaignAnalyticsAsyncWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20010>("/v1/applications/{applicationId}/campaigns/{campaignId}/analytics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetCampaignByAttributes (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2002> localVarResponse = GetCampaignByAttributesWithHttpInfo(applicationId, body, pageSize, skip, sort, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2002 > GetCampaignByAttributesWithHttpInfo (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCampaignByAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2002 >("/v1/applications/{applicationId}/campaigns_search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetCampaignByAttributesAsync (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2002> localVarResponse = await GetCampaignByAttributesAsyncWithHttpInfo(applicationId, body, pageSize, skip, sort, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2002>> GetCampaignByAttributesAsyncWithHttpInfo (int applicationId, CampaignSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCampaignByAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2002>("/v1/applications/{applicationId}/campaigns_search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns List all the campaigns of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetCampaigns (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse2002> localVarResponse = GetCampaignsWithHttpInfo(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaigns List all the campaigns of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2002 > GetCampaignsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (campaignGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignGroupId", campaignGroupId));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2002 >("/v1/applications/{applicationId}/campaigns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaigns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns List all the campaigns of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetCampaignsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse2002> localVarResponse = await GetCampaignsAsyncWithHttpInfo(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId, templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaigns List all the campaigns of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <param name="templateId">The ID of the Campaign Template this Campaign was created from. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2002>> GetCampaignsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?), int? templateId = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (campaignGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignGroupId", campaignGroupId));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/v1/applications/{applicationId}/campaigns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaigns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit log for an account Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GetChanges (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20027> localVarResponse = GetChangesWithHttpInfo(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, includeOld);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit log for an account Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20027 > GetChangesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (entityPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entityPath", entityPath));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (includeOld != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOld", includeOld));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20027 >("/v1/changes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit log for an account Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> GetChangesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20027> localVarResponse = await GetChangesAsyncWithHttpInfo(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, includeOld);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get audit log for an account Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, &#x60;hasMore&#x60; will be true whenever there is a next page. &#x60;totalResultSize&#x60; will always be zero. With this flag set to false, &#x60;hasMore&#x60; will always be set to false. &#x60;totalResultSize&#x60; will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20027>> GetChangesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (entityPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entityPath", entityPath));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (includeOld != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOld", includeOld));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20027>("/v1/changes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes Get a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetCouponsByAttributes (int applicationId, int campaignId, CouponSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = GetCouponsByAttributesWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes Get a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2004 > GetCouponsByAttributesWithHttpInfo (int applicationId, int campaignId, CouponSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCouponsByAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2004 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCouponsByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes Get a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetCouponsByAttributesAsync (int applicationId, int campaignId, CouponSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2004> localVarResponse = await GetCouponsByAttributesAsyncWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes Get a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2004>> GetCouponsByAttributesAsyncWithHttpInfo (int applicationId, int campaignId, CouponSearch body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCouponsByAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2004>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCouponsByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetCouponsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse2005> localVarResponse = GetCouponsWithoutTotalCountWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2005 > GetCouponsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2005 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCouponsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> GetCouponsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse2005> localVarResponse = await GetCouponsWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2005>> GetCouponsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCouponsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>CustomerActivityReport</returns>
        public CustomerActivityReport GetCustomerActivityReport (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<CustomerActivityReport> localVarResponse = GetCustomerActivityReportWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of CustomerActivityReport</returns>
        public TalonOne.Client.ApiResponse< CustomerActivityReport > GetCustomerActivityReportWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CustomerActivityReport >("/v1/applications/{applicationId}/customer_activity_reports/{customerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of CustomerActivityReport</returns>
        public async System.Threading.Tasks.Task<CustomerActivityReport> GetCustomerActivityReportAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<CustomerActivityReport> localVarResponse = await GetCustomerActivityReportAsyncWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (CustomerActivityReport)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CustomerActivityReport>> GetCustomerActivityReportAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerActivityReport>("/v1/applications/{applicationId}/customer_activity_reports/{customerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 GetCustomerActivityReportsWithoutTotalCount (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20014> localVarResponse = GetCustomerActivityReportsWithoutTotalCountWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20014 > GetCustomerActivityReportsWithoutTotalCountWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (campaignName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignName", campaignName));
            }
            if (advocateName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocateName", advocateName));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20014 >("/v1/applications/{applicationId}/customer_activity_reports/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReportsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> GetCustomerActivityReportsWithoutTotalCountAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20014> localVarResponse = await GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20014>> GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (campaignName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignName", campaignName));
            }
            if (advocateName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocateName", advocateName));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20014>("/v1/applications/{applicationId}/customer_activity_reports/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReportsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>CustomerAnalytics</returns>
        public CustomerAnalytics GetCustomerAnalytics (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<CustomerAnalytics> localVarResponse = GetCustomerAnalyticsWithHttpInfo(applicationId, customerId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of CustomerAnalytics</returns>
        public TalonOne.Client.ApiResponse< CustomerAnalytics > GetCustomerAnalyticsWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CustomerAnalytics >("/v1/applications/{applicationId}/customers/{customerId}/analytics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of CustomerAnalytics</returns>
        public async System.Threading.Tasks.Task<CustomerAnalytics> GetCustomerAnalyticsAsync (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<CustomerAnalytics> localVarResponse = await GetCustomerAnalyticsAsyncWithHttpInfo(applicationId, customerId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (CustomerAnalytics)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CustomerAnalytics>> GetCustomerAnalyticsAsyncWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerAnalytics>("/v1/applications/{applicationId}/customers/{customerId}/analytics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  **Performance tip:** You can retrieve the same information via the Integration API, which can save you extra API requests. Consider these options: - Request the customer profile to be part of the response content using   [Update Customer Session](/integration-api/operation#updateCustomerSessionV2). - Send an empty update with the [Update Customer Profile](/integration-api/#operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>CustomerProfile</returns>
        public CustomerProfile GetCustomerProfile (int customerId)
        {
             TalonOne.Client.ApiResponse<CustomerProfile> localVarResponse = GetCustomerProfileWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  **Performance tip:** You can retrieve the same information via the Integration API, which can save you extra API requests. Consider these options: - Request the customer profile to be part of the response content using   [Update Customer Session](/integration-api/operation#updateCustomerSessionV2). - Send an empty update with the [Update Customer Profile](/integration-api/#operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of CustomerProfile</returns>
        public TalonOne.Client.ApiResponse< CustomerProfile > GetCustomerProfileWithHttpInfo (int customerId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CustomerProfile >("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  **Performance tip:** You can retrieve the same information via the Integration API, which can save you extra API requests. Consider these options: - Request the customer profile to be part of the response content using   [Update Customer Session](/integration-api/operation#updateCustomerSessionV2). - Send an empty update with the [Update Customer Profile](/integration-api/#operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of CustomerProfile</returns>
        public async System.Threading.Tasks.Task<CustomerProfile> GetCustomerProfileAsync (int customerId)
        {
             TalonOne.Client.ApiResponse<CustomerProfile> localVarResponse = await GetCustomerProfileAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  **Performance tip:** You can retrieve the same information via the Integration API, which can save you extra API requests. Consider these options: - Request the customer profile to be part of the response content using   [Update Customer Session](/integration-api/operation#updateCustomerSessionV2). - Send an empty update with the [Update Customer Profile](/integration-api/#operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (CustomerProfile)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CustomerProfile>> GetCustomerProfileAsyncWithHttpInfo (int customerId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerProfile>("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetCustomerProfiles (int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20013> localVarResponse = GetCustomerProfilesWithHttpInfo(pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20013 > GetCustomerProfilesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20013 >("/v1/customers/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetCustomerProfilesAsync (int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20013> localVarResponse = await GetCustomerProfilesAsyncWithHttpInfo(pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20013>> GetCustomerProfilesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20013>("/v1/customers/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetCustomersByAttributes (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20013> localVarResponse = GetCustomersByAttributesWithHttpInfo(body, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20013 > GetCustomersByAttributesWithHttpInfo (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCustomersByAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20013 >("/v1/customer_search/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetCustomersByAttributesAsync (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20013> localVarResponse = await GetCustomersByAttributesAsyncWithHttpInfo(body, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20013>> GetCustomersByAttributesAsyncWithHttpInfo (CustomerProfileSearchQuery body, int? pageSize = default(int?), int? skip = default(int?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCustomersByAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20013>("/v1/customer_search/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Event Types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GetEventTypes (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20025> localVarResponse = GetEventTypesWithHttpInfo(applicationIds, name, includeOldVersions, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Event Types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20025 > GetEventTypesWithHttpInfo (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (applicationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationIds", applicationIds));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (includeOldVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOldVersions", includeOldVersions));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20025 >("/v1/event_types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Event Types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> GetEventTypesAsync (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20025> localVarResponse = await GetEventTypesAsyncWithHttpInfo(applicationIds, name, includeOldVersions, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Event Types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20025>> GetEventTypesAsyncWithHttpInfo (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (applicationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationIds", applicationIds));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (includeOldVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOldVersions", includeOldVersions));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20025>("/v1/event_types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 GetExports (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20028> localVarResponse = GetExportsWithHttpInfo(pageSize, skip, applicationId, campaignId, entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20028 > GetExportsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20028 >("/v1/exports", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExports", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> GetExportsAsync (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20028> localVarResponse = await GetExportsAsyncWithHttpInfo(pageSize, skip, applicationId, campaignId, entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20028>> GetExportsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20028>("/v1/exports", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExports", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Loyalty Ledger for this integrationID Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the application, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>LoyaltyLedger</returns>
        public LoyaltyLedger GetLoyaltyPoints (string programID, string integrationID)
        {
             TalonOne.Client.ApiResponse<LoyaltyLedger> localVarResponse = GetLoyaltyPointsWithHttpInfo(programID, integrationID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Loyalty Ledger for this integrationID Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the application, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>ApiResponse of LoyaltyLedger</returns>
        public TalonOne.Client.ApiResponse< LoyaltyLedger > GetLoyaltyPointsWithHttpInfo (string programID, string integrationID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->GetLoyaltyPoints");

            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->GetLoyaltyPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationID", TalonOne.Client.ClientUtils.ParameterToString(integrationID)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyLedger >("/v1/loyalty_programs/{programID}/profile/{integrationID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Loyalty Ledger for this integrationID Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the application, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>Task of LoyaltyLedger</returns>
        public async System.Threading.Tasks.Task<LoyaltyLedger> GetLoyaltyPointsAsync (string programID, string integrationID)
        {
             TalonOne.Client.ApiResponse<LoyaltyLedger> localVarResponse = await GetLoyaltyPointsAsyncWithHttpInfo(programID, integrationID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the Loyalty Ledger for this integrationID Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the application, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>Task of ApiResponse (LoyaltyLedger)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyLedger>> GetLoyaltyPointsAsyncWithHttpInfo (string programID, string integrationID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->GetLoyaltyPoints");

            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->GetLoyaltyPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationID", TalonOne.Client.ClientUtils.ParameterToString(integrationID)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyLedger>("/v1/loyalty_programs/{programID}/profile/{integrationID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://www.talon.one/glossary/loyalty). To list all loyalty programs, use [List loyalty programs](#operation/getLoyaltyPrograms). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>LoyaltyProgram</returns>
        public LoyaltyProgram GetLoyaltyProgram (int programID)
        {
             TalonOne.Client.ApiResponse<LoyaltyProgram> localVarResponse = GetLoyaltyProgramWithHttpInfo(programID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://www.talon.one/glossary/loyalty). To list all loyalty programs, use [List loyalty programs](#operation/getLoyaltyPrograms). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        public TalonOne.Client.ApiResponse< LoyaltyProgram > GetLoyaltyProgramWithHttpInfo (int programID)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyProgram >("/v1/loyalty_programs/{programID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://www.talon.one/glossary/loyalty). To list all loyalty programs, use [List loyalty programs](#operation/getLoyaltyPrograms). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of LoyaltyProgram</returns>
        public async System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramAsync (int programID)
        {
             TalonOne.Client.ApiResponse<LoyaltyProgram> localVarResponse = await GetLoyaltyProgramAsyncWithHttpInfo(programID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://www.talon.one/glossary/loyalty). To list all loyalty programs, use [List loyalty programs](#operation/getLoyaltyPrograms). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyProgram>> GetLoyaltyProgramAsyncWithHttpInfo (int programID)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyProgram>("/v1/loyalty_programs/{programID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetLoyaltyPrograms ()
        {
             TalonOne.Client.ApiResponse<InlineResponse2007> localVarResponse = GetLoyaltyProgramsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2007 > GetLoyaltyProgramsWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2007 >("/v1/loyalty_programs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPrograms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GetLoyaltyProgramsAsync ()
        {
             TalonOne.Client.ApiResponse<InlineResponse2007> localVarResponse = await GetLoyaltyProgramsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2007>> GetLoyaltyProgramsAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/v1/loyalty_programs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPrograms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points and expired points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>LoyaltyStatistics</returns>
        public LoyaltyStatistics GetLoyaltyStatistics (string programID)
        {
             TalonOne.Client.ApiResponse<LoyaltyStatistics> localVarResponse = GetLoyaltyStatisticsWithHttpInfo(programID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points and expired points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>ApiResponse of LoyaltyStatistics</returns>
        public TalonOne.Client.ApiResponse< LoyaltyStatistics > GetLoyaltyStatisticsWithHttpInfo (string programID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->GetLoyaltyStatistics");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyStatistics >("/v1/loyalty_programs/{programID}/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points and expired points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of LoyaltyStatistics</returns>
        public async System.Threading.Tasks.Task<LoyaltyStatistics> GetLoyaltyStatisticsAsync (string programID)
        {
             TalonOne.Client.ApiResponse<LoyaltyStatistics> localVarResponse = await GetLoyaltyStatisticsAsyncWithHttpInfo(programID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points and expired points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <returns>Task of ApiResponse (LoyaltyStatistics)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyStatistics>> GetLoyaltyStatisticsAsyncWithHttpInfo (string programID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->GetLoyaltyStatistics");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyStatistics>("/v1/loyalty_programs/{programID}/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetReferralsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2006> localVarResponse = GetReferralsWithoutTotalCountWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2006 > GetReferralsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (advocate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocate", advocate));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2006 >("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReferralsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> GetReferralsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2006> localVarResponse = await GetReferralsWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2006>> GetReferralsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (advocate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocate", advocate));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReferralsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get role Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Role</returns>
        public Role GetRole (int roleId)
        {
             TalonOne.Client.ApiResponse<Role> localVarResponse = GetRoleWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get role Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Role</returns>
        public TalonOne.Client.ApiResponse< Role > GetRoleWithHttpInfo (int roleId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleId", TalonOne.Client.ClientUtils.ParameterToString(roleId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Role >("/v1/roles/{roleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get role Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync (int roleId)
        {
             TalonOne.Client.ApiResponse<Role> localVarResponse = await GetRoleAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get role Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Role>> GetRoleAsyncWithHttpInfo (int roleId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("roleId", TalonOne.Client.ClientUtils.ParameterToString(roleId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Role>("/v1/roles/{roleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Ruleset</returns>
        public Ruleset GetRuleset (int applicationId, int campaignId, int rulesetId)
        {
             TalonOne.Client.ApiResponse<Ruleset> localVarResponse = GetRulesetWithHttpInfo(applicationId, campaignId, rulesetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        public TalonOne.Client.ApiResponse< Ruleset > GetRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulesetId", TalonOne.Client.ClientUtils.ParameterToString(rulesetId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Ruleset >("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of Ruleset</returns>
        public async System.Threading.Tasks.Task<Ruleset> GetRulesetAsync (int applicationId, int campaignId, int rulesetId)
        {
             TalonOne.Client.ApiResponse<Ruleset> localVarResponse = await GetRulesetAsyncWithHttpInfo(applicationId, campaignId, rulesetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Ruleset>> GetRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulesetId", TalonOne.Client.ClientUtils.ParameterToString(rulesetId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Ruleset>("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetRulesets (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2003> localVarResponse = GetRulesetsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2003 > GetRulesetsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2003 >("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRulesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetRulesetsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2003> localVarResponse = await GetRulesetsAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2003>> GetRulesetsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRulesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single user Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        public User GetUser (int userId)
        {
             TalonOne.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single user Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        public TalonOne.Client.ApiResponse< User > GetUserWithHttpInfo (int userId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< User >("/v1/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single user Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync (int userId)
        {
             TalonOne.Client.ApiResponse<User> localVarResponse = await GetUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single user Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<User>> GetUserAsyncWithHttpInfo (int userId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/v1/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GetUsers (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20026> localVarResponse = GetUsersWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20026 > GetUsersWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20026 >("/v1/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GetUsersAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20026> localVarResponse = await GetUsersAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20026>> GetUsersAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20026>("/v1/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Webhook Returns an webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Webhook</returns>
        public Webhook GetWebhook (int webhookId)
        {
             TalonOne.Client.ApiResponse<Webhook> localVarResponse = GetWebhookWithHttpInfo(webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhook Returns an webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>ApiResponse of Webhook</returns>
        public TalonOne.Client.ApiResponse< Webhook > GetWebhookWithHttpInfo (int webhookId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("webhookId", TalonOne.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Webhook >("/v1/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Webhook Returns an webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> GetWebhookAsync (int webhookId)
        {
             TalonOne.Client.ApiResponse<Webhook> localVarResponse = await GetWebhookAsyncWithHttpInfo(webhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Webhook Returns an webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (int webhookId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("webhookId", TalonOne.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Webhook>("/v1/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 GetWebhookActivationLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20023> localVarResponse = GetWebhookActivationLogsWithHttpInfo(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20023 > GetWebhookActivationLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (integrationRequestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationRequestUuid", integrationRequestUuid));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20023 >("/v1/webhook_activation_logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookActivationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> GetWebhookActivationLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20023> localVarResponse = await GetWebhookActivationLogsAsyncWithHttpInfo(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20023>> GetWebhookActivationLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (integrationRequestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationRequestUuid", integrationRequestUuid));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20023>("/v1/webhook_activation_logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookActivationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GetWebhookLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20024> localVarResponse = GetWebhookLogsWithHttpInfo(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20024 > GetWebhookLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (requestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "requestUuid", requestUuid));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20024 >("/v1/webhook_logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> GetWebhookLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20024> localVarResponse = await GetWebhookLogsAsyncWithHttpInfo(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20024>> GetWebhookLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (requestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "requestUuid", requestUuid));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20024>("/v1/webhook_logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GetWebhooks (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20022> localVarResponse = GetWebhooksWithHttpInfo(applicationIds, sort, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20022 > GetWebhooksWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (applicationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationIds", applicationIds));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20022 >("/v1/webhooks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GetWebhooksAsync (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20022> localVarResponse = await GetWebhooksAsyncWithHttpInfo(applicationIds, sort, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20022>> GetWebhooksAsyncWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (applicationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationIds", applicationIds));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20022>("/v1/webhooks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import coupons via CSV file Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Defaults to &#x60;1&#x60; when not provided. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use thhe timezone of your choice. It is converted to UTC internally by Talon.One.  Example:  &#x60;&#x60;&#x60; \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#operation/getReservedCustomers). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportCoupons (int applicationId, int campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportCouponsWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import coupons via CSV file Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Defaults to &#x60;1&#x60; when not provided. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use thhe timezone of your choice. It is converted to UTC internally by Talon.One.  Example:  &#x60;&#x60;&#x60; \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#operation/getReservedCustomers). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportCouponsWithHttpInfo (int applicationId, int campaignId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (upFile != null)
            {
                localVarRequestOptions.FormParameters.Add("upFile", TalonOne.Client.ClientUtils.ParameterToString(upFile)); // form parameter
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/applications/{applicationId}/campaigns/{campaignId}/import_coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import coupons via CSV file Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Defaults to &#x60;1&#x60; when not provided. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use thhe timezone of your choice. It is converted to UTC internally by Talon.One.  Example:  &#x60;&#x60;&#x60; \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#operation/getReservedCustomers). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportCouponsAsync (int applicationId, int campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportCouponsAsyncWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import coupons via CSV file Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Defaults to &#x60;1&#x60; when not provided. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use thhe timezone of your choice. It is converted to UTC internally by Talon.One.  Example:  &#x60;&#x60;&#x60; \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#operation/getReservedCustomers). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (upFile != null)
            {
                localVarRequestOptions.FormParameters.Add("upFile", TalonOne.Client.ClientUtils.ParameterToString(upFile)); // form parameter
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/applications/{applicationId}/campaigns/{campaignId}/import_coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import loyalty points via CSV file Upload a CSV file containing the [loyalty](https://www.talon.one/glossary/loyalty) points that should be created. The file should be sent as multipart data.\&quot; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportLoyaltyPoints (int programID, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportLoyaltyPointsWithHttpInfo(programID, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import loyalty points via CSV file Upload a CSV file containing the [loyalty](https://www.talon.one/glossary/loyalty) points that should be created. The file should be sent as multipart data.\&quot; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportLoyaltyPointsWithHttpInfo (int programID, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter
            if (upFile != null)
            {
                localVarRequestOptions.FormParameters.Add("upFile", TalonOne.Client.ClientUtils.ParameterToString(upFile)); // form parameter
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/loyalty_programs/{programID}/import_points", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import loyalty points via CSV file Upload a CSV file containing the [loyalty](https://www.talon.one/glossary/loyalty) points that should be created. The file should be sent as multipart data.\&quot; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportLoyaltyPointsAsync (int programID, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportLoyaltyPointsAsyncWithHttpInfo(programID, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import loyalty points via CSV file Upload a CSV file containing the [loyalty](https://www.talon.one/glossary/loyalty) points that should be created. The file should be sent as multipart data.\&quot; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportLoyaltyPointsAsyncWithHttpInfo (int programID, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter
            if (upFile != null)
            {
                localVarRequestOptions.FormParameters.Add("upFile", TalonOne.Client.ClientUtils.ParameterToString(upFile)); // form parameter
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/loyalty_programs/{programID}/import_points", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportPoolGiveaways (int poolId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportPoolGiveawaysWithHttpInfo(poolId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportPoolGiveawaysWithHttpInfo (int poolId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("poolId", TalonOne.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (upFile != null)
            {
                localVarRequestOptions.FormParameters.Add("upFile", TalonOne.Client.ClientUtils.ParameterToString(upFile)); // form parameter
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/giveaways/pools/{poolId}/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportPoolGiveaways", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportPoolGiveawaysAsync (int poolId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportPoolGiveawaysAsyncWithHttpInfo(poolId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportPoolGiveawaysAsyncWithHttpInfo (int poolId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("poolId", TalonOne.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (upFile != null)
            {
                localVarRequestOptions.FormParameters.Add("upFile", TalonOne.Client.ClientUtils.ParameterToString(upFile)); // form parameter
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/giveaways/pools/{poolId}/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportPoolGiveaways", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import referrals via CSV file Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportReferrals (int applicationId, int campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportReferralsWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import referrals via CSV file Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportReferralsWithHttpInfo (int applicationId, int campaignId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (upFile != null)
            {
                localVarRequestOptions.FormParameters.Add("upFile", TalonOne.Client.ClientUtils.ParameterToString(upFile)); // form parameter
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/applications/{applicationId}/campaigns/{campaignId}/import_referrals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportReferrals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import referrals via CSV file Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportReferralsAsync (int applicationId, int campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportReferralsAsyncWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import referrals via CSV file Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the data that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportReferralsAsyncWithHttpInfo (int applicationId, int campaignId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (upFile != null)
            {
                localVarRequestOptions.FormParameters.Add("upFile", TalonOne.Client.ClientUtils.ParameterToString(upFile)); // form parameter
            }

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/applications/{applicationId}/campaigns/{campaignId}/import_referrals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportReferrals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deduct points in loyalty program for given customer Remove points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void RemoveLoyaltyPoints (string programID, string integrationID, LoyaltyPoints body)
        {
             RemoveLoyaltyPointsWithHttpInfo(programID, integrationID, body);
        }

        /// <summary>
        /// Deduct points in loyalty program for given customer Remove points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> RemoveLoyaltyPointsWithHttpInfo (string programID, string integrationID, LoyaltyPoints body)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->RemoveLoyaltyPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationID", TalonOne.Client.ClientUtils.ParameterToString(integrationID)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{programID}/profile/{integrationID}/deduct_points", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deduct points in loyalty program for given customer Remove points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveLoyaltyPointsAsync (string programID, string integrationID, LoyaltyPoints body)
        {
             await RemoveLoyaltyPointsAsyncWithHttpInfo(programID, integrationID, body);

        }

        /// <summary>
        /// Deduct points in loyalty program for given customer Remove points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the customer profile, you can use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2) or [Update customer profile](/integration-api/#operation/updateCustomerProfileV2) endpoints. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID"></param>
        /// <param name="integrationID"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> RemoveLoyaltyPointsAsyncWithHttpInfo (string programID, string integrationID, LoyaltyPoints body)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->RemoveLoyaltyPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("programID", TalonOne.Client.ClientUtils.ParameterToString(programID)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationID", TalonOne.Client.ClientUtils.ParameterToString(integrationID)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{programID}/profile/{integrationID}/deduct_points", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>NewPassword</returns>
        public NewPassword ResetPassword (NewPassword body)
        {
             TalonOne.Client.ApiResponse<NewPassword> localVarResponse = ResetPasswordWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of NewPassword</returns>
        public TalonOne.Client.ApiResponse< NewPassword > ResetPasswordWithHttpInfo (NewPassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ResetPassword");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< NewPassword >("/v1/reset_password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of NewPassword</returns>
        public async System.Threading.Tasks.Task<NewPassword> ResetPasswordAsync (NewPassword body)
        {
             TalonOne.Client.ApiResponse<NewPassword> localVarResponse = await ResetPasswordAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (NewPassword)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<NewPassword>> ResetPasswordAsyncWithHttpInfo (NewPassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ResetPassword");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NewPassword>("/v1/reset_password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 SearchCouponsAdvancedApplicationWideWithoutTotalCount (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2005> localVarResponse = SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2005 > SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedApplicationWideWithoutTotalCount");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2005 >("/v1/applications/{applicationId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedApplicationWideWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsync (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2005> localVarResponse = await SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2005>> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedApplicationWideWithoutTotalCount");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2005>("/v1/applications/{applicationId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedApplicationWideWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes Gets a list of all the coupons with attributes matching the query criteria 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 SearchCouponsAdvancedWithoutTotalCount (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2005> localVarResponse = SearchCouponsAdvancedWithoutTotalCountWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes Gets a list of all the coupons with attributes matching the query criteria 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2005 > SearchCouponsAdvancedWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2005 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes Gets a list of all the coupons with attributes matching the query criteria 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> SearchCouponsAdvancedWithoutTotalCountAsync (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2005> localVarResponse = await SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes Gets a list of all the coupons with attributes matching the query criteria 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2005>> SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2005>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="body"></param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost UpdateAdditionalCost (int additionalCostId, NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = UpdateAdditionalCostWithHttpInfo(additionalCostId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public TalonOne.Client.ApiResponse< AccountAdditionalCost > UpdateAdditionalCostWithHttpInfo (int additionalCostId, NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAdditionalCost");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< AccountAdditionalCost >("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="body"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> UpdateAdditionalCostAsync (int additionalCostId, NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = await UpdateAdditionalCostAsyncWithHttpInfo(additionalCostId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAdditionalCost>> UpdateAdditionalCostAsyncWithHttpInfo (int additionalCostId, NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAdditionalCost");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountAdditionalCost>("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a custom attribute Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="body"></param>
        /// <returns>Attribute</returns>
        public Attribute UpdateAttribute (int attributeId, NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = UpdateAttributeWithHttpInfo(attributeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a custom attribute Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Attribute</returns>
        public TalonOne.Client.ApiResponse< Attribute > UpdateAttributeWithHttpInfo (int attributeId, NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAttribute");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Attribute >("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a custom attribute Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> UpdateAttributeAsync (int attributeId, NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = await UpdateAttributeAsyncWithHttpInfo(attributeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a custom attribute Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Attribute>> UpdateAttributeAsyncWithHttpInfo (int attributeId, NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAttribute");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Attribute>("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update campaign Update the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Campaign</returns>
        public Campaign UpdateCampaign (int applicationId, int campaignId, UpdateCampaign body)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = UpdateCampaignWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update campaign Update the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Campaign</returns>
        public TalonOne.Client.ApiResponse< Campaign > UpdateCampaignWithHttpInfo (int applicationId, int campaignId, UpdateCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCampaign");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Campaign >("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update campaign Update the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> UpdateCampaignAsync (int applicationId, int campaignId, UpdateCampaign body)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = await UpdateCampaignAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update campaign Update the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Campaign>> UpdateCampaignAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCampaign");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Campaign>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update coupon Update the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="body"></param>
        /// <returns>Coupon</returns>
        public Coupon UpdateCoupon (int applicationId, int campaignId, string couponId, UpdateCoupon body)
        {
             TalonOne.Client.ApiResponse<Coupon> localVarResponse = UpdateCouponWithHttpInfo(applicationId, campaignId, couponId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update coupon Update the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Coupon</returns>
        public TalonOne.Client.ApiResponse< Coupon > UpdateCouponWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon body)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->UpdateCoupon");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCoupon");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Coupon >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update coupon Update the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="body"></param>
        /// <returns>Task of Coupon</returns>
        public async System.Threading.Tasks.Task<Coupon> UpdateCouponAsync (int applicationId, int campaignId, string couponId, UpdateCoupon body)
        {
             TalonOne.Client.ApiResponse<Coupon> localVarResponse = await UpdateCouponAsyncWithHttpInfo(applicationId, campaignId, couponId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update coupon Update the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Coupon>> UpdateCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon body)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->UpdateCoupon");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCoupon");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Coupon>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of coupons Update a batch of coupons. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager or by using [List coupons](#operation/getCouponsWithoutTotalCount).  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void UpdateCouponBatch (int applicationId, int campaignId, UpdateCouponBatch body)
        {
             UpdateCouponBatchWithHttpInfo(applicationId, campaignId, body);
        }

        /// <summary>
        /// Update a batch of coupons Update a batch of coupons. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager or by using [List coupons](#operation/getCouponsWithoutTotalCount).  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> UpdateCouponBatchWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCouponBatch");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCouponBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of coupons Update a batch of coupons. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager or by using [List coupons](#operation/getCouponsWithoutTotalCount).  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCouponBatchAsync (int applicationId, int campaignId, UpdateCouponBatch body)
        {
             await UpdateCouponBatchAsyncWithHttpInfo(applicationId, campaignId, body);

        }

        /// <summary>
        /// Update a batch of coupons Update a batch of coupons. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager or by using [List coupons](#operation/getCouponsWithoutTotalCount).  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> UpdateCouponBatchAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCouponBatch");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCouponBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="body"></param>
        /// <returns>Referral</returns>
        public Referral UpdateReferral (int applicationId, int campaignId, string referralId, UpdateReferral body)
        {
             TalonOne.Client.ApiResponse<Referral> localVarResponse = UpdateReferralWithHttpInfo(applicationId, campaignId, referralId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Referral</returns>
        public TalonOne.Client.ApiResponse< Referral > UpdateReferralWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral body)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->UpdateReferral");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateReferral");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Referral >("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="body"></param>
        /// <returns>Task of Referral</returns>
        public async System.Threading.Tasks.Task<Referral> UpdateReferralAsync (int applicationId, int campaignId, string referralId, UpdateReferral body)
        {
             TalonOne.Client.ApiResponse<Referral> localVarResponse = await UpdateReferralAsyncWithHttpInfo(applicationId, campaignId, referralId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Referral>> UpdateReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral body)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->UpdateReferral");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateReferral");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Referral>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update ruleset Update a ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="body"></param>
        /// <returns>Ruleset</returns>
        public Ruleset UpdateRuleset (int applicationId, int campaignId, int rulesetId, NewRuleset body)
        {
             TalonOne.Client.ApiResponse<Ruleset> localVarResponse = UpdateRulesetWithHttpInfo(applicationId, campaignId, rulesetId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update ruleset Update a ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        public TalonOne.Client.ApiResponse< Ruleset > UpdateRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId, NewRuleset body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateRuleset");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulesetId", TalonOne.Client.ClientUtils.ParameterToString(rulesetId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Ruleset >("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update ruleset Update a ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Ruleset</returns>
        public async System.Threading.Tasks.Task<Ruleset> UpdateRulesetAsync (int applicationId, int campaignId, int rulesetId, NewRuleset body)
        {
             TalonOne.Client.ApiResponse<Ruleset> localVarResponse = await UpdateRulesetAsyncWithHttpInfo(applicationId, campaignId, rulesetId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update ruleset Update a ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Ruleset>> UpdateRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId, NewRuleset body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateRuleset");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulesetId", TalonOne.Client.ClientUtils.ParameterToString(rulesetId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (manager_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Ruleset>("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
