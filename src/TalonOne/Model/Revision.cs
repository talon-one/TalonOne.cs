/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Revision
    /// </summary>
    [DataContract]
    public partial class Revision :  IEquatable<Revision>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Revision" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Revision() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Revision" /> class.
        /// </summary>
        /// <param name="id">Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints. (required).</param>
        /// <param name="activateAt">activateAt.</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="applicationId">applicationId (required).</param>
        /// <param name="campaignId">campaignId (required).</param>
        /// <param name="created">created (required).</param>
        /// <param name="createdBy">createdBy (required).</param>
        /// <param name="activatedAt">activatedAt.</param>
        /// <param name="activatedBy">activatedBy.</param>
        /// <param name="currentVersion">currentVersion.</param>
        public Revision(int id = default(int), DateTime activateAt = default(DateTime), int accountId = default(int), int applicationId = default(int), int campaignId = default(int), DateTime created = default(DateTime), int createdBy = default(int), DateTime activatedAt = default(DateTime), int activatedBy = default(int), RevisionVersion currentVersion = default(RevisionVersion))
        {
            this.Id = id;
            this.AccountId = accountId;
            this.ApplicationId = applicationId;
            this.CampaignId = campaignId;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.ActivateAt = activateAt;
            this.ActivatedAt = activatedAt;
            this.ActivatedBy = activatedBy;
            this.CurrentVersion = currentVersion;
        }
        
        /// <summary>
        /// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
        /// </summary>
        /// <value>Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets ActivateAt
        /// </summary>
        [DataMember(Name="activateAt", EmitDefaultValue=false)]
        public DateTime ActivateAt { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int AccountId { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets CampaignId
        /// </summary>
        [DataMember(Name="campaignId", EmitDefaultValue=false)]
        public int CampaignId { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public int CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets ActivatedAt
        /// </summary>
        [DataMember(Name="activatedAt", EmitDefaultValue=false)]
        public DateTime ActivatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ActivatedBy
        /// </summary>
        [DataMember(Name="activatedBy", EmitDefaultValue=false)]
        public int ActivatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CurrentVersion
        /// </summary>
        [DataMember(Name="currentVersion", EmitDefaultValue=false)]
        public RevisionVersion CurrentVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Revision {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ActivateAt: ").Append(ActivateAt).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ActivatedAt: ").Append(ActivatedAt).Append("\n");
            sb.Append("  ActivatedBy: ").Append(ActivatedBy).Append("\n");
            sb.Append("  CurrentVersion: ").Append(CurrentVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Revision);
        }

        /// <summary>
        /// Returns true if Revision instances are equal
        /// </summary>
        /// <param name="input">Instance of Revision to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Revision input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ActivateAt == input.ActivateAt ||
                    (this.ActivateAt != null &&
                    this.ActivateAt.Equals(input.ActivateAt))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId.Equals(input.AccountId)
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    this.ApplicationId.Equals(input.ApplicationId)
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    this.CampaignId.Equals(input.CampaignId)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.ActivatedAt == input.ActivatedAt ||
                    (this.ActivatedAt != null &&
                    this.ActivatedAt.Equals(input.ActivatedAt))
                ) && 
                (
                    this.ActivatedBy == input.ActivatedBy ||
                    this.ActivatedBy.Equals(input.ActivatedBy)
                ) && 
                (
                    this.CurrentVersion == input.CurrentVersion ||
                    (this.CurrentVersion != null &&
                    this.CurrentVersion.Equals(input.CurrentVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ActivateAt != null)
                    hashCode = hashCode * 59 + this.ActivateAt.GetHashCode();
                hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.ActivatedAt != null)
                    hashCode = hashCode * 59 + this.ActivatedAt.GetHashCode();
                hashCode = hashCode * 59 + this.ActivatedBy.GetHashCode();
                if (this.CurrentVersion != null)
                    hashCode = hashCode * 59 + this.CurrentVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
