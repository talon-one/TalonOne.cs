/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// FeatureFlags
    /// </summary>
    [DataContract]
    public partial class FeatureFlags :  IEquatable<FeatureFlags>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlags" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeatureFlags() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlags" /> class.
        /// </summary>
        /// <param name="accountId">The ID of the account that owns this entity. (required).</param>
        /// <param name="loyalty">Whether the account has access to the loyalty features or not.</param>
        /// <param name="couponsWithoutCount">Whether the account queries coupons with or without total result size.</param>
        /// <param name="betaEffects">Whether the account can test beta effects or not.</param>
        public FeatureFlags(int accountId = default(int), bool loyalty = default(bool), bool couponsWithoutCount = default(bool), bool betaEffects = default(bool))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for FeatureFlags and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            
            this.Loyalty = loyalty;
            this.CouponsWithoutCount = couponsWithoutCount;
            this.BetaEffects = betaEffects;
        }
        
        /// <summary>
        /// The ID of the account that owns this entity.
        /// </summary>
        /// <value>The ID of the account that owns this entity.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int AccountId { get; set; }

        /// <summary>
        /// Whether the account has access to the loyalty features or not
        /// </summary>
        /// <value>Whether the account has access to the loyalty features or not</value>
        [DataMember(Name="loyalty", EmitDefaultValue=false)]
        public bool Loyalty { get; set; }

        /// <summary>
        /// Whether the account queries coupons with or without total result size
        /// </summary>
        /// <value>Whether the account queries coupons with or without total result size</value>
        [DataMember(Name="coupons_without_count", EmitDefaultValue=false)]
        public bool CouponsWithoutCount { get; set; }

        /// <summary>
        /// Whether the account can test beta effects or not
        /// </summary>
        /// <value>Whether the account can test beta effects or not</value>
        [DataMember(Name="betaEffects", EmitDefaultValue=false)]
        public bool BetaEffects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureFlags {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Loyalty: ").Append(Loyalty).Append("\n");
            sb.Append("  CouponsWithoutCount: ").Append(CouponsWithoutCount).Append("\n");
            sb.Append("  BetaEffects: ").Append(BetaEffects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureFlags);
        }

        /// <summary>
        /// Returns true if FeatureFlags instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureFlags to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureFlags input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Loyalty == input.Loyalty ||
                    (this.Loyalty != null &&
                    this.Loyalty.Equals(input.Loyalty))
                ) && 
                (
                    this.CouponsWithoutCount == input.CouponsWithoutCount ||
                    (this.CouponsWithoutCount != null &&
                    this.CouponsWithoutCount.Equals(input.CouponsWithoutCount))
                ) && 
                (
                    this.BetaEffects == input.BetaEffects ||
                    (this.BetaEffects != null &&
                    this.BetaEffects.Equals(input.BetaEffects))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Loyalty != null)
                    hashCode = hashCode * 59 + this.Loyalty.GetHashCode();
                if (this.CouponsWithoutCount != null)
                    hashCode = hashCode * 59 + this.CouponsWithoutCount.GetHashCode();
                if (this.BetaEffects != null)
                    hashCode = hashCode * 59 + this.BetaEffects.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
