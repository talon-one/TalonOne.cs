/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// PriceDetail
    /// </summary>
    [DataContract]
    public partial class PriceDetail :  IEquatable<PriceDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceDetail" /> class.
        /// </summary>
        /// <param name="price">The value of this price type..</param>
        /// <param name="adjustmentReferenceId">The reference identifier of the selected price adjustment for this SKU..</param>
        /// <param name="adjustmentEffectiveFrom">The date and time from which the price adjustment is effective..</param>
        /// <param name="adjustmentEffectiveUntil">The date and time until which the price adjustment is effective..</param>
        public PriceDetail(float price = default(float), Guid adjustmentReferenceId = default(Guid), DateTime adjustmentEffectiveFrom = default(DateTime), DateTime adjustmentEffectiveUntil = default(DateTime))
        {
            this.Price = price;
            this.AdjustmentReferenceId = adjustmentReferenceId;
            this.AdjustmentEffectiveFrom = adjustmentEffectiveFrom;
            this.AdjustmentEffectiveUntil = adjustmentEffectiveUntil;
        }
        
        /// <summary>
        /// The value of this price type.
        /// </summary>
        /// <value>The value of this price type.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public float Price { get; set; }

        /// <summary>
        /// The reference identifier of the selected price adjustment for this SKU.
        /// </summary>
        /// <value>The reference identifier of the selected price adjustment for this SKU.</value>
        [DataMember(Name="adjustmentReferenceId", EmitDefaultValue=false)]
        public Guid AdjustmentReferenceId { get; set; }

        /// <summary>
        /// The date and time from which the price adjustment is effective.
        /// </summary>
        /// <value>The date and time from which the price adjustment is effective.</value>
        [DataMember(Name="adjustmentEffectiveFrom", EmitDefaultValue=false)]
        public DateTime AdjustmentEffectiveFrom { get; set; }

        /// <summary>
        /// The date and time until which the price adjustment is effective.
        /// </summary>
        /// <value>The date and time until which the price adjustment is effective.</value>
        [DataMember(Name="adjustmentEffectiveUntil", EmitDefaultValue=false)]
        public DateTime AdjustmentEffectiveUntil { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceDetail {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  AdjustmentReferenceId: ").Append(AdjustmentReferenceId).Append("\n");
            sb.Append("  AdjustmentEffectiveFrom: ").Append(AdjustmentEffectiveFrom).Append("\n");
            sb.Append("  AdjustmentEffectiveUntil: ").Append(AdjustmentEffectiveUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceDetail);
        }

        /// <summary>
        /// Returns true if PriceDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.AdjustmentReferenceId == input.AdjustmentReferenceId ||
                    (this.AdjustmentReferenceId != null &&
                    this.AdjustmentReferenceId.Equals(input.AdjustmentReferenceId))
                ) && 
                (
                    this.AdjustmentEffectiveFrom == input.AdjustmentEffectiveFrom ||
                    (this.AdjustmentEffectiveFrom != null &&
                    this.AdjustmentEffectiveFrom.Equals(input.AdjustmentEffectiveFrom))
                ) && 
                (
                    this.AdjustmentEffectiveUntil == input.AdjustmentEffectiveUntil ||
                    (this.AdjustmentEffectiveUntil != null &&
                    this.AdjustmentEffectiveUntil.Equals(input.AdjustmentEffectiveUntil))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.AdjustmentReferenceId != null)
                    hashCode = hashCode * 59 + this.AdjustmentReferenceId.GetHashCode();
                if (this.AdjustmentEffectiveFrom != null)
                    hashCode = hashCode * 59 + this.AdjustmentEffectiveFrom.GetHashCode();
                if (this.AdjustmentEffectiveUntil != null)
                    hashCode = hashCode * 59 + this.AdjustmentEffectiveUntil.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
