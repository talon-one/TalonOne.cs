/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TalonOne.Client;
using TalonOne.Model;
using Attribute = TalonOne.Model.Attribute;

namespace TalonOne.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Enable user by email address
        /// </summary>
        /// <remarks>
        /// Enable a [disabled user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns></returns>
        void ActivateUserByEmail (DeleteUserRequest body);

        /// <summary>
        /// Enable user by email address
        /// </summary>
        /// <remarks>
        /// Enable a [disabled user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateUserByEmailWithHttpInfo (DeleteUserRequest body);
        /// <summary>
        /// Add points to card
        /// </summary>
        /// <remarks>
        /// Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void AddLoyaltyCardPoints (long loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body);

        /// <summary>
        /// Add points to card
        /// </summary>
        /// <remarks>
        /// Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLoyaltyCardPointsWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body);
        /// <summary>
        /// Add points to customer profile
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void AddLoyaltyPoints (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body);

        /// <summary>
        /// Add points to customer profile
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body);
        /// <summary>
        /// Copy the campaign into the specified Application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into all specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 CopyCampaignToApplications (long applicationId, long campaignId, CampaignCopy body);

        /// <summary>
        /// Copy the campaign into the specified Application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into all specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> CopyCampaignToApplicationsWithHttpInfo (long applicationId, long campaignId, CampaignCopy body);
        /// <summary>
        /// Create account-level collection
        /// </summary>
        /// <remarks>
        /// Create an account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        Collection CreateAccountCollection (NewCollection body);

        /// <summary>
        /// Create account-level collection
        /// </summary>
        /// <remarks>
        /// Create an account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> CreateAccountCollectionWithHttpInfo (NewCollection body);
        /// <summary>
        /// Create achievement
        /// </summary>
        /// <remarks>
        /// Create a new achievement in a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Achievement</returns>
        Achievement CreateAchievement (long applicationId, long campaignId, CreateAchievement body);

        /// <summary>
        /// Create achievement
        /// </summary>
        /// <remarks>
        /// Create a new achievement in a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Achievement</returns>
        ApiResponse<Achievement> CreateAchievementWithHttpInfo (long applicationId, long campaignId, CreateAchievement body);
        /// <summary>
        /// Create additional cost
        /// </summary>
        /// <remarks>
        /// Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost CreateAdditionalCost (NewAdditionalCost body);

        /// <summary>
        /// Create additional cost
        /// </summary>
        /// <remarks>
        /// Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> CreateAdditionalCostWithHttpInfo (NewAdditionalCost body);
        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Attribute</returns>
        Attribute CreateAttribute (NewAttribute body);

        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> CreateAttributeWithHttpInfo (NewAttribute body);
        /// <summary>
        /// Create loyalty cards
        /// </summary>
        /// <remarks>
        /// Create a batch of loyalty cards in a specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types).  Customers can use loyalty cards to collect and spend loyalty points.  **Important:**  - The specified card-based loyalty program must have a defined card code format that is used to generate the loyalty card codes. - Trying to create more than 20,000 loyalty cards in a single request returns an error message with a &#x60;400&#x60; status code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>LoyaltyCardBatchResponse</returns>
        LoyaltyCardBatchResponse CreateBatchLoyaltyCards (long loyaltyProgramId, LoyaltyCardBatch body);

        /// <summary>
        /// Create loyalty cards
        /// </summary>
        /// <remarks>
        /// Create a batch of loyalty cards in a specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types).  Customers can use loyalty cards to collect and spend loyalty points.  **Important:**  - The specified card-based loyalty program must have a defined card code format that is used to generate the loyalty card codes. - Trying to create more than 20,000 loyalty cards in a single request returns an error message with a &#x60;400&#x60; status code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of LoyaltyCardBatchResponse</returns>
        ApiResponse<LoyaltyCardBatchResponse> CreateBatchLoyaltyCardsWithHttpInfo (long loyaltyProgramId, LoyaltyCardBatch body);
        /// <summary>
        /// Create campaign from campaign template
        /// </summary>
        /// <remarks>
        /// Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>CreateTemplateCampaignResponse</returns>
        CreateTemplateCampaignResponse CreateCampaignFromTemplate (long applicationId, CreateTemplateCampaign body);

        /// <summary>
        /// Create campaign from campaign template
        /// </summary>
        /// <remarks>
        /// Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of CreateTemplateCampaignResponse</returns>
        ApiResponse<CreateTemplateCampaignResponse> CreateCampaignFromTemplateWithHttpInfo (long applicationId, CreateTemplateCampaign body);
        /// <summary>
        /// Create campaign store budget
        /// </summary>
        /// <remarks>
        /// Create a new store budget for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void CreateCampaignStoreBudget (long applicationId, long campaignId, NewCampaignStoreBudget body);

        /// <summary>
        /// Create campaign store budget
        /// </summary>
        /// <remarks>
        /// Create a new store budget for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateCampaignStoreBudgetWithHttpInfo (long applicationId, long campaignId, NewCampaignStoreBudget body);
        /// <summary>
        /// Create campaign-level collection
        /// </summary>
        /// <remarks>
        /// Create a campaign-level collection in a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        Collection CreateCollection (long applicationId, long campaignId, NewCampaignCollection body);

        /// <summary>
        /// Create campaign-level collection
        /// </summary>
        /// <remarks>
        /// Create a campaign-level collection in a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> CreateCollectionWithHttpInfo (long applicationId, long campaignId, NewCampaignCollection body);
        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 CreateCoupons (long applicationId, long campaignId, NewCoupons body, string silent = default(string));

        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> CreateCouponsWithHttpInfo (long applicationId, long campaignId, NewCoupons body, string silent = default(string));
        /// <summary>
        /// Create coupons asynchronously
        /// </summary>
        /// <remarks>
        /// Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>AsyncCouponCreationResponse</returns>
        AsyncCouponCreationResponse CreateCouponsAsync (long applicationId, long campaignId, NewCouponCreationJob body);

        /// <summary>
        /// Create coupons asynchronously
        /// </summary>
        /// <remarks>
        /// Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AsyncCouponCreationResponse</returns>
        ApiResponse<AsyncCouponCreationResponse> CreateCouponsAsyncWithHttpInfo (long applicationId, long campaignId, NewCouponCreationJob body);
        /// <summary>
        /// Creates a coupon deletion job
        /// </summary>
        /// <remarks>
        /// This endpoint handles creating a job to delete coupons asynchronously. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>AsyncCouponDeletionJobResponse</returns>
        AsyncCouponDeletionJobResponse CreateCouponsDeletionJob (long applicationId, long campaignId, NewCouponDeletionJob body);

        /// <summary>
        /// Creates a coupon deletion job
        /// </summary>
        /// <remarks>
        /// This endpoint handles creating a job to delete coupons asynchronously. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AsyncCouponDeletionJobResponse</returns>
        ApiResponse<AsyncCouponDeletionJobResponse> CreateCouponsDeletionJobWithHttpInfo (long applicationId, long campaignId, NewCouponDeletionJob body);
        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 CreateCouponsForMultipleRecipients (long applicationId, long campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));

        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> CreateCouponsForMultipleRecipientsWithHttpInfo (long applicationId, long campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));
        /// <summary>
        /// Resend invitation email
        /// </summary>
        /// <remarks>
        /// Resend an email invitation to an existing user.  **Note:** The invitation token is valid for 24 hours after the email has been sent. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>NewInviteEmail</returns>
        NewInviteEmail CreateInviteEmail (NewInviteEmail body);

        /// <summary>
        /// Resend invitation email
        /// </summary>
        /// <remarks>
        /// Resend an email invitation to an existing user.  **Note:** The invitation token is valid for 24 hours after the email has been sent. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NewInviteEmail</returns>
        ApiResponse<NewInviteEmail> CreateInviteEmailWithHttpInfo (NewInviteEmail body);
        /// <summary>
        /// Invite user
        /// </summary>
        /// <remarks>
        /// Create a new user in the account and send an invitation to their email address.  **Note**: The invitation token is valid for 24 hours after the email has been sent. You can resend an invitation to a user with the [Resend invitation email](https://docs.talon.one/management-api#tag/Accounts-and-users/operation/createInviteEmail) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>User</returns>
        User CreateInviteV2 (NewInvitation body);

        /// <summary>
        /// Invite user
        /// </summary>
        /// <remarks>
        /// Create a new user in the account and send an invitation to their email address.  **Note**: The invitation token is valid for 24 hours after the email has been sent. You can resend an invitation to a user with the [Resend invitation email](https://docs.talon.one/management-api#tag/Accounts-and-users/operation/createInviteEmail) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateInviteV2WithHttpInfo (NewInvitation body);
        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>NewPasswordEmail</returns>
        NewPasswordEmail CreatePasswordRecoveryEmail (NewPasswordEmail body);

        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NewPasswordEmail</returns>
        ApiResponse<NewPasswordEmail> CreatePasswordRecoveryEmailWithHttpInfo (NewPasswordEmail body);
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Session</returns>
        Session CreateSession (LoginParams body);

        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Session</returns>
        ApiResponse<Session> CreateSessionWithHttpInfo (LoginParams body);
        /// <summary>
        /// Create store
        /// </summary>
        /// <remarks>
        /// Create a new store in a specific Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Store</returns>
        Store CreateStore (long applicationId, NewStore body);

        /// <summary>
        /// Create store
        /// </summary>
        /// <remarks>
        /// Create a new store in a specific Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> CreateStoreWithHttpInfo (long applicationId, NewStore body);
        /// <summary>
        /// Disable user by email address
        /// </summary>
        /// <remarks>
        /// [Disable a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns></returns>
        void DeactivateUserByEmail (DeleteUserRequest body);

        /// <summary>
        /// Disable user by email address
        /// </summary>
        /// <remarks>
        /// [Disable a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateUserByEmailWithHttpInfo (DeleteUserRequest body);
        /// <summary>
        /// Deduct points from card
        /// </summary>
        /// <remarks>
        /// Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void DeductLoyaltyCardPoints (long loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body);

        /// <summary>
        /// Deduct points from card
        /// </summary>
        /// <remarks>
        /// Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeductLoyaltyCardPointsWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body);
        /// <summary>
        /// Delete account-level collection
        /// </summary>
        /// <remarks>
        /// Delete a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns></returns>
        void DeleteAccountCollection (long collectionId);

        /// <summary>
        /// Delete account-level collection
        /// </summary>
        /// <remarks>
        /// Delete a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountCollectionWithHttpInfo (long collectionId);
        /// <summary>
        /// Delete achievement
        /// </summary>
        /// <remarks>
        /// Delete the specified achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns></returns>
        void DeleteAchievement (long applicationId, long campaignId, long achievementId);

        /// <summary>
        /// Delete achievement
        /// </summary>
        /// <remarks>
        /// Delete the specified achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAchievementWithHttpInfo (long applicationId, long campaignId, long achievementId);
        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns></returns>
        void DeleteCampaign (long applicationId, long campaignId);

        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCampaignWithHttpInfo (long applicationId, long campaignId);
        /// <summary>
        /// Delete campaign store budgets
        /// </summary>
        /// <remarks>
        /// Delete the store budgets for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns></returns>
        void DeleteCampaignStoreBudgets (long applicationId, long campaignId, string action = default(string), string period = default(string));

        /// <summary>
        /// Delete campaign store budgets
        /// </summary>
        /// <remarks>
        /// Delete the store budgets for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCampaignStoreBudgetsWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string));
        /// <summary>
        /// Delete campaign-level collection
        /// </summary>
        /// <remarks>
        /// Delete a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns></returns>
        void DeleteCollection (long applicationId, long campaignId, long collectionId);

        /// <summary>
        /// Delete campaign-level collection
        /// </summary>
        /// <remarks>
        /// Delete a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCollectionWithHttpInfo (long applicationId, long campaignId, long collectionId);
        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns></returns>
        void DeleteCoupon (long applicationId, long campaignId, string couponId);

        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponWithHttpInfo (long applicationId, long campaignId, string couponId);
        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns></returns>
        void DeleteCoupons (long applicationId, long campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponsWithHttpInfo (long applicationId, long campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Delete loyalty card
        /// </summary>
        /// <remarks>
        /// Delete the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns></returns>
        void DeleteLoyaltyCard (long loyaltyProgramId, string loyaltyCardId);

        /// <summary>
        /// Delete loyalty card
        /// </summary>
        /// <remarks>
        /// Delete the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLoyaltyCardWithHttpInfo (long loyaltyProgramId, string loyaltyCardId);
        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns></returns>
        void DeleteReferral (long applicationId, long campaignId, string referralId);

        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReferralWithHttpInfo (long applicationId, long campaignId, string referralId);
        /// <summary>
        /// Delete store
        /// </summary>
        /// <remarks>
        /// Delete the specified store.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns></returns>
        void DeleteStore (long applicationId, string storeId);

        /// <summary>
        /// Delete store
        /// </summary>
        /// <remarks>
        /// Delete the specified store.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStoreWithHttpInfo (long applicationId, string storeId);
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Delete a specific user.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        void DeleteUser (long userId);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Delete a specific user.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (long userId);
        /// <summary>
        /// Delete user by email address
        /// </summary>
        /// <remarks>
        /// [Delete a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#deleting-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns></returns>
        void DeleteUserByEmail (DeleteUserRequest body);

        /// <summary>
        /// Delete user by email address
        /// </summary>
        /// <remarks>
        /// [Delete a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#deleting-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserByEmailWithHttpInfo (DeleteUserRequest body);
        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DestroySession ();

        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroySessionWithHttpInfo ();
        /// <summary>
        /// Disconnect stores
        /// </summary>
        /// <remarks>
        /// Disconnect the stores linked to a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns></returns>
        void DisconnectCampaignStores (long applicationId, long campaignId);

        /// <summary>
        /// Disconnect stores
        /// </summary>
        /// <remarks>
        /// Disconnect the stores linked to a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisconnectCampaignStoresWithHttpInfo (long applicationId, long campaignId);
        /// <summary>
        /// Export account-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from a given account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>string</returns>
        string ExportAccountCollectionItems (long collectionId);

        /// <summary>
        /// Export account-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from a given account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportAccountCollectionItemsWithHttpInfo (long collectionId);
        /// <summary>
        /// Export achievement customer data
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a list of all the customers who have participated in and are currently participating in the given achievement.  The CSV file contains the following columns: - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile participating in the achievement. - &#x60;title&#x60;: The display name of the achievement in the Campaign Manager. - &#x60;target&#x60;: The required number of actions or the transactional milestone to complete the achievement. - &#x60;progress&#x60;: The current progress of the customer in the achievement. - &#x60;status&#x60;: The status of the achievement. Can be one of: [&#39;inprogress&#39;, &#39;completed&#39;, &#39;expired&#39;]. - &#x60;startDate&#x60;: The date on which the customer profile started the achievement in RFC3339. - &#x60;endDate&#x60;: The date on which the achievement ends and resets for the customer profile in RFC3339. - &#x60;completionDate&#x60;: The date on which the customer profile completed the achievement in RFC3339. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>string</returns>
        string ExportAchievements (long applicationId, long campaignId, long achievementId);

        /// <summary>
        /// Export achievement customer data
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a list of all the customers who have participated in and are currently participating in the given achievement.  The CSV file contains the following columns: - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile participating in the achievement. - &#x60;title&#x60;: The display name of the achievement in the Campaign Manager. - &#x60;target&#x60;: The required number of actions or the transactional milestone to complete the achievement. - &#x60;progress&#x60;: The current progress of the customer in the achievement. - &#x60;status&#x60;: The status of the achievement. Can be one of: [&#39;inprogress&#39;, &#39;completed&#39;, &#39;expired&#39;]. - &#x60;startDate&#x60;: The date on which the customer profile started the achievement in RFC3339. - &#x60;endDate&#x60;: The date on which the achievement ends and resets for the customer profile in RFC3339. - &#x60;completionDate&#x60;: The date on which the customer profile completed the achievement in RFC3339. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportAchievementsWithHttpInfo (long applicationId, long campaignId, long achievementId);
        /// <summary>
        /// Export audience members
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the integration IDs of the members of an audience.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The file contains the following column: - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <returns>string</returns>
        string ExportAudiencesMemberships (long audienceId);

        /// <summary>
        /// Export audience members
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the integration IDs of the members of an audience.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The file contains the following column: - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportAudiencesMembershipsWithHttpInfo (long audienceId);
        /// <summary>
        /// Export campaign store budgets
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the store budgets for a given campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>string</returns>
        string ExportCampaignStoreBudgets (long applicationId, long campaignId, string action = default(string), string period = default(string));

        /// <summary>
        /// Export campaign store budgets
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the store budgets for a given campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCampaignStoreBudgetsWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string));
        /// <summary>
        /// Export stores
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the stores linked to a specific campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following column:  - &#x60;store_integration_id&#x60;: The identifier of the store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>string</returns>
        string ExportCampaignStores (long applicationId, long campaignId);

        /// <summary>
        /// Export stores
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the stores linked to a specific campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following column:  - &#x60;store_integration_id&#x60;: The identifier of the store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCampaignStoresWithHttpInfo (long applicationId, long campaignId);
        /// <summary>
        /// Export campaign-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from a given campaign-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>string</returns>
        string ExportCollectionItems (long applicationId, long campaignId, long collectionId);

        /// <summary>
        /// Export campaign-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from a given campaign-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCollectionItemsWithHttpInfo (long applicationId, long campaignId, long collectionId);
        /// <summary>
        /// Export coupons
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file can contain the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date in RFC3339 of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon can be reserved for multiple customers. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>string</returns>
        string ExportCoupons (long applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string), bool? valuesOnly = default(bool?));

        /// <summary>
        /// Export coupons
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file can contain the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date in RFC3339 of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon can be reserved for multiple customers. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCouponsWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string), bool? valuesOnly = default(bool?));
        /// <summary>
        /// Export customer sessions
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/dev/server-infrastructure-and-data-retention).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of cart items and additional costs in the session, before any discounts are applied. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;store_integration_id&#x60;: The integration ID of the store. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>string</returns>
        string ExportCustomerSessions (long applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));

        /// <summary>
        /// Export customer sessions
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/dev/server-infrastructure-and-data-retention).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of cart items and additional costs in the session, before any discounts are applied. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;store_integration_id&#x60;: The integration ID of the store. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCustomerSessionsWithHttpInfo (long applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));
        /// <summary>
        /// Export customers&#39; tier data
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the tier information for customers of the specified loyalty program.  The generated file contains the following columns:  - &#x60;programid&#x60;: The identifier of the loyalty program. It is displayed in your Talon.One deployment URL. - &#x60;subledgerid&#x60;: The ID of the subledger associated with the loyalty program. This column is empty if the loyalty program has no subledger. In this case, refer to the export file name to get the ID of the loyalty program. - &#x60;customerprofileid&#x60;: The ID used to integrate customer profiles with the loyalty program. - &#x60;tiername&#x60;: The name of the tier. - &#x60;startdate&#x60;: The tier start date in RFC3339. - &#x60;expirydate&#x60;: The tier expiry date in RFC3339.  You can filter the results by providing the following optional input parameters:  - &#x60;subledgerIds&#x60; (optional): Filter results by an array of subledger IDs. If no value is provided, all subledger data for the specified loyalty program will be exported. - &#x60;tierNames&#x60; (optional): Filter results by an array of tier names. If no value is provided, all tier data for the specified loyalty program will be exported. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="subledgerIds">An array of subledgers IDs to filter the export by. (optional)</param>
        /// <param name="tierNames">An array of tier names to filter the export by. (optional)</param>
        /// <returns>string</returns>
        string ExportCustomersTiers (string loyaltyProgramId, List<string> subledgerIds = default(List<string>), List<string> tierNames = default(List<string>));

        /// <summary>
        /// Export customers&#39; tier data
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the tier information for customers of the specified loyalty program.  The generated file contains the following columns:  - &#x60;programid&#x60;: The identifier of the loyalty program. It is displayed in your Talon.One deployment URL. - &#x60;subledgerid&#x60;: The ID of the subledger associated with the loyalty program. This column is empty if the loyalty program has no subledger. In this case, refer to the export file name to get the ID of the loyalty program. - &#x60;customerprofileid&#x60;: The ID used to integrate customer profiles with the loyalty program. - &#x60;tiername&#x60;: The name of the tier. - &#x60;startdate&#x60;: The tier start date in RFC3339. - &#x60;expirydate&#x60;: The tier expiry date in RFC3339.  You can filter the results by providing the following optional input parameters:  - &#x60;subledgerIds&#x60; (optional): Filter results by an array of subledger IDs. If no value is provided, all subledger data for the specified loyalty program will be exported. - &#x60;tierNames&#x60; (optional): Filter results by an array of tier names. If no value is provided, all tier data for the specified loyalty program will be exported. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="subledgerIds">An array of subledgers IDs to filter the export by. (optional)</param>
        /// <param name="tierNames">An array of tier names to filter the export by. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCustomersTiersWithHttpInfo (string loyaltyProgramId, List<string> subledgerIds = default(List<string>), List<string> tierNames = default(List<string>));
        /// <summary>
        /// Export triggered effects
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/entities/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. - &#x60;store_integration_id&#x60;: The integration ID of the store. You choose this ID when you create a store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportEffects (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));

        /// <summary>
        /// Export triggered effects
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/entities/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. - &#x60;store_integration_id&#x60;: The integration ID of the store. You choose this ID when you create a store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportEffectsWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));
        /// <summary>
        /// Export customer loyalty balance to CSV
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyBalance (string loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export customer loyalty balance to CSV
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyBalanceWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export customer loyalty balances
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyBalances (string loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export customer loyalty balances
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyBalancesWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export all card transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyCardBalances (long loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export all card transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyCardBalancesWithHttpInfo (long loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export card&#39;s ledger log
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyCardLedger (long loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));

        /// <summary>
        /// Export card&#39;s ledger log
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyCardLedgerWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));
        /// <summary>
        /// Export loyalty cards
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the loyalty cards from a specified loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;identifier&#x60;: The unique identifier of the loyalty card. - &#x60;created&#x60;: The date and time the loyalty card was created. - &#x60;status&#x60;: The status of the loyalty card. - &#x60;userpercardlimit&#x60;: The maximum number of customer profiles that can be linked to the card. - &#x60;customerprofileids&#x60;: Integration IDs of the customer profiles linked to the card. - &#x60;blockreason&#x60;: The reason for transferring and blocking the loyalty card. - &#x60;generated&#x60;: An indicator of whether the loyalty card was generated. - &#x60;batchid&#x60;: The ID of the batch the loyalty card is in. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <param name="createdBefore">Only return loyalty cards created before this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="createdAfter">Only return loyalty cards created after this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyCards (long loyaltyProgramId, string batchId = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));

        /// <summary>
        /// Export loyalty cards
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the loyalty cards from a specified loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;identifier&#x60;: The unique identifier of the loyalty card. - &#x60;created&#x60;: The date and time the loyalty card was created. - &#x60;status&#x60;: The status of the loyalty card. - &#x60;userpercardlimit&#x60;: The maximum number of customer profiles that can be linked to the card. - &#x60;customerprofileids&#x60;: Integration IDs of the customer profiles linked to the card. - &#x60;blockreason&#x60;: The reason for transferring and blocking the loyalty card. - &#x60;generated&#x60;: An indicator of whether the loyalty card was generated. - &#x60;batchid&#x60;: The ID of the batch the loyalty card is in. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <param name="createdBefore">Only return loyalty cards created before this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="createdAfter">Only return loyalty cards created after this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyCardsWithHttpInfo (long loyaltyProgramId, string batchId = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));
        /// <summary>
        /// Export customer&#39;s transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The transaction type, such as &#x60;addition&#x60; or &#x60;subtraction&#x60;. - &#x60;name&#x60;: The reason for the transaction. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;flags&#x60;: The flags of the transaction, when applicable. The &#x60;createsNegativeBalance&#x60; flag indicates whether the transaction results in a negative balance. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyLedger (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string));

        /// <summary>
        /// Export customer&#39;s transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The transaction type, such as &#x60;addition&#x60; or &#x60;subtraction&#x60;. - &#x60;name&#x60;: The reason for the transaction. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;flags&#x60;: The flags of the transaction, when applicable. The &#x60;createsNegativeBalance&#x60; flag indicates whether the transaction results in a negative balance. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyLedgerWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string));
        /// <summary>
        /// Export giveaway codes of a giveaway pool
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the giveaway codes of a specific giveaway pool.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;id&#x60;: The internal ID of the giveaway. - &#x60;poolid&#x60;: The internal ID of the giveaway pool. - &#x60;code&#x60;: The giveaway code. - &#x60;startdate&#x60;: The validity start date in RFC3339 of the giveaway (can be empty). - &#x60;enddate&#x60;: The validity end date in RFC3339 of the giveaway (can be empty). - &#x60;attributes&#x60;: Any custom attributes associated with the giveaway code (can be empty). - &#x60;used&#x60;: An indication of whether the giveaway is already awarded. - &#x60;importid&#x60;: The ID of the import which created the giveaway. - &#x60;created&#x60;: The creation time of the giveaway code. - &#x60;profileintegrationid&#x60;: The third-party integration ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded. - &#x60;profileid&#x60;: The internal ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded or an internal ID does not exist. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="createdBefore">Timestamp that filters the results to only contain giveaways created before this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Timestamp that filters the results to only contain giveaways created after this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <returns>string</returns>
        string ExportPoolGiveaways (long poolId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// Export giveaway codes of a giveaway pool
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the giveaway codes of a specific giveaway pool.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;id&#x60;: The internal ID of the giveaway. - &#x60;poolid&#x60;: The internal ID of the giveaway pool. - &#x60;code&#x60;: The giveaway code. - &#x60;startdate&#x60;: The validity start date in RFC3339 of the giveaway (can be empty). - &#x60;enddate&#x60;: The validity end date in RFC3339 of the giveaway (can be empty). - &#x60;attributes&#x60;: Any custom attributes associated with the giveaway code (can be empty). - &#x60;used&#x60;: An indication of whether the giveaway is already awarded. - &#x60;importid&#x60;: The ID of the import which created the giveaway. - &#x60;created&#x60;: The creation time of the giveaway code. - &#x60;profileintegrationid&#x60;: The third-party integration ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded. - &#x60;profileid&#x60;: The internal ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded or an internal ID does not exist. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="createdBefore">Timestamp that filters the results to only contain giveaways created before this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Timestamp that filters the results to only contain giveaways created after this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportPoolGiveawaysWithHttpInfo (long poolId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// Export referrals
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportReferrals (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string));

        /// <summary>
        /// Export referrals
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportReferralsWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string));
        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls sent to the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GetAccessLogsWithoutTotalCount (long applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls sent to the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GetAccessLogsWithoutTotalCountWithHttpInfo (long applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Account</returns>
        Account GetAccount (long accountId);

        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> GetAccountWithHttpInfo (long accountId);
        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>AccountAnalytics</returns>
        AccountAnalytics GetAccountAnalytics (long accountId);

        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>ApiResponse of AccountAnalytics</returns>
        ApiResponse<AccountAnalytics> GetAccountAnalyticsWithHttpInfo (long accountId);
        /// <summary>
        /// Get account-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Collection</returns>
        Collection GetAccountCollection (long collectionId);

        /// <summary>
        /// Get account-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> GetAccountCollectionWithHttpInfo (long collectionId);
        /// <summary>
        /// Get achievement
        /// </summary>
        /// <remarks>
        /// Get the details of a specific achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Achievement</returns>
        Achievement GetAchievement (long applicationId, long campaignId, long achievementId);

        /// <summary>
        /// Get achievement
        /// </summary>
        /// <remarks>
        /// Get the details of a specific achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>ApiResponse of Achievement</returns>
        ApiResponse<Achievement> GetAchievementWithHttpInfo (long applicationId, long campaignId, long achievementId);
        /// <summary>
        /// Get additional cost
        /// </summary>
        /// <remarks>
        /// Returns the additional cost. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost GetAdditionalCost (long additionalCostId);

        /// <summary>
        /// Get additional cost
        /// </summary>
        /// <remarks>
        /// Returns the additional cost. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> GetAdditionalCostWithHttpInfo (long additionalCostId);
        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20038</returns>
        InlineResponse20038 GetAdditionalCosts (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        ApiResponse<InlineResponse20038> GetAdditionalCostsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Application</returns>
        Application GetApplication (long applicationId);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> GetApplicationWithHttpInfo (long applicationId);
        /// <summary>
        /// Get Application health
        /// </summary>
        /// <remarks>
        /// Display the health of the Application and show the last time the Application was used.  You can also find this information in the Campaign Manager. In your Application, click **Settings** &gt; **Integration API Keys**. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApplicationApiHealth</returns>
        ApplicationApiHealth GetApplicationApiHealth (long applicationId);

        /// <summary>
        /// Get Application health
        /// </summary>
        /// <remarks>
        /// Display the health of the Application and show the last time the Application was used.  You can also find this information in the Campaign Manager. In your Application, click **Settings** &gt; **Integration API Keys**. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of ApplicationApiHealth</returns>
        ApiResponse<ApplicationApiHealth> GetApplicationApiHealthWithHttpInfo (long applicationId);
        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApplicationCustomer</returns>
        ApplicationCustomer GetApplicationCustomer (long applicationId, long customerId);

        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApiResponse of ApplicationCustomer</returns>
        ApiResponse<ApplicationCustomer> GetApplicationCustomerWithHttpInfo (long applicationId, long customerId);
        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 GetApplicationCustomerFriends (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> GetApplicationCustomerFriendsWithHttpInfo (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GetApplicationCustomers (long applicationId, string integrationId = default(string), long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GetApplicationCustomersWithHttpInfo (long applicationId, string integrationId = default(string), long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GetApplicationCustomersByAttributes (long applicationId, CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GetApplicationCustomersByAttributesWithHttpInfo (long applicationId, CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#tag/Events/operation/trackEventV2) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 GetApplicationEventTypes (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#tag/Events/operation/trackEventV2) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> GetApplicationEventTypesWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>InlineResponse20030</returns>
        InlineResponse20030 GetApplicationEventsWithoutTotalCount (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));

        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        ApiResponse<InlineResponse20030> GetApplicationEventsWithoutTotalCountWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));
        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>ApplicationSession</returns>
        ApplicationSession GetApplicationSession (long applicationId, long sessionId);

        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>ApiResponse of ApplicationSession</returns>
        ApiResponse<ApplicationSession> GetApplicationSessionWithHttpInfo (long applicationId, long sessionId);
        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integration ID. Must be exact match. (optional)</param>
        /// <param name="storeIntegrationId">The integration ID of the store. You choose this ID when you create a store. (optional)</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 GetApplicationSessions (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string), string storeIntegrationId = default(string));

        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integration ID. Must be exact match. (optional)</param>
        /// <param name="storeIntegrationId">The integration ID of the store. You choose this ID when you create a store. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> GetApplicationSessionsWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string), string storeIntegrationId = default(string));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all applications in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetApplications (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all applications in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetApplicationsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get custom attribute
        /// </summary>
        /// <remarks>
        /// Retrieve the specified custom attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Attribute</returns>
        Attribute GetAttribute (long attributeId);

        /// <summary>
        /// Get custom attribute
        /// </summary>
        /// <remarks>
        /// Retrieve the specified custom attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> GetAttributeWithHttpInfo (long attributeId);
        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Return all the custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 GetAttributes (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string entity = default(string));

        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Return all the custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> GetAttributesWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string entity = default(string));
        /// <summary>
        /// List audience members
        /// </summary>
        /// <remarks>
        /// Get a paginated list of the customer profiles in a given audience.  A maximum of 1000 customer profiles per page is allowed. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profileQuery">The filter to select a profile. (optional)</param>
        /// <returns>InlineResponse20034</returns>
        InlineResponse20034 GetAudienceMemberships (long audienceId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profileQuery = default(string));

        /// <summary>
        /// List audience members
        /// </summary>
        /// <remarks>
        /// Get a paginated list of the customer profiles in a given audience.  A maximum of 1000 customer profiles per page is allowed. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profileQuery">The filter to select a profile. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        ApiResponse<InlineResponse20034> GetAudienceMembershipsWithHttpInfo (long audienceId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profileQuery = default(string));
        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 GetAudiences (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> GetAudiencesWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List audience analytics
        /// </summary>
        /// <remarks>
        /// Get a list of audience IDs and their member count. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceIds">The IDs of one or more audiences, separated by commas, by which to filter results.</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 GetAudiencesAnalytics (string audienceIds, string sort = default(string));

        /// <summary>
        /// List audience analytics
        /// </summary>
        /// <remarks>
        /// Get a list of audience IDs and their member count. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceIds">The IDs of one or more audiences, separated by commas, by which to filter results.</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> GetAudiencesAnalyticsWithHttpInfo (string audienceIds, string sort = default(string));
        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Campaign</returns>
        Campaign GetCampaign (long applicationId, long campaignId);

        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> GetCampaignWithHttpInfo (long applicationId, long campaignId);
        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 GetCampaignAnalytics (long applicationId, long campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));

        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> GetCampaignAnalyticsWithHttpInfo (long applicationId, long campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));
        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetCampaignByAttributes (long applicationId, CampaignSearch body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string));

        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetCampaignByAttributesWithHttpInfo (long applicationId, CampaignSearch body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string));
        /// <summary>
        /// Get campaign access group
        /// </summary>
        /// <remarks>
        /// Get a campaign access group specified by its ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignGroupId">The ID of the campaign access group.</param>
        /// <returns>CampaignGroup</returns>
        CampaignGroup GetCampaignGroup (long campaignGroupId);

        /// <summary>
        /// Get campaign access group
        /// </summary>
        /// <remarks>
        /// Get a campaign access group specified by its ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignGroupId">The ID of the campaign access group.</param>
        /// <returns>ApiResponse of CampaignGroup</returns>
        ApiResponse<CampaignGroup> GetCampaignGroupWithHttpInfo (long campaignGroupId);
        /// <summary>
        /// List campaign access groups
        /// </summary>
        /// <remarks>
        /// List the campaign access groups in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetCampaignGroups (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List campaign access groups
        /// </summary>
        /// <remarks>
        /// List the campaign access groups in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetCampaignGroupsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// List campaign templates
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaign templates.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 GetCampaignTemplates (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), long? userId = default(long?));

        /// <summary>
        /// List campaign templates
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaign templates.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> GetCampaignTemplatesWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), long? userId = default(long?));
        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List the campaigns of the specified application that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign access group ID. (optional)</param>
        /// <param name="templateId">The ID of the campaign template this campaign was created from. (optional)</param>
        /// <param name="storeId">Filter results to campaigns linked to the specified store ID. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetCampaigns (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), long? campaignGroupId = default(long?), long? templateId = default(long?), long? storeId = default(long?));

        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List the campaigns of the specified application that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign access group ID. (optional)</param>
        /// <param name="templateId">The ID of the campaign template this campaign was created from. (optional)</param>
        /// <param name="storeId">Filter results to campaigns linked to the specified store ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetCampaignsWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), long? campaignGroupId = default(long?), long? templateId = default(long?), long? storeId = default(long?));
        /// <summary>
        /// Get audit logs for an account
        /// </summary>
        /// <remarks>
        /// Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>InlineResponse20044</returns>
        InlineResponse20044 GetChanges (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), long? userId = default(long?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), long? managementKeyId = default(long?), bool? includeOld = default(bool?));

        /// <summary>
        /// Get audit logs for an account
        /// </summary>
        /// <remarks>
        /// Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        ApiResponse<InlineResponse20044> GetChangesWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), long? userId = default(long?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), long? managementKeyId = default(long?), bool? includeOld = default(bool?));
        /// <summary>
        /// Get campaign-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Collection</returns>
        Collection GetCollection (long applicationId, long campaignId, long collectionId);

        /// <summary>
        /// Get campaign-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> GetCollectionWithHttpInfo (long applicationId, long campaignId, long collectionId);
        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Retrieve items from a given collection.  You can retrieve items from both account-level collections and campaign-level collections using this endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GetCollectionItems (long collectionId, long? pageSize = default(long?), long? skip = default(long?));

        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Retrieve items from a given collection.  You can retrieve items from both account-level collections and campaign-level collections using this endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GetCollectionItemsWithHttpInfo (long collectionId, long? pageSize = default(long?), long? skip = default(long?));
        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="redeemed">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetCouponsWithoutTotalCount (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string redeemed = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), DateTime? expiresBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? startsAfter = default(DateTime?), bool? valuesOnly = default(bool?));

        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="redeemed">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetCouponsWithoutTotalCountWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string redeemed = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), DateTime? expiresBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? startsAfter = default(DateTime?), bool? valuesOnly = default(bool?));
        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>CustomerActivityReport</returns>
        CustomerActivityReport GetCustomerActivityReport (DateTime rangeStart, DateTime rangeEnd, long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?));

        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of CustomerActivityReport</returns>
        ApiResponse<CustomerActivityReport> GetCustomerActivityReportWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?));
        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name. (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaign name. (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name. (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 GetCustomerActivityReportsWithoutTotalCount (DateTime rangeStart, DateTime rangeEnd, long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));

        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name. (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaign name. (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> GetCustomerActivityReportsWithoutTotalCountWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));
        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>CustomerAnalytics</returns>
        CustomerAnalytics GetCustomerAnalytics (long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of CustomerAnalytics</returns>
        ApiResponse<CustomerAnalytics> GetCustomerAnalyticsWithHttpInfo (long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>CustomerProfile</returns>
        CustomerProfile GetCustomerProfile (long customerId);

        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApiResponse of CustomerProfile</returns>
        ApiResponse<CustomerProfile> GetCustomerProfileWithHttpInfo (long customerId);
        /// <summary>
        /// List customer achievements
        /// </summary>
        /// <remarks>
        /// For the given customer profile, list all the achievements that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint. (optional)</param>
        /// <param name="title">Filter results by the &#x60;title&#x60; of an achievement. (optional)</param>
        /// <returns>InlineResponse20051</returns>
        InlineResponse20051 GetCustomerProfileAchievementProgress (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), long? achievementId = default(long?), string title = default(string));

        /// <summary>
        /// List customer achievements
        /// </summary>
        /// <remarks>
        /// For the given customer profile, list all the achievements that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint. (optional)</param>
        /// <param name="title">Filter results by the &#x60;title&#x60; of an achievement. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        ApiResponse<InlineResponse20051> GetCustomerProfileAchievementProgressWithHttpInfo (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), long? achievementId = default(long?), string title = default(string));
        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GetCustomerProfiles (long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?));

        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GetCustomerProfilesWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?));
        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GetCustomersByAttributes (CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?));

        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GetCustomersByAttributesWithHttpInfo (CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?));
        /// <summary>
        /// Get statistics for loyalty dashboard
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics displayed on the specified loyalty program&#39;s dashboard, such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 GetDashboardStatistics (long loyaltyProgramId, DateTime rangeStart, DateTime rangeEnd, string subledgerId = default(string));

        /// <summary>
        /// Get statistics for loyalty dashboard
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics displayed on the specified loyalty program&#39;s dashboard, such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> GetDashboardStatisticsWithHttpInfo (long loyaltyProgramId, DateTime rangeStart, DateTime rangeEnd, string subledgerId = default(string));
        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20042</returns>
        InlineResponse20042 GetEventTypes (string name = default(string), bool? includeOldVersions = default(bool?), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        ApiResponse<InlineResponse20042> GetEventTypesWithHttpInfo (string name = default(string), bool? includeOldVersions = default(bool?), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>InlineResponse20045</returns>
        InlineResponse20045 GetExports (long? pageSize = default(long?), long? skip = default(long?), decimal? applicationId = default(decimal?), long? campaignId = default(long?), string entity = default(string));

        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        ApiResponse<InlineResponse20045> GetExportsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), decimal? applicationId = default(decimal?), long? campaignId = default(long?), string entity = default(string));
        /// <summary>
        /// Get loyalty card
        /// </summary>
        /// <remarks>
        /// Get the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>LoyaltyCard</returns>
        LoyaltyCard GetLoyaltyCard (long loyaltyProgramId, string loyaltyCardId);

        /// <summary>
        /// Get loyalty card
        /// </summary>
        /// <remarks>
        /// Get the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyCard</returns>
        ApiResponse<LoyaltyCard> GetLoyaltyCardWithHttpInfo (long loyaltyProgramId, string loyaltyCardId);
        /// <summary>
        /// List card&#39;s transactions
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/card-based/card-based-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 GetLoyaltyCardTransactionLogs (long loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?), string subledgerId = default(string));

        /// <summary>
        /// List card&#39;s transactions
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/card-based/card-based-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> GetLoyaltyCardTransactionLogsWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?), string subledgerId = default(string));
        /// <summary>
        /// List loyalty cards
        /// </summary>
        /// <remarks>
        /// For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="identifier">The card code by which to filter loyalty cards in the response. (optional)</param>
        /// <param name="profileId">Filter results by customer profile ID. (optional)</param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 GetLoyaltyCards (long loyaltyProgramId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string identifier = default(string), long? profileId = default(long?), string batchId = default(string));

        /// <summary>
        /// List loyalty cards
        /// </summary>
        /// <remarks>
        /// For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="identifier">The card code by which to filter loyalty cards in the response. (optional)</param>
        /// <param name="profileId">Filter results by customer profile ID. (optional)</param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> GetLoyaltyCardsWithHttpInfo (long loyaltyProgramId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string identifier = default(string), long? profileId = default(long?), string batchId = default(string));
        /// <summary>
        /// Get customer&#39;s full loyalty ledger
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <returns>LoyaltyLedger</returns>
        LoyaltyLedger GetLoyaltyPoints (string loyaltyProgramId, string integrationId);

        /// <summary>
        /// Get customer&#39;s full loyalty ledger
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <returns>ApiResponse of LoyaltyLedger</returns>
        ApiResponse<LoyaltyLedger> GetLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId);
        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>LoyaltyProgram</returns>
        LoyaltyProgram GetLoyaltyProgram (long loyaltyProgramId);

        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        ApiResponse<LoyaltyProgram> GetLoyaltyProgramWithHttpInfo (long loyaltyProgramId);
        /// <summary>
        /// List loyalty program transactions
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. **Note:** If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GetLoyaltyProgramTransactions (long loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?));

        /// <summary>
        /// List loyalty program transactions
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. **Note:** If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GetLoyaltyProgramTransactionsWithHttpInfo (long loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?));
        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GetLoyaltyPrograms ();

        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GetLoyaltyProgramsWithHttpInfo ();
        /// <summary>
        /// Get loyalty program statistics
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To retrieve statistics for a loyalty program, use the [Get statistics for loyalty dashboard](/management-api#tag/Loyalty/operation/getDashboardStatistics) endpoint.  Retrieve the statistics of the specified loyalty program, such as the total active points, pending points, spent points, and expired points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>LoyaltyDashboardData</returns>
        LoyaltyDashboardData GetLoyaltyStatistics (long loyaltyProgramId);

        /// <summary>
        /// Get loyalty program statistics
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To retrieve statistics for a loyalty program, use the [Get statistics for loyalty dashboard](/management-api#tag/Loyalty/operation/getDashboardStatistics) endpoint.  Retrieve the statistics of the specified loyalty program, such as the total active points, pending points, spent points, and expired points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyDashboardData</returns>
        ApiResponse<LoyaltyDashboardData> GetLoyaltyStatisticsWithHttpInfo (long loyaltyProgramId);
        /// <summary>
        /// List message log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all message log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The entity type the log is related to. </param>
        /// <param name="messageID">Filter results by message ID. (optional)</param>
        /// <param name="changeType">Filter results by change type. (optional)</param>
        /// <param name="notificationIDs">Filter results by notification ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="cursor">A specific unique value in the database. If this value is not given, the server fetches results starting with the first record.  (optional)</param>
        /// <param name="period">Filter results by time period. Choose between the available relative time frames.  (optional)</param>
        /// <param name="isSuccessful">Indicates whether to return log entries with either successful or unsuccessful HTTP response codes. When set to&#x60;true&#x60;, only log entries with &#x60;2xx&#x60; response codes are returned. When set to &#x60;false&#x60;, only log entries with &#x60;4xx&#x60; and &#x60;5xx&#x60; response codes are returned.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. (optional)</param>
        /// <param name="responseCode">Filter results by response status code. (optional)</param>
        /// <param name="webhookIDs">Filter results by webhook ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <returns>MessageLogEntries</returns>
        MessageLogEntries GetMessageLogs (string entityType, string messageID = default(string), string changeType = default(string), string notificationIDs = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), byte[] cursor = default(byte[]), string period = default(string), bool? isSuccessful = default(bool?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), long? loyaltyProgramId = default(long?), long? responseCode = default(long?), string webhookIDs = default(string));

        /// <summary>
        /// List message log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all message log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The entity type the log is related to. </param>
        /// <param name="messageID">Filter results by message ID. (optional)</param>
        /// <param name="changeType">Filter results by change type. (optional)</param>
        /// <param name="notificationIDs">Filter results by notification ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="cursor">A specific unique value in the database. If this value is not given, the server fetches results starting with the first record.  (optional)</param>
        /// <param name="period">Filter results by time period. Choose between the available relative time frames.  (optional)</param>
        /// <param name="isSuccessful">Indicates whether to return log entries with either successful or unsuccessful HTTP response codes. When set to&#x60;true&#x60;, only log entries with &#x60;2xx&#x60; response codes are returned. When set to &#x60;false&#x60;, only log entries with &#x60;4xx&#x60; and &#x60;5xx&#x60; response codes are returned.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. (optional)</param>
        /// <param name="responseCode">Filter results by response status code. (optional)</param>
        /// <param name="webhookIDs">Filter results by webhook ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <returns>ApiResponse of MessageLogEntries</returns>
        ApiResponse<MessageLogEntries> GetMessageLogsWithHttpInfo (string entityType, string messageID = default(string), string changeType = default(string), string notificationIDs = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), byte[] cursor = default(byte[]), string period = default(string), bool? isSuccessful = default(bool?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), long? loyaltyProgramId = default(long?), long? responseCode = default(long?), string webhookIDs = default(string));
        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile ID specified in the referral&#39;s AdvocateProfileIntegrationId field. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetReferralsWithoutTotalCount (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));

        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile ID specified in the referral&#39;s AdvocateProfileIntegrationId field. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetReferralsWithoutTotalCountWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));
        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of a specific role. To see all the roles, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <returns>RoleV2</returns>
        RoleV2 GetRoleV2 (long roleId);

        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of a specific role. To see all the roles, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <returns>ApiResponse of RoleV2</returns>
        ApiResponse<RoleV2> GetRoleV2WithHttpInfo (long roleId);
        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Ruleset</returns>
        Ruleset GetRuleset (long applicationId, long campaignId, long rulesetId);

        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>ApiResponse of Ruleset</returns>
        ApiResponse<Ruleset> GetRulesetWithHttpInfo (long applicationId, long campaignId, long rulesetId);
        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetRulesets (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetRulesetsWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get store
        /// </summary>
        /// <remarks>
        /// Get store details for a specific store ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>Store</returns>
        Store GetStore (long applicationId, string storeId);

        /// <summary>
        /// Get store
        /// </summary>
        /// <remarks>
        /// Get store details for a specific store ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> GetStoreWithHttpInfo (long applicationId, string storeId);
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>User</returns>
        User GetUser (long userId);

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo (long userId);
        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20043</returns>
        InlineResponse20043 GetUsers (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        ApiResponse<InlineResponse20043> GetUsersWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get webhook
        /// </summary>
        /// <remarks>
        /// Returns a webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Webhook</returns>
        Webhook GetWebhook (long webhookId);

        /// <summary>
        /// Get webhook
        /// </summary>
        /// <remarks>
        /// Returns a webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> GetWebhookWithHttpInfo (long webhookId);
        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20040</returns>
        InlineResponse20040 GetWebhookActivationLogs (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        ApiResponse<InlineResponse20040> GetWebhookActivationLogsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        InlineResponse20041 GetWebhookLogs (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        ApiResponse<InlineResponse20041> GetWebhookLogsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Checks if the given catalog or its attributes are referenced in the specified Application ID.  **Note**: If no Application ID is provided, we check for all connected Applications.  (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="creationType">Filter results by creation type. (optional)</param>
        /// <param name="visibility">Filter results by visibility. (optional)</param>
        /// <param name="outgoingIntegrationsTypeId">Filter results by outgoing integration type ID. (optional)</param>
        /// <param name="title">Filter results performing case-insensitive matching against the webhook title. (optional)</param>
        /// <returns>InlineResponse20039</returns>
        InlineResponse20039 GetWebhooks (string applicationIds = default(string), string sort = default(string), long? pageSize = default(long?), long? skip = default(long?), string creationType = default(string), string visibility = default(string), long? outgoingIntegrationsTypeId = default(long?), string title = default(string));

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Checks if the given catalog or its attributes are referenced in the specified Application ID.  **Note**: If no Application ID is provided, we check for all connected Applications.  (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="creationType">Filter results by creation type. (optional)</param>
        /// <param name="visibility">Filter results by visibility. (optional)</param>
        /// <param name="outgoingIntegrationsTypeId">Filter results by outgoing integration type ID. (optional)</param>
        /// <param name="title">Filter results performing case-insensitive matching against the webhook title. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        ApiResponse<InlineResponse20039> GetWebhooksWithHttpInfo (string applicationIds = default(string), string sort = default(string), long? pageSize = default(long?), long? skip = default(long?), string creationType = default(string), string visibility = default(string), long? outgoingIntegrationsTypeId = default(long?), string title = default(string));
        /// <summary>
        /// Import data into existing account-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportAccountCollection (long collectionId, string upFile = default(string));

        /// <summary>
        /// Import data into existing account-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportAccountCollectionWithHttpInfo (long collectionId, string upFile = default(string));
        /// <summary>
        /// Import allowed values for attribute
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportAllowedList (long attributeId, string upFile = default(string));

        /// <summary>
        /// Import allowed values for attribute
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportAllowedListWithHttpInfo (long attributeId, string upFile = default(string));
        /// <summary>
        /// Import audience members
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the integration IDs of the members you want to add to an audience.  The file should be sent as multipart data and should contain only the following column (required): - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile.  The import **replaces** the previous list of audience members.  **Note:** We recommend limiting your file size to 500MB.  Example:  &#x60;&#x60;&#x60;text profileintegrationid charles alexa &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportAudiencesMemberships (long audienceId, string upFile = default(string));

        /// <summary>
        /// Import audience members
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the integration IDs of the members you want to add to an audience.  The file should be sent as multipart data and should contain only the following column (required): - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile.  The import **replaces** the previous list of audience members.  **Note:** We recommend limiting your file size to 500MB.  Example:  &#x60;&#x60;&#x60;text profileintegrationid charles alexa &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportAudiencesMembershipsWithHttpInfo (long audienceId, string upFile = default(string));
        /// <summary>
        /// Import campaign store budgets
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing store budgets for a given campaign.  Send the file as multipart data.  The CSV file **must** only contain the following columns: - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store.  The import **replaces** the previous list of store budgets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportCampaignStoreBudget (long applicationId, long campaignId, string action = default(string), string period = default(string), string upFile = default(string));

        /// <summary>
        /// Import campaign store budgets
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing store budgets for a given campaign.  Send the file as multipart data.  The CSV file **must** only contain the following columns: - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store.  The import **replaces** the previous list of store budgets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportCampaignStoreBudgetWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string), string upFile = default(string));
        /// <summary>
        /// Import stores
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the stores you want to link to a specific campaign.  Send the file as multipart data.  The CSV file **must** only contain the following column: - &#x60;store_integration_id&#x60;: The identifier of the store.  The import **replaces** the previous list of stores linked to the campaign. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportCampaignStores (long applicationId, long campaignId, string upFile = default(string));

        /// <summary>
        /// Import stores
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the stores you want to link to a specific campaign.  Send the file as multipart data.  The CSV file **must** only contain the following column: - &#x60;store_integration_id&#x60;: The identifier of the store.  The import **replaces** the previous list of stores linked to the campaign. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportCampaignStoresWithHttpInfo (long applicationId, long campaignId, string upFile = default(string));
        /// <summary>
        /// Import data into existing campaign-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportCollection (long applicationId, long campaignId, long collectionId, string upFile = default(string));

        /// <summary>
        /// Import data into existing campaign-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportCollectionWithHttpInfo (long applicationId, long campaignId, long collectionId, string upFile = default(string));
        /// <summary>
        /// Import coupons
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A JSON object describing _custom_ coupon attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the coupon entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="skipDuplicates">An indicator of whether to skip duplicate coupon values instead of causing an error. Duplicate values are ignored when &#x60;skipDuplicates&#x3D;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportCoupons (long applicationId, long campaignId, bool? skipDuplicates = default(bool?), string upFile = default(string));

        /// <summary>
        /// Import coupons
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A JSON object describing _custom_ coupon attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the coupon entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="skipDuplicates">An indicator of whether to skip duplicate coupon values instead of causing an error. Duplicate values are ignored when &#x60;skipDuplicates&#x3D;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportCouponsWithHttpInfo (long applicationId, long campaignId, bool? skipDuplicates = default(bool?), string upFile = default(string));
        /// <summary>
        /// Import loyalty cards
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card. The identifiers should be separated with a semicolon (;).  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportLoyaltyCards (long loyaltyProgramId, string upFile = default(string));

        /// <summary>
        /// Import loyalty cards
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card. The identifiers should be separated with a semicolon (;).  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportLoyaltyCardsWithHttpInfo (long loyaltyProgramId, string upFile = default(string));
        /// <summary>
        /// Import customers into loyalty tiers
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing existing customers to be assigned to existing tiers. Send the file as multipart data.  **Important:** This endpoint only works with loyalty programs with advanced tiers (with expiration and downgrade policy) feature enabled.  The CSV file should contain the following columns: - &#x60;subledgerid&#x60; (optional): The ID of the subledger. If this field is empty, the main ledger will be used. - &#x60;customerprofileid&#x60;: The integration ID of the customer profile to whom the tier should be assigned. - &#x60;tiername&#x60;: The name of an existing tier to assign to the customer. - &#x60;expirydate&#x60;: The expiration date of the tier when the tier is reevaluated. It should be a future date.  About customer assignment to a tier: - If the customer isn&#39;t already in a tier, the customer is assigned to the specified tier during the tier import. - If the customer is already in the tier that&#39;s specified in the CSV file, only the expiration date is updated.  **Note:** We recommend not using this endpoint to update the tier of a customer. To update a customer&#39;s tier, you can [add](/management-api#tag/Loyalty/operation/addLoyaltyPoints) or [deduct](/management-api#tag/Loyalty/operation/removeLoyaltyPoints) their loyalty points.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:** &#x60;&#x60;&#x60;csv subledgerid,customerprofileid,tiername,expirydate SUB1,alexa,Gold,2024-03-21T07:32:14Z ,george,Silver,2025-04-16T21:12:37Z SUB2,avocado,Bronze,2026-05-03T11:47:01Z &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportLoyaltyCustomersTiers (long loyaltyProgramId, string upFile = default(string));

        /// <summary>
        /// Import customers into loyalty tiers
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing existing customers to be assigned to existing tiers. Send the file as multipart data.  **Important:** This endpoint only works with loyalty programs with advanced tiers (with expiration and downgrade policy) feature enabled.  The CSV file should contain the following columns: - &#x60;subledgerid&#x60; (optional): The ID of the subledger. If this field is empty, the main ledger will be used. - &#x60;customerprofileid&#x60;: The integration ID of the customer profile to whom the tier should be assigned. - &#x60;tiername&#x60;: The name of an existing tier to assign to the customer. - &#x60;expirydate&#x60;: The expiration date of the tier when the tier is reevaluated. It should be a future date.  About customer assignment to a tier: - If the customer isn&#39;t already in a tier, the customer is assigned to the specified tier during the tier import. - If the customer is already in the tier that&#39;s specified in the CSV file, only the expiration date is updated.  **Note:** We recommend not using this endpoint to update the tier of a customer. To update a customer&#39;s tier, you can [add](/management-api#tag/Loyalty/operation/addLoyaltyPoints) or [deduct](/management-api#tag/Loyalty/operation/removeLoyaltyPoints) their loyalty points.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:** &#x60;&#x60;&#x60;csv subledgerid,customerprofileid,tiername,expirydate SUB1,alexa,Gold,2024-03-21T07:32:14Z ,george,Silver,2025-04-16T21:12:37Z SUB2,avocado,Bronze,2026-05-03T11:47:01Z &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportLoyaltyCustomersTiersWithHttpInfo (long loyaltyProgramId, string upFile = default(string));
        /// <summary>
        /// Import loyalty points
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the type of loyalty program, you can import points into a given customer profile or loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported.    **Note**: If the customer profile does not exist, it will be created. The profile will not be visible in any Application   until a session or profile update is received for that profile. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60; (optional): The earliest date when the points can be redeemed. The points are &#x60;active&#x60; from this date until the expiration date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;immediate&#x60;. Empty or missing values are considered &#x60;immediate&#x60;. - &#x60;expirydate&#x60; (optional): The latest date when the points can be redeemed. The points are &#x60;expired&#x60; after this date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;unlimited&#x60;. Empty or missing values are considered &#x60;unlimited&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="notificationsEnabled">Indicates whether the points import triggers notifications about its effects. For example, a notification is sent if the import upgrades a customer&#39;s tier or offsets their negative points balance.  This parameter is optional and defaults to &#x60;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportLoyaltyPoints (long loyaltyProgramId, bool? notificationsEnabled = default(bool?), string upFile = default(string));

        /// <summary>
        /// Import loyalty points
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the type of loyalty program, you can import points into a given customer profile or loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported.    **Note**: If the customer profile does not exist, it will be created. The profile will not be visible in any Application   until a session or profile update is received for that profile. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60; (optional): The earliest date when the points can be redeemed. The points are &#x60;active&#x60; from this date until the expiration date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;immediate&#x60;. Empty or missing values are considered &#x60;immediate&#x60;. - &#x60;expirydate&#x60; (optional): The latest date when the points can be redeemed. The points are &#x60;expired&#x60; after this date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;unlimited&#x60;. Empty or missing values are considered &#x60;unlimited&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="notificationsEnabled">Indicates whether the points import triggers notifications about its effects. For example, a notification is sent if the import upgrades a customer&#39;s tier or offsets their negative points balance.  This parameter is optional and defaults to &#x60;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportLoyaltyPointsWithHttpInfo (long loyaltyProgramId, bool? notificationsEnabled = default(bool?), string upFile = default(string));
        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): The code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  The start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: The last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A JSON object describing _custom_ giveaway attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated with the giveaway entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;provider\&quot;: \&quot;myPartnerCompany\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone setting of your choice. The values are converted to UTC internally by Talon.One.  **Note:**  - We recommend limiting your file size to 500MB. - You can import the same code multiple times. Duplicate codes are treated and distributed to customers as unique codes.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportPoolGiveaways (long poolId, string upFile = default(string));

        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): The code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  The start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: The last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A JSON object describing _custom_ giveaway attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated with the giveaway entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;provider\&quot;: \&quot;myPartnerCompany\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone setting of your choice. The values are converted to UTC internally by Talon.One.  **Note:**  - We recommend limiting your file size to 500MB. - You can import the same code multiple times. Duplicate codes are treated and distributed to customers as unique codes.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportPoolGiveawaysWithHttpInfo (long poolId, string upFile = default(string));
        /// <summary>
        /// Import referrals
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A JSON object describing _custom_ referral attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the referral entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Important:** When you import a CSV file with referrals, a [customer profile](https://docs.talon.one/docs/dev/concepts/entities/customer-profiles) is **not** automatically created for each &#x60;advocateprofileintegrationid&#x60; column value. Use the [Update customer profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint or the [Update multiple customer profiles](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfilesV2) endpoint to create the customer profiles.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportReferrals (long applicationId, long campaignId, string upFile = default(string));

        /// <summary>
        /// Import referrals
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A JSON object describing _custom_ referral attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the referral entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Important:** When you import a CSV file with referrals, a [customer profile](https://docs.talon.one/docs/dev/concepts/entities/customer-profiles) is **not** automatically created for each &#x60;advocateprofileintegrationid&#x60; column value. Use the [Update customer profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint or the [Update multiple customer profiles](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfilesV2) endpoint to create the customer profiles.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportReferralsWithHttpInfo (long applicationId, long campaignId, string upFile = default(string));
        /// <summary>
        /// Invite user from identity provider
        /// </summary>
        /// <remarks>
        /// [Invite a user](https://docs.talon.one/docs/product/account/account-settings/managing-users#inviting-a-user) from an external identity provider to Talon.One by sending an invitation to their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns></returns>
        void InviteUserExternal (NewExternalInvitation body);

        /// <summary>
        /// Invite user from identity provider
        /// </summary>
        /// <remarks>
        /// [Invite a user](https://docs.talon.one/docs/product/account/account-settings/managing-users#inviting-a-user) from an external identity provider to Talon.One by sending an invitation to their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteUserExternalWithHttpInfo (NewExternalInvitation body);
        /// <summary>
        /// List collections in account
        /// </summary>
        /// <remarks>
        /// List account-level collections in the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 ListAccountCollections (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections in account
        /// </summary>
        /// <remarks>
        /// List account-level collections in the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> ListAccountCollectionsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// List achievements
        /// </summary>
        /// <remarks>
        /// List all the achievements for a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="title">Filter by the display name for the achievement in the campaign manager.  **Note**: If no &#x60;title&#x60; is provided, all the achievements from the campaign are returned.  (optional)</param>
        /// <returns>InlineResponse20050</returns>
        InlineResponse20050 ListAchievements (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string title = default(string));

        /// <summary>
        /// List achievements
        /// </summary>
        /// <remarks>
        /// List all the achievements for a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="title">Filter by the display name for the achievement in the campaign manager.  **Note**: If no &#x60;title&#x60; is provided, all the achievements from the campaign are returned.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        ApiResponse<InlineResponse20050> ListAchievementsWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string title = default(string));
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20046</returns>
        InlineResponse20046 ListAllRolesV2 ();

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        ApiResponse<InlineResponse20046> ListAllRolesV2WithHttpInfo ();
        /// <summary>
        /// List campaign store budget limits
        /// </summary>
        /// <remarks>
        /// Return the store budget limits for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>InlineResponse20048</returns>
        InlineResponse20048 ListCampaignStoreBudgetLimits (long applicationId, long campaignId, string action = default(string), string period = default(string));

        /// <summary>
        /// List campaign store budget limits
        /// </summary>
        /// <remarks>
        /// Return the store budget limits for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        ApiResponse<InlineResponse20048> ListCampaignStoreBudgetLimitsWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string));
        /// <summary>
        /// List items in a catalog
        /// </summary>
        /// <remarks>
        /// Return a paginated list of cart items in the given catalog. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogId">The ID of the catalog. You can find the ID in the Campaign Manager in **Account** &gt; **Tools** &gt; **Cart item catalogs**.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="sku">Filter results by one or more SKUs. Must be exact match. (optional)</param>
        /// <param name="productNames">Filter results by one or more product names. Must be exact match. (optional)</param>
        /// <returns>InlineResponse20037</returns>
        InlineResponse20037 ListCatalogItems (long catalogId, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?), List<string> sku = default(List<string>), List<string> productNames = default(List<string>));

        /// <summary>
        /// List items in a catalog
        /// </summary>
        /// <remarks>
        /// Return a paginated list of cart items in the given catalog. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogId">The ID of the catalog. You can find the ID in the Campaign Manager in **Account** &gt; **Tools** &gt; **Cart item catalogs**.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="sku">Filter results by one or more SKUs. Must be exact match. (optional)</param>
        /// <param name="productNames">Filter results by one or more product names. Must be exact match. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        ApiResponse<InlineResponse20037> ListCatalogItemsWithHttpInfo (long catalogId, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?), List<string> sku = default(List<string>), List<string> productNames = default(List<string>));
        /// <summary>
        /// List collections in campaign
        /// </summary>
        /// <remarks>
        /// List collections in a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 ListCollections (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections in campaign
        /// </summary>
        /// <remarks>
        /// List collections in a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> ListCollectionsWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// List collections in Application
        /// </summary>
        /// <remarks>
        /// List campaign-level collections from all campaigns in a given Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 ListCollectionsInApplication (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections in Application
        /// </summary>
        /// <remarks>
        /// List campaign-level collections from all campaigns in a given Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> ListCollectionsInApplicationWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// List stores
        /// </summary>
        /// <remarks>
        /// List all stores for a specific Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="name">The name of the store. (optional)</param>
        /// <param name="integrationId">The integration ID of the store. (optional)</param>
        /// <param name="query">Filter results by &#x60;name&#x60; or &#x60;integrationId&#x60;. (optional)</param>
        /// <returns>InlineResponse20047</returns>
        InlineResponse20047 ListStores (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), decimal? campaignId = default(decimal?), string name = default(string), string integrationId = default(string), string query = default(string));

        /// <summary>
        /// List stores
        /// </summary>
        /// <remarks>
        /// List all stores for a specific Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="name">The name of the store. (optional)</param>
        /// <param name="integrationId">The integration ID of the store. (optional)</param>
        /// <param name="query">Filter results by &#x60;name&#x60; or &#x60;integrationId&#x60;. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        ApiResponse<InlineResponse20047> ListStoresWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), decimal? campaignId = default(decimal?), string name = default(string), string integrationId = default(string), string query = default(string));
        /// <summary>
        /// Validate Okta API ownership
        /// </summary>
        /// <remarks>
        /// Validate the ownership of the API through a challenge-response mechanism.  This challenger endpoint is used by Okta to confirm that communication between Talon.One and Okta is correctly configured and accessible for provisioning and deprovisioning of Talon.One users, and that only Talon.One can receive and respond to events from Okta. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void OktaEventHandlerChallenge ();

        /// <summary>
        /// Validate Okta API ownership
        /// </summary>
        /// <remarks>
        /// Validate the ownership of the API through a challenge-response mechanism.  This challenger endpoint is used by Okta to confirm that communication between Talon.One and Okta is correctly configured and accessible for provisioning and deprovisioning of Talon.One users, and that only Talon.One can receive and respond to events from Okta. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OktaEventHandlerChallengeWithHttpInfo ();
        /// <summary>
        /// Deduct points from customer profile
        /// </summary>
        /// <remarks>
        /// Deduct points from the specified loyalty program and specified customer profile.  **Important:** - Only active points can be deducted. - Only pending points are rolled back when a session is cancelled or reopened.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void RemoveLoyaltyPoints (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body);

        /// <summary>
        /// Deduct points from customer profile
        /// </summary>
        /// <remarks>
        /// Deduct points from the specified loyalty program and specified customer profile.  **Important:** - Only active points can be deducted. - Only pending points are rolled back when a session is cancelled or reopened.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body);
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>NewPassword</returns>
        NewPassword ResetPassword (NewPassword body);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NewPassword</returns>
        ApiResponse<NewPassword> ResetPasswordWithHttpInfo (NewPassword body);
        /// <summary>
        /// Create SCIM group
        /// </summary>
        /// <remarks>
        /// Create a new Talon.One group using the SCIM Group provisioning protocol with an identity provider, for example, Microsoft Entra ID, and assign members from the payload to the new group. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ScimGroup</returns>
        ScimGroup ScimCreateGroup (ScimBaseGroup body);

        /// <summary>
        /// Create SCIM group
        /// </summary>
        /// <remarks>
        /// Create a new Talon.One group using the SCIM Group provisioning protocol with an identity provider, for example, Microsoft Entra ID, and assign members from the payload to the new group. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> ScimCreateGroupWithHttpInfo (ScimBaseGroup body);
        /// <summary>
        /// Create SCIM user
        /// </summary>
        /// <remarks>
        /// Create a new Talon.One user using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ScimUser</returns>
        ScimUser ScimCreateUser (ScimNewUser body);

        /// <summary>
        /// Create SCIM user
        /// </summary>
        /// <remarks>
        /// Create a new Talon.One user using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimUser</returns>
        ApiResponse<ScimUser> ScimCreateUserWithHttpInfo (ScimNewUser body);
        /// <summary>
        /// Delete SCIM group
        /// </summary>
        /// <remarks>
        /// Delete a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns></returns>
        void ScimDeleteGroup (long groupId);

        /// <summary>
        /// Delete SCIM group
        /// </summary>
        /// <remarks>
        /// Delete a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScimDeleteGroupWithHttpInfo (long groupId);
        /// <summary>
        /// Delete SCIM user
        /// </summary>
        /// <remarks>
        /// Delete a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        void ScimDeleteUser (long userId);

        /// <summary>
        /// Delete SCIM user
        /// </summary>
        /// <remarks>
        /// Delete a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScimDeleteUserWithHttpInfo (long userId);
        /// <summary>
        /// Get SCIM group
        /// </summary>
        /// <remarks>
        /// Retrieve data for a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>ScimGroup</returns>
        ScimGroup ScimGetGroup (long groupId);

        /// <summary>
        /// Get SCIM group
        /// </summary>
        /// <remarks>
        /// Retrieve data for a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> ScimGetGroupWithHttpInfo (long groupId);
        /// <summary>
        /// List SCIM groups
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of groups created using the SCIM protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScimGroupsListResponse</returns>
        ScimGroupsListResponse ScimGetGroups ();

        /// <summary>
        /// List SCIM groups
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of groups created using the SCIM protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScimGroupsListResponse</returns>
        ApiResponse<ScimGroupsListResponse> ScimGetGroupsWithHttpInfo ();
        /// <summary>
        /// List supported SCIM resource types
        /// </summary>
        /// <remarks>
        /// Retrieve a list of resource types supported by the SCIM provisioning protocol.  Resource types define the various kinds of resources that can be managed via the SCIM API, such as users, groups, or custom-defined resources. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScimResourceTypesListResponse</returns>
        ScimResourceTypesListResponse ScimGetResourceTypes ();

        /// <summary>
        /// List supported SCIM resource types
        /// </summary>
        /// <remarks>
        /// Retrieve a list of resource types supported by the SCIM provisioning protocol.  Resource types define the various kinds of resources that can be managed via the SCIM API, such as users, groups, or custom-defined resources. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScimResourceTypesListResponse</returns>
        ApiResponse<ScimResourceTypesListResponse> ScimGetResourceTypesWithHttpInfo ();
        /// <summary>
        /// List supported SCIM schemas
        /// </summary>
        /// <remarks>
        /// Retrieve a list of schemas supported by the SCIM provisioning protocol.  Schemas define the structure and attributes of the different resources that can be managed via the SCIM API, such as users, groups, and any custom-defined resources. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScimSchemasListResponse</returns>
        ScimSchemasListResponse ScimGetSchemas ();

        /// <summary>
        /// List supported SCIM schemas
        /// </summary>
        /// <remarks>
        /// Retrieve a list of schemas supported by the SCIM provisioning protocol.  Schemas define the structure and attributes of the different resources that can be managed via the SCIM API, such as users, groups, and any custom-defined resources. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScimSchemasListResponse</returns>
        ApiResponse<ScimSchemasListResponse> ScimGetSchemasWithHttpInfo ();
        /// <summary>
        /// Get SCIM service provider configuration
        /// </summary>
        /// <remarks>
        /// Retrieve the configuration settings of the SCIM service provider. It provides details about the features and capabilities supported by the SCIM API, such as the different operation settings. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScimServiceProviderConfigResponse</returns>
        ScimServiceProviderConfigResponse ScimGetServiceProviderConfig ();

        /// <summary>
        /// Get SCIM service provider configuration
        /// </summary>
        /// <remarks>
        /// Retrieve the configuration settings of the SCIM service provider. It provides details about the features and capabilities supported by the SCIM API, such as the different operation settings. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScimServiceProviderConfigResponse</returns>
        ApiResponse<ScimServiceProviderConfigResponse> ScimGetServiceProviderConfigWithHttpInfo ();
        /// <summary>
        /// Get SCIM user
        /// </summary>
        /// <remarks>
        /// Retrieve data for a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ScimUser</returns>
        ScimUser ScimGetUser (long userId);

        /// <summary>
        /// Get SCIM user
        /// </summary>
        /// <remarks>
        /// Retrieve data for a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of ScimUser</returns>
        ApiResponse<ScimUser> ScimGetUserWithHttpInfo (long userId);
        /// <summary>
        /// List SCIM users
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of users that have been provisioned using the SCIM protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScimUsersListResponse</returns>
        ScimUsersListResponse ScimGetUsers ();

        /// <summary>
        /// List SCIM users
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of users that have been provisioned using the SCIM protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScimUsersListResponse</returns>
        ApiResponse<ScimUsersListResponse> ScimGetUsersWithHttpInfo ();
        /// <summary>
        /// Update SCIM group attributes
        /// </summary>
        /// <remarks>
        /// Update certain attributes of a group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint allows for selective adding, removing, or replacing of specific group attributes while other attributes remain unchanged. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>ScimGroup</returns>
        ScimGroup ScimPatchGroup (long groupId, ScimPatchRequest body);

        /// <summary>
        /// Update SCIM group attributes
        /// </summary>
        /// <remarks>
        /// Update certain attributes of a group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint allows for selective adding, removing, or replacing of specific group attributes while other attributes remain unchanged. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> ScimPatchGroupWithHttpInfo (long groupId, ScimPatchRequest body);
        /// <summary>
        /// Update SCIM user attributes
        /// </summary>
        /// <remarks>
        /// Update certain attributes of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint allows for selective adding, removing, or replacing specific attributes while leaving other attributes unchanged. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>ScimUser</returns>
        ScimUser ScimPatchUser (long userId, ScimPatchRequest body);

        /// <summary>
        /// Update SCIM user attributes
        /// </summary>
        /// <remarks>
        /// Update certain attributes of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint allows for selective adding, removing, or replacing specific attributes while leaving other attributes unchanged. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimUser</returns>
        ApiResponse<ScimUser> ScimPatchUserWithHttpInfo (long userId, ScimPatchRequest body);
        /// <summary>
        /// Update SCIM group
        /// </summary>
        /// <remarks>
        /// Update the details of a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint replaces all attributes of the given group with the attributes provided in the request payload. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>ScimGroup</returns>
        ScimGroup ScimReplaceGroupAttributes (long groupId, ScimBaseGroup body);

        /// <summary>
        /// Update SCIM group
        /// </summary>
        /// <remarks>
        /// Update the details of a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint replaces all attributes of the given group with the attributes provided in the request payload. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> ScimReplaceGroupAttributesWithHttpInfo (long groupId, ScimBaseGroup body);
        /// <summary>
        /// Update SCIM user
        /// </summary>
        /// <remarks>
        /// Update the details of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint replaces all attributes of the specific user with the attributes provided in the request payload. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>ScimUser</returns>
        ScimUser ScimReplaceUserAttributes (long userId, ScimNewUser body);

        /// <summary>
        /// Update SCIM user
        /// </summary>
        /// <remarks>
        /// Update the details of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint replaces all attributes of the specific user with the attributes provided in the request payload. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimUser</returns>
        ApiResponse<ScimUser> ScimReplaceUserAttributesWithHttpInfo (long userId, ScimNewUser body);
        /// <summary>
        /// List coupons that match the given attributes (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in all the campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 SearchCouponsAdvancedApplicationWideWithoutTotalCount (long applicationId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in all the campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo (long applicationId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 SearchCouponsAdvancedWithoutTotalCount (long applicationId, long campaignId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> SearchCouponsAdvancedWithoutTotalCountWithHttpInfo (long applicationId, long campaignId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// Get summary of campaign store budgets
        /// </summary>
        /// <remarks>
        /// Fetch a summary of all store budget information for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>InlineResponse20049</returns>
        InlineResponse20049 SummarizeCampaignStoreBudget (long applicationId, long campaignId);

        /// <summary>
        /// Get summary of campaign store budgets
        /// </summary>
        /// <remarks>
        /// Fetch a summary of all store budget information for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        ApiResponse<InlineResponse20049> SummarizeCampaignStoreBudgetWithHttpInfo (long applicationId, long campaignId);
        /// <summary>
        /// Transfer card data
        /// </summary>
        /// <remarks>
        /// Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void TransferLoyaltyCard (long loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body);

        /// <summary>
        /// Transfer card data
        /// </summary>
        /// <remarks>
        /// Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TransferLoyaltyCardWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body);
        /// <summary>
        /// Update account-level collection
        /// </summary>
        /// <remarks>
        /// Edit the description of a given account-level collection and enable or disable the collection in the specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        Collection UpdateAccountCollection (long collectionId, UpdateCollection body);

        /// <summary>
        /// Update account-level collection
        /// </summary>
        /// <remarks>
        /// Edit the description of a given account-level collection and enable or disable the collection in the specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> UpdateAccountCollectionWithHttpInfo (long collectionId, UpdateCollection body);
        /// <summary>
        /// Update achievement
        /// </summary>
        /// <remarks>
        /// Update the details of a specific achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Achievement</returns>
        Achievement UpdateAchievement (long applicationId, long campaignId, long achievementId, UpdateAchievement body);

        /// <summary>
        /// Update achievement
        /// </summary>
        /// <remarks>
        /// Update the details of a specific achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Achievement</returns>
        ApiResponse<Achievement> UpdateAchievementWithHttpInfo (long applicationId, long campaignId, long achievementId, UpdateAchievement body);
        /// <summary>
        /// Update additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that cannot be changed is the &#x60;name&#x60; property (or **API name** in the Campaign Manager). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost UpdateAdditionalCost (long additionalCostId, NewAdditionalCost body);

        /// <summary>
        /// Update additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that cannot be changed is the &#x60;name&#x60; property (or **API name** in the Campaign Manager). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> UpdateAdditionalCostWithHttpInfo (long additionalCostId, NewAdditionalCost body);
        /// <summary>
        /// Update custom attribute
        /// </summary>
        /// <remarks>
        /// Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Attribute</returns>
        Attribute UpdateAttribute (long attributeId, NewAttribute body);

        /// <summary>
        /// Update custom attribute
        /// </summary>
        /// <remarks>
        /// Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> UpdateAttributeWithHttpInfo (long attributeId, NewAttribute body);
        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.  **Important:** You cannot use this endpoint to update campaigns if [campaign staging and revisions](https://docs.talon.one/docs/product/applications/managing-general-settings#campaign-staging-and-revisions) is enabled for your Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Campaign</returns>
        Campaign UpdateCampaign (long applicationId, long campaignId, UpdateCampaign body);

        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.  **Important:** You cannot use this endpoint to update campaigns if [campaign staging and revisions](https://docs.talon.one/docs/product/applications/managing-general-settings#campaign-staging-and-revisions) is enabled for your Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> UpdateCampaignWithHttpInfo (long applicationId, long campaignId, UpdateCampaign body);
        /// <summary>
        /// Update campaign-level collection&#39;s description
        /// </summary>
        /// <remarks>
        /// Edit the description of a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        Collection UpdateCollection (long applicationId, long campaignId, long collectionId, UpdateCampaignCollection body);

        /// <summary>
        /// Update campaign-level collection&#39;s description
        /// </summary>
        /// <remarks>
        /// Edit the description of a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> UpdateCollectionWithHttpInfo (long applicationId, long campaignId, long collectionId, UpdateCampaignCollection body);
        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt;, &lt;code&gt;expiryDate&lt;/code&gt;, and &lt;code&gt;recipientIntegrationId&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Coupon</returns>
        Coupon UpdateCoupon (long applicationId, long campaignId, string couponId, UpdateCoupon body);

        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt;, &lt;code&gt;expiryDate&lt;/code&gt;, and &lt;code&gt;recipientIntegrationId&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Coupon</returns>
        ApiResponse<Coupon> UpdateCouponWithHttpInfo (long applicationId, long campaignId, string couponId, UpdateCoupon body);
        /// <summary>
        /// Update coupons
        /// </summary>
        /// <remarks>
        /// Update all coupons or a specific batch of coupons in the given campaign. You can find the &#x60;batchId&#x60; on the **Coupons** page of your campaign in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint time out after 30 minutes. If you hit a timeout, contact our support team.&lt;/li&gt;     &lt;li&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt; and &lt;code&gt;expiryDate&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns></returns>
        void UpdateCouponBatch (long applicationId, long campaignId, UpdateCouponBatch body);

        /// <summary>
        /// Update coupons
        /// </summary>
        /// <remarks>
        /// Update all coupons or a specific batch of coupons in the given campaign. You can find the &#x60;batchId&#x60; on the **Coupons** page of your campaign in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint time out after 30 minutes. If you hit a timeout, contact our support team.&lt;/li&gt;     &lt;li&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt; and &lt;code&gt;expiryDate&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCouponBatchWithHttpInfo (long applicationId, long campaignId, UpdateCouponBatch body);
        /// <summary>
        /// Update loyalty card status
        /// </summary>
        /// <remarks>
        /// Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>LoyaltyCard</returns>
        LoyaltyCard UpdateLoyaltyCard (long loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body);

        /// <summary>
        /// Update loyalty card status
        /// </summary>
        /// <remarks>
        /// Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of LoyaltyCard</returns>
        ApiResponse<LoyaltyCard> UpdateLoyaltyCardWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body);
        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Referral</returns>
        Referral UpdateReferral (long applicationId, long campaignId, string referralId, UpdateReferral body);

        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Referral</returns>
        ApiResponse<Referral> UpdateReferralWithHttpInfo (long applicationId, long campaignId, string referralId, UpdateReferral body);
        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// Update a specific role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>RoleV2</returns>
        RoleV2 UpdateRoleV2 (long roleId, RoleV2Base body);

        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// Update a specific role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of RoleV2</returns>
        ApiResponse<RoleV2> UpdateRoleV2WithHttpInfo (long roleId, RoleV2Base body);
        /// <summary>
        /// Update store
        /// </summary>
        /// <remarks>
        /// Update store details for a specific store ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Store</returns>
        Store UpdateStore (long applicationId, string storeId, NewStore body);

        /// <summary>
        /// Update store
        /// </summary>
        /// <remarks>
        /// Update store details for a specific store ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> UpdateStoreWithHttpInfo (long applicationId, string storeId, NewStore body);
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// Update the details of a specific user.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>User</returns>
        User UpdateUser (long userId, UpdateUser body);

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// Update the details of a specific user.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithHttpInfo (long userId, UpdateUser body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Enable user by email address
        /// </summary>
        /// <remarks>
        /// Enable a [disabled user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateUserByEmailAsync (DeleteUserRequest body);

        /// <summary>
        /// Enable user by email address
        /// </summary>
        /// <remarks>
        /// Enable a [disabled user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateUserByEmailAsyncWithHttpInfo (DeleteUserRequest body);
        /// <summary>
        /// Add points to card
        /// </summary>
        /// <remarks>
        /// Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLoyaltyCardPointsAsync (long loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body);

        /// <summary>
        /// Add points to card
        /// </summary>
        /// <remarks>
        /// Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLoyaltyCardPointsAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body);
        /// <summary>
        /// Add points to customer profile
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLoyaltyPointsAsync (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body);

        /// <summary>
        /// Add points to customer profile
        /// </summary>
        /// <remarks>
        /// Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body);
        /// <summary>
        /// Copy the campaign into the specified Application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into all specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> CopyCampaignToApplicationsAsync (long applicationId, long campaignId, CampaignCopy body);

        /// <summary>
        /// Copy the campaign into the specified Application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into all specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> CopyCampaignToApplicationsAsyncWithHttpInfo (long applicationId, long campaignId, CampaignCopy body);
        /// <summary>
        /// Create account-level collection
        /// </summary>
        /// <remarks>
        /// Create an account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> CreateAccountCollectionAsync (NewCollection body);

        /// <summary>
        /// Create account-level collection
        /// </summary>
        /// <remarks>
        /// Create an account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> CreateAccountCollectionAsyncWithHttpInfo (NewCollection body);
        /// <summary>
        /// Create achievement
        /// </summary>
        /// <remarks>
        /// Create a new achievement in a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Achievement</returns>
        System.Threading.Tasks.Task<Achievement> CreateAchievementAsync (long applicationId, long campaignId, CreateAchievement body);

        /// <summary>
        /// Create achievement
        /// </summary>
        /// <remarks>
        /// Create a new achievement in a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Achievement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Achievement>> CreateAchievementAsyncWithHttpInfo (long applicationId, long campaignId, CreateAchievement body);
        /// <summary>
        /// Create additional cost
        /// </summary>
        /// <remarks>
        /// Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> CreateAdditionalCostAsync (NewAdditionalCost body);

        /// <summary>
        /// Create additional cost
        /// </summary>
        /// <remarks>
        /// Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> CreateAdditionalCostAsyncWithHttpInfo (NewAdditionalCost body);
        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> CreateAttributeAsync (NewAttribute body);

        /// <summary>
        /// Create custom attribute
        /// </summary>
        /// <remarks>
        /// Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> CreateAttributeAsyncWithHttpInfo (NewAttribute body);
        /// <summary>
        /// Create loyalty cards
        /// </summary>
        /// <remarks>
        /// Create a batch of loyalty cards in a specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types).  Customers can use loyalty cards to collect and spend loyalty points.  **Important:**  - The specified card-based loyalty program must have a defined card code format that is used to generate the loyalty card codes. - Trying to create more than 20,000 loyalty cards in a single request returns an error message with a &#x60;400&#x60; status code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of LoyaltyCardBatchResponse</returns>
        System.Threading.Tasks.Task<LoyaltyCardBatchResponse> CreateBatchLoyaltyCardsAsync (long loyaltyProgramId, LoyaltyCardBatch body);

        /// <summary>
        /// Create loyalty cards
        /// </summary>
        /// <remarks>
        /// Create a batch of loyalty cards in a specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types).  Customers can use loyalty cards to collect and spend loyalty points.  **Important:**  - The specified card-based loyalty program must have a defined card code format that is used to generate the loyalty card codes. - Trying to create more than 20,000 loyalty cards in a single request returns an error message with a &#x60;400&#x60; status code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (LoyaltyCardBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyCardBatchResponse>> CreateBatchLoyaltyCardsAsyncWithHttpInfo (long loyaltyProgramId, LoyaltyCardBatch body);
        /// <summary>
        /// Create campaign from campaign template
        /// </summary>
        /// <remarks>
        /// Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of CreateTemplateCampaignResponse</returns>
        System.Threading.Tasks.Task<CreateTemplateCampaignResponse> CreateCampaignFromTemplateAsync (long applicationId, CreateTemplateCampaign body);

        /// <summary>
        /// Create campaign from campaign template
        /// </summary>
        /// <remarks>
        /// Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (CreateTemplateCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTemplateCampaignResponse>> CreateCampaignFromTemplateAsyncWithHttpInfo (long applicationId, CreateTemplateCampaign body);
        /// <summary>
        /// Create campaign store budget
        /// </summary>
        /// <remarks>
        /// Create a new store budget for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateCampaignStoreBudgetAsync (long applicationId, long campaignId, NewCampaignStoreBudget body);

        /// <summary>
        /// Create campaign store budget
        /// </summary>
        /// <remarks>
        /// Create a new store budget for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateCampaignStoreBudgetAsyncWithHttpInfo (long applicationId, long campaignId, NewCampaignStoreBudget body);
        /// <summary>
        /// Create campaign-level collection
        /// </summary>
        /// <remarks>
        /// Create a campaign-level collection in a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> CreateCollectionAsync (long applicationId, long campaignId, NewCampaignCollection body);

        /// <summary>
        /// Create campaign-level collection
        /// </summary>
        /// <remarks>
        /// Create a campaign-level collection in a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> CreateCollectionAsyncWithHttpInfo (long applicationId, long campaignId, NewCampaignCollection body);
        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> CreateCouponsAsync (long applicationId, long campaignId, NewCoupons body, string silent = default(string));

        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> CreateCouponsAsyncWithHttpInfo (long applicationId, long campaignId, NewCoupons body, string silent = default(string));
        /// <summary>
        /// Create coupons asynchronously
        /// </summary>
        /// <remarks>
        /// Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of AsyncCouponCreationResponse</returns>
        System.Threading.Tasks.Task<AsyncCouponCreationResponse> CreateCouponsAsyncAsync (long applicationId, long campaignId, NewCouponCreationJob body);

        /// <summary>
        /// Create coupons asynchronously
        /// </summary>
        /// <remarks>
        /// Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AsyncCouponCreationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncCouponCreationResponse>> CreateCouponsAsyncAsyncWithHttpInfo (long applicationId, long campaignId, NewCouponCreationJob body);
        /// <summary>
        /// Creates a coupon deletion job
        /// </summary>
        /// <remarks>
        /// This endpoint handles creating a job to delete coupons asynchronously. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of AsyncCouponDeletionJobResponse</returns>
        System.Threading.Tasks.Task<AsyncCouponDeletionJobResponse> CreateCouponsDeletionJobAsync (long applicationId, long campaignId, NewCouponDeletionJob body);

        /// <summary>
        /// Creates a coupon deletion job
        /// </summary>
        /// <remarks>
        /// This endpoint handles creating a job to delete coupons asynchronously. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AsyncCouponDeletionJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncCouponDeletionJobResponse>> CreateCouponsDeletionJobAsyncWithHttpInfo (long applicationId, long campaignId, NewCouponDeletionJob body);
        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> CreateCouponsForMultipleRecipientsAsync (long applicationId, long campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));

        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> CreateCouponsForMultipleRecipientsAsyncWithHttpInfo (long applicationId, long campaignId, NewCouponsForMultipleRecipients body, string silent = default(string));
        /// <summary>
        /// Resend invitation email
        /// </summary>
        /// <remarks>
        /// Resend an email invitation to an existing user.  **Note:** The invitation token is valid for 24 hours after the email has been sent. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of NewInviteEmail</returns>
        System.Threading.Tasks.Task<NewInviteEmail> CreateInviteEmailAsync (NewInviteEmail body);

        /// <summary>
        /// Resend invitation email
        /// </summary>
        /// <remarks>
        /// Resend an email invitation to an existing user.  **Note:** The invitation token is valid for 24 hours after the email has been sent. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NewInviteEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewInviteEmail>> CreateInviteEmailAsyncWithHttpInfo (NewInviteEmail body);
        /// <summary>
        /// Invite user
        /// </summary>
        /// <remarks>
        /// Create a new user in the account and send an invitation to their email address.  **Note**: The invitation token is valid for 24 hours after the email has been sent. You can resend an invitation to a user with the [Resend invitation email](https://docs.talon.one/management-api#tag/Accounts-and-users/operation/createInviteEmail) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateInviteV2Async (NewInvitation body);

        /// <summary>
        /// Invite user
        /// </summary>
        /// <remarks>
        /// Create a new user in the account and send an invitation to their email address.  **Note**: The invitation token is valid for 24 hours after the email has been sent. You can resend an invitation to a user with the [Resend invitation email](https://docs.talon.one/management-api#tag/Accounts-and-users/operation/createInviteEmail) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateInviteV2AsyncWithHttpInfo (NewInvitation body);
        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of NewPasswordEmail</returns>
        System.Threading.Tasks.Task<NewPasswordEmail> CreatePasswordRecoveryEmailAsync (NewPasswordEmail body);

        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NewPasswordEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewPasswordEmail>> CreatePasswordRecoveryEmailAsyncWithHttpInfo (NewPasswordEmail body);
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Session</returns>
        System.Threading.Tasks.Task<Session> CreateSessionAsync (LoginParams body);

        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Session)</returns>
        System.Threading.Tasks.Task<ApiResponse<Session>> CreateSessionAsyncWithHttpInfo (LoginParams body);
        /// <summary>
        /// Create store
        /// </summary>
        /// <remarks>
        /// Create a new store in a specific Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> CreateStoreAsync (long applicationId, NewStore body);

        /// <summary>
        /// Create store
        /// </summary>
        /// <remarks>
        /// Create a new store in a specific Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> CreateStoreAsyncWithHttpInfo (long applicationId, NewStore body);
        /// <summary>
        /// Disable user by email address
        /// </summary>
        /// <remarks>
        /// [Disable a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateUserByEmailAsync (DeleteUserRequest body);

        /// <summary>
        /// Disable user by email address
        /// </summary>
        /// <remarks>
        /// [Disable a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateUserByEmailAsyncWithHttpInfo (DeleteUserRequest body);
        /// <summary>
        /// Deduct points from card
        /// </summary>
        /// <remarks>
        /// Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeductLoyaltyCardPointsAsync (long loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body);

        /// <summary>
        /// Deduct points from card
        /// </summary>
        /// <remarks>
        /// Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeductLoyaltyCardPointsAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body);
        /// <summary>
        /// Delete account-level collection
        /// </summary>
        /// <remarks>
        /// Delete a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountCollectionAsync (long collectionId);

        /// <summary>
        /// Delete account-level collection
        /// </summary>
        /// <remarks>
        /// Delete a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountCollectionAsyncWithHttpInfo (long collectionId);
        /// <summary>
        /// Delete achievement
        /// </summary>
        /// <remarks>
        /// Delete the specified achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAchievementAsync (long applicationId, long campaignId, long achievementId);

        /// <summary>
        /// Delete achievement
        /// </summary>
        /// <remarks>
        /// Delete the specified achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAchievementAsyncWithHttpInfo (long applicationId, long campaignId, long achievementId);
        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCampaignAsync (long applicationId, long campaignId);

        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// Delete the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCampaignAsyncWithHttpInfo (long applicationId, long campaignId);
        /// <summary>
        /// Delete campaign store budgets
        /// </summary>
        /// <remarks>
        /// Delete the store budgets for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCampaignStoreBudgetsAsync (long applicationId, long campaignId, string action = default(string), string period = default(string));

        /// <summary>
        /// Delete campaign store budgets
        /// </summary>
        /// <remarks>
        /// Delete the store budgets for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCampaignStoreBudgetsAsyncWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string));
        /// <summary>
        /// Delete campaign-level collection
        /// </summary>
        /// <remarks>
        /// Delete a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCollectionAsync (long applicationId, long campaignId, long collectionId);

        /// <summary>
        /// Delete campaign-level collection
        /// </summary>
        /// <remarks>
        /// Delete a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCollectionAsyncWithHttpInfo (long applicationId, long campaignId, long collectionId);
        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponAsync (long applicationId, long campaignId, string couponId);

        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// Delete the specified coupon.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponAsyncWithHttpInfo (long applicationId, long campaignId, string couponId);
        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponsAsync (long applicationId, long campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// Deletes all the coupons matching the specified criteria.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponsAsyncWithHttpInfo (long applicationId, long campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Delete loyalty card
        /// </summary>
        /// <remarks>
        /// Delete the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLoyaltyCardAsync (long loyaltyProgramId, string loyaltyCardId);

        /// <summary>
        /// Delete loyalty card
        /// </summary>
        /// <remarks>
        /// Delete the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoyaltyCardAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId);
        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReferralAsync (long applicationId, long campaignId, string referralId);

        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// Delete the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReferralAsyncWithHttpInfo (long applicationId, long campaignId, string referralId);
        /// <summary>
        /// Delete store
        /// </summary>
        /// <remarks>
        /// Delete the specified store.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStoreAsync (long applicationId, string storeId);

        /// <summary>
        /// Delete store
        /// </summary>
        /// <remarks>
        /// Delete the specified store.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStoreAsyncWithHttpInfo (long applicationId, string storeId);
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Delete a specific user.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (long userId);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Delete a specific user.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (long userId);
        /// <summary>
        /// Delete user by email address
        /// </summary>
        /// <remarks>
        /// [Delete a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#deleting-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserByEmailAsync (DeleteUserRequest body);

        /// <summary>
        /// Delete user by email address
        /// </summary>
        /// <remarks>
        /// [Delete a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#deleting-a-user) by their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserByEmailAsyncWithHttpInfo (DeleteUserRequest body);
        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroySessionAsync ();

        /// <summary>
        /// Destroy session
        /// </summary>
        /// <remarks>
        /// Destroys the session.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroySessionAsyncWithHttpInfo ();
        /// <summary>
        /// Disconnect stores
        /// </summary>
        /// <remarks>
        /// Disconnect the stores linked to a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisconnectCampaignStoresAsync (long applicationId, long campaignId);

        /// <summary>
        /// Disconnect stores
        /// </summary>
        /// <remarks>
        /// Disconnect the stores linked to a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisconnectCampaignStoresAsyncWithHttpInfo (long applicationId, long campaignId);
        /// <summary>
        /// Export account-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from a given account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportAccountCollectionItemsAsync (long collectionId);

        /// <summary>
        /// Export account-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from a given account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportAccountCollectionItemsAsyncWithHttpInfo (long collectionId);
        /// <summary>
        /// Export achievement customer data
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a list of all the customers who have participated in and are currently participating in the given achievement.  The CSV file contains the following columns: - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile participating in the achievement. - &#x60;title&#x60;: The display name of the achievement in the Campaign Manager. - &#x60;target&#x60;: The required number of actions or the transactional milestone to complete the achievement. - &#x60;progress&#x60;: The current progress of the customer in the achievement. - &#x60;status&#x60;: The status of the achievement. Can be one of: [&#39;inprogress&#39;, &#39;completed&#39;, &#39;expired&#39;]. - &#x60;startDate&#x60;: The date on which the customer profile started the achievement in RFC3339. - &#x60;endDate&#x60;: The date on which the achievement ends and resets for the customer profile in RFC3339. - &#x60;completionDate&#x60;: The date on which the customer profile completed the achievement in RFC3339. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportAchievementsAsync (long applicationId, long campaignId, long achievementId);

        /// <summary>
        /// Export achievement customer data
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a list of all the customers who have participated in and are currently participating in the given achievement.  The CSV file contains the following columns: - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile participating in the achievement. - &#x60;title&#x60;: The display name of the achievement in the Campaign Manager. - &#x60;target&#x60;: The required number of actions or the transactional milestone to complete the achievement. - &#x60;progress&#x60;: The current progress of the customer in the achievement. - &#x60;status&#x60;: The status of the achievement. Can be one of: [&#39;inprogress&#39;, &#39;completed&#39;, &#39;expired&#39;]. - &#x60;startDate&#x60;: The date on which the customer profile started the achievement in RFC3339. - &#x60;endDate&#x60;: The date on which the achievement ends and resets for the customer profile in RFC3339. - &#x60;completionDate&#x60;: The date on which the customer profile completed the achievement in RFC3339. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportAchievementsAsyncWithHttpInfo (long applicationId, long campaignId, long achievementId);
        /// <summary>
        /// Export audience members
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the integration IDs of the members of an audience.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The file contains the following column: - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportAudiencesMembershipsAsync (long audienceId);

        /// <summary>
        /// Export audience members
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the integration IDs of the members of an audience.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The file contains the following column: - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportAudiencesMembershipsAsyncWithHttpInfo (long audienceId);
        /// <summary>
        /// Export campaign store budgets
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the store budgets for a given campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCampaignStoreBudgetsAsync (long applicationId, long campaignId, string action = default(string), string period = default(string));

        /// <summary>
        /// Export campaign store budgets
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the store budgets for a given campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCampaignStoreBudgetsAsyncWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string));
        /// <summary>
        /// Export stores
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the stores linked to a specific campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following column:  - &#x60;store_integration_id&#x60;: The identifier of the store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCampaignStoresAsync (long applicationId, long campaignId);

        /// <summary>
        /// Export stores
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the stores linked to a specific campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following column:  - &#x60;store_integration_id&#x60;: The identifier of the store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCampaignStoresAsyncWithHttpInfo (long applicationId, long campaignId);
        /// <summary>
        /// Export campaign-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from a given campaign-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCollectionItemsAsync (long applicationId, long campaignId, long collectionId);

        /// <summary>
        /// Export campaign-level collection&#39;s items
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing items from a given campaign-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCollectionItemsAsyncWithHttpInfo (long applicationId, long campaignId, long collectionId);
        /// <summary>
        /// Export coupons
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file can contain the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date in RFC3339 of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon can be reserved for multiple customers. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCouponsAsync (long applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string), bool? valuesOnly = default(bool?));

        /// <summary>
        /// Export coupons
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file can contain the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date in RFC3339 of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon can be reserved for multiple customers. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCouponsAsyncWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string), bool? valuesOnly = default(bool?));
        /// <summary>
        /// Export customer sessions
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/dev/server-infrastructure-and-data-retention).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of cart items and additional costs in the session, before any discounts are applied. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;store_integration_id&#x60;: The integration ID of the store. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCustomerSessionsAsync (long applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));

        /// <summary>
        /// Export customer sessions
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/dev/server-infrastructure-and-data-retention).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of cart items and additional costs in the session, before any discounts are applied. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;store_integration_id&#x60;: The integration ID of the store. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCustomerSessionsAsyncWithHttpInfo (long applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));
        /// <summary>
        /// Export customers&#39; tier data
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the tier information for customers of the specified loyalty program.  The generated file contains the following columns:  - &#x60;programid&#x60;: The identifier of the loyalty program. It is displayed in your Talon.One deployment URL. - &#x60;subledgerid&#x60;: The ID of the subledger associated with the loyalty program. This column is empty if the loyalty program has no subledger. In this case, refer to the export file name to get the ID of the loyalty program. - &#x60;customerprofileid&#x60;: The ID used to integrate customer profiles with the loyalty program. - &#x60;tiername&#x60;: The name of the tier. - &#x60;startdate&#x60;: The tier start date in RFC3339. - &#x60;expirydate&#x60;: The tier expiry date in RFC3339.  You can filter the results by providing the following optional input parameters:  - &#x60;subledgerIds&#x60; (optional): Filter results by an array of subledger IDs. If no value is provided, all subledger data for the specified loyalty program will be exported. - &#x60;tierNames&#x60; (optional): Filter results by an array of tier names. If no value is provided, all tier data for the specified loyalty program will be exported. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="subledgerIds">An array of subledgers IDs to filter the export by. (optional)</param>
        /// <param name="tierNames">An array of tier names to filter the export by. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCustomersTiersAsync (string loyaltyProgramId, List<string> subledgerIds = default(List<string>), List<string> tierNames = default(List<string>));

        /// <summary>
        /// Export customers&#39; tier data
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the tier information for customers of the specified loyalty program.  The generated file contains the following columns:  - &#x60;programid&#x60;: The identifier of the loyalty program. It is displayed in your Talon.One deployment URL. - &#x60;subledgerid&#x60;: The ID of the subledger associated with the loyalty program. This column is empty if the loyalty program has no subledger. In this case, refer to the export file name to get the ID of the loyalty program. - &#x60;customerprofileid&#x60;: The ID used to integrate customer profiles with the loyalty program. - &#x60;tiername&#x60;: The name of the tier. - &#x60;startdate&#x60;: The tier start date in RFC3339. - &#x60;expirydate&#x60;: The tier expiry date in RFC3339.  You can filter the results by providing the following optional input parameters:  - &#x60;subledgerIds&#x60; (optional): Filter results by an array of subledger IDs. If no value is provided, all subledger data for the specified loyalty program will be exported. - &#x60;tierNames&#x60; (optional): Filter results by an array of tier names. If no value is provided, all tier data for the specified loyalty program will be exported. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="subledgerIds">An array of subledgers IDs to filter the export by. (optional)</param>
        /// <param name="tierNames">An array of tier names to filter the export by. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCustomersTiersAsyncWithHttpInfo (string loyaltyProgramId, List<string> subledgerIds = default(List<string>), List<string> tierNames = default(List<string>));
        /// <summary>
        /// Export triggered effects
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/entities/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. - &#x60;store_integration_id&#x60;: The integration ID of the store. You choose this ID when you create a store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportEffectsAsync (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));

        /// <summary>
        /// Export triggered effects
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/entities/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. - &#x60;store_integration_id&#x60;: The integration ID of the store. You choose this ID when you create a store. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportEffectsAsyncWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));
        /// <summary>
        /// Export customer loyalty balance to CSV
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyBalanceAsync (string loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export customer loyalty balance to CSV
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyBalanceAsyncWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export customer loyalty balances
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyBalancesAsync (string loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export customer loyalty balances
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyBalancesAsyncWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export all card transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyCardBalancesAsync (long loyaltyProgramId, DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Export all card transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyCardBalancesAsyncWithHttpInfo (long loyaltyProgramId, DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Export card&#39;s ledger log
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyCardLedgerAsync (long loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));

        /// <summary>
        /// Export card&#39;s ledger log
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyCardLedgerAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));
        /// <summary>
        /// Export loyalty cards
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the loyalty cards from a specified loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;identifier&#x60;: The unique identifier of the loyalty card. - &#x60;created&#x60;: The date and time the loyalty card was created. - &#x60;status&#x60;: The status of the loyalty card. - &#x60;userpercardlimit&#x60;: The maximum number of customer profiles that can be linked to the card. - &#x60;customerprofileids&#x60;: Integration IDs of the customer profiles linked to the card. - &#x60;blockreason&#x60;: The reason for transferring and blocking the loyalty card. - &#x60;generated&#x60;: An indicator of whether the loyalty card was generated. - &#x60;batchid&#x60;: The ID of the batch the loyalty card is in. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <param name="createdBefore">Only return loyalty cards created before this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="createdAfter">Only return loyalty cards created after this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyCardsAsync (long loyaltyProgramId, string batchId = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));

        /// <summary>
        /// Export loyalty cards
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the loyalty cards from a specified loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;identifier&#x60;: The unique identifier of the loyalty card. - &#x60;created&#x60;: The date and time the loyalty card was created. - &#x60;status&#x60;: The status of the loyalty card. - &#x60;userpercardlimit&#x60;: The maximum number of customer profiles that can be linked to the card. - &#x60;customerprofileids&#x60;: Integration IDs of the customer profiles linked to the card. - &#x60;blockreason&#x60;: The reason for transferring and blocking the loyalty card. - &#x60;generated&#x60;: An indicator of whether the loyalty card was generated. - &#x60;batchid&#x60;: The ID of the batch the loyalty card is in. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <param name="createdBefore">Only return loyalty cards created before this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="createdAfter">Only return loyalty cards created after this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyCardsAsyncWithHttpInfo (long loyaltyProgramId, string batchId = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));
        /// <summary>
        /// Export customer&#39;s transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The transaction type, such as &#x60;addition&#x60; or &#x60;subtraction&#x60;. - &#x60;name&#x60;: The reason for the transaction. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;flags&#x60;: The flags of the transaction, when applicable. The &#x60;createsNegativeBalance&#x60; flag indicates whether the transaction results in a negative balance. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyLedgerAsync (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string));

        /// <summary>
        /// Export customer&#39;s transaction logs
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The transaction type, such as &#x60;addition&#x60; or &#x60;subtraction&#x60;. - &#x60;name&#x60;: The reason for the transaction. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;flags&#x60;: The flags of the transaction, when applicable. The &#x60;createsNegativeBalance&#x60; flag indicates whether the transaction results in a negative balance. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyLedgerAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string));
        /// <summary>
        /// Export giveaway codes of a giveaway pool
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the giveaway codes of a specific giveaway pool.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;id&#x60;: The internal ID of the giveaway. - &#x60;poolid&#x60;: The internal ID of the giveaway pool. - &#x60;code&#x60;: The giveaway code. - &#x60;startdate&#x60;: The validity start date in RFC3339 of the giveaway (can be empty). - &#x60;enddate&#x60;: The validity end date in RFC3339 of the giveaway (can be empty). - &#x60;attributes&#x60;: Any custom attributes associated with the giveaway code (can be empty). - &#x60;used&#x60;: An indication of whether the giveaway is already awarded. - &#x60;importid&#x60;: The ID of the import which created the giveaway. - &#x60;created&#x60;: The creation time of the giveaway code. - &#x60;profileintegrationid&#x60;: The third-party integration ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded. - &#x60;profileid&#x60;: The internal ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded or an internal ID does not exist. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="createdBefore">Timestamp that filters the results to only contain giveaways created before this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Timestamp that filters the results to only contain giveaways created after this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportPoolGiveawaysAsync (long poolId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// Export giveaway codes of a giveaway pool
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the giveaway codes of a specific giveaway pool.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;id&#x60;: The internal ID of the giveaway. - &#x60;poolid&#x60;: The internal ID of the giveaway pool. - &#x60;code&#x60;: The giveaway code. - &#x60;startdate&#x60;: The validity start date in RFC3339 of the giveaway (can be empty). - &#x60;enddate&#x60;: The validity end date in RFC3339 of the giveaway (can be empty). - &#x60;attributes&#x60;: Any custom attributes associated with the giveaway code (can be empty). - &#x60;used&#x60;: An indication of whether the giveaway is already awarded. - &#x60;importid&#x60;: The ID of the import which created the giveaway. - &#x60;created&#x60;: The creation time of the giveaway code. - &#x60;profileintegrationid&#x60;: The third-party integration ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded. - &#x60;profileid&#x60;: The internal ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded or an internal ID does not exist. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="createdBefore">Timestamp that filters the results to only contain giveaways created before this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Timestamp that filters the results to only contain giveaways created after this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportPoolGiveawaysAsyncWithHttpInfo (long poolId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// Export referrals
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportReferralsAsync (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string));

        /// <summary>
        /// Export referrals
        /// </summary>
        /// <remarks>
        /// Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportReferralsAsyncWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string));
        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls sent to the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GetAccessLogsWithoutTotalCountAsync (long applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// Get access logs for Application
        /// </summary>
        /// <remarks>
        /// Retrieve the list of API calls sent to the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetAccessLogsWithoutTotalCountAsyncWithHttpInfo (long applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> GetAccountAsync (long accountId);

        /// <summary>
        /// Get account details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> GetAccountAsyncWithHttpInfo (long accountId);
        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of AccountAnalytics</returns>
        System.Threading.Tasks.Task<AccountAnalytics> GetAccountAnalyticsAsync (long accountId);

        /// <summary>
        /// Get account analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of ApiResponse (AccountAnalytics)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAnalytics>> GetAccountAnalyticsAsyncWithHttpInfo (long accountId);
        /// <summary>
        /// Get account-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> GetAccountCollectionAsync (long collectionId);

        /// <summary>
        /// Get account-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given account-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> GetAccountCollectionAsyncWithHttpInfo (long collectionId);
        /// <summary>
        /// Get achievement
        /// </summary>
        /// <remarks>
        /// Get the details of a specific achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of Achievement</returns>
        System.Threading.Tasks.Task<Achievement> GetAchievementAsync (long applicationId, long campaignId, long achievementId);

        /// <summary>
        /// Get achievement
        /// </summary>
        /// <remarks>
        /// Get the details of a specific achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of ApiResponse (Achievement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Achievement>> GetAchievementAsyncWithHttpInfo (long applicationId, long campaignId, long achievementId);
        /// <summary>
        /// Get additional cost
        /// </summary>
        /// <remarks>
        /// Returns the additional cost. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> GetAdditionalCostAsync (long additionalCostId);

        /// <summary>
        /// Get additional cost
        /// </summary>
        /// <remarks>
        /// Returns the additional cost. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> GetAdditionalCostAsyncWithHttpInfo (long additionalCostId);
        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20038</returns>
        System.Threading.Tasks.Task<InlineResponse20038> GetAdditionalCostsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> GetAdditionalCostsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> GetApplicationAsync (long applicationId);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationAsyncWithHttpInfo (long applicationId);
        /// <summary>
        /// Get Application health
        /// </summary>
        /// <remarks>
        /// Display the health of the Application and show the last time the Application was used.  You can also find this information in the Campaign Manager. In your Application, click **Settings** &gt; **Integration API Keys**. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApplicationApiHealth</returns>
        System.Threading.Tasks.Task<ApplicationApiHealth> GetApplicationApiHealthAsync (long applicationId);

        /// <summary>
        /// Get Application health
        /// </summary>
        /// <remarks>
        /// Display the health of the Application and show the last time the Application was used.  You can also find this information in the Campaign Manager. In your Application, click **Settings** &gt; **Integration API Keys**. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (ApplicationApiHealth)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiHealth>> GetApplicationApiHealthAsyncWithHttpInfo (long applicationId);
        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApplicationCustomer</returns>
        System.Threading.Tasks.Task<ApplicationCustomer> GetApplicationCustomerAsync (long applicationId, long customerId);

        /// <summary>
        /// Get application&#39;s customer
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of the specified application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApiResponse (ApplicationCustomer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationCustomer>> GetApplicationCustomerAsyncWithHttpInfo (long applicationId, long customerId);
        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> GetApplicationCustomerFriendsAsync (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List friends referred by customer profile
        /// </summary>
        /// <remarks>
        /// List the friends referred by the specified customer profile in this Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GetApplicationCustomerFriendsAsyncWithHttpInfo (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GetApplicationCustomersAsync (long applicationId, string integrationId = default(string), long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application&#39;s customers
        /// </summary>
        /// <remarks>
        /// List all the customers of the specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetApplicationCustomersAsyncWithHttpInfo (long applicationId, string integrationId = default(string), long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GetApplicationCustomersByAttributesAsync (long applicationId, CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List application customers matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetApplicationCustomersByAttributesAsyncWithHttpInfo (long applicationId, CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#tag/Events/operation/trackEventV2) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> GetApplicationEventTypesAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List Applications event types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#tag/Events/operation/trackEventV2) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GetApplicationEventTypesAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of InlineResponse20030</returns>
        System.Threading.Tasks.Task<InlineResponse20030> GetApplicationEventsWithoutTotalCountAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));

        /// <summary>
        /// List Applications events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));
        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>Task of ApplicationSession</returns>
        System.Threading.Tasks.Task<ApplicationSession> GetApplicationSessionAsync (long applicationId, long sessionId);

        /// <summary>
        /// Get Application session
        /// </summary>
        /// <remarks>
        /// Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>Task of ApiResponse (ApplicationSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationSession>> GetApplicationSessionAsyncWithHttpInfo (long applicationId, long sessionId);
        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integration ID. Must be exact match. (optional)</param>
        /// <param name="storeIntegrationId">The integration ID of the store. You choose this ID when you create a store. (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> GetApplicationSessionsAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string), string storeIntegrationId = default(string));

        /// <summary>
        /// List Application sessions
        /// </summary>
        /// <remarks>
        /// List all the sessions of the specified Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integration ID. Must be exact match. (optional)</param>
        /// <param name="storeIntegrationId">The integration ID of the store. You choose this ID when you create a store. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetApplicationSessionsAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string), string storeIntegrationId = default(string));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all applications in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetApplicationsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all applications in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetApplicationsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get custom attribute
        /// </summary>
        /// <remarks>
        /// Retrieve the specified custom attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> GetAttributeAsync (long attributeId);

        /// <summary>
        /// Get custom attribute
        /// </summary>
        /// <remarks>
        /// Retrieve the specified custom attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> GetAttributeAsyncWithHttpInfo (long attributeId);
        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Return all the custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> GetAttributesAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string entity = default(string));

        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Return all the custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> GetAttributesAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string entity = default(string));
        /// <summary>
        /// List audience members
        /// </summary>
        /// <remarks>
        /// Get a paginated list of the customer profiles in a given audience.  A maximum of 1000 customer profiles per page is allowed. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profileQuery">The filter to select a profile. (optional)</param>
        /// <returns>Task of InlineResponse20034</returns>
        System.Threading.Tasks.Task<InlineResponse20034> GetAudienceMembershipsAsync (long audienceId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profileQuery = default(string));

        /// <summary>
        /// List audience members
        /// </summary>
        /// <remarks>
        /// Get a paginated list of the customer profiles in a given audience.  A maximum of 1000 customer profiles per page is allowed. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profileQuery">The filter to select a profile. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GetAudienceMembershipsAsyncWithHttpInfo (long audienceId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profileQuery = default(string));
        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> GetAudiencesAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetAudiencesAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// List audience analytics
        /// </summary>
        /// <remarks>
        /// Get a list of audience IDs and their member count. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceIds">The IDs of one or more audiences, separated by commas, by which to filter results.</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> GetAudiencesAnalyticsAsync (string audienceIds, string sort = default(string));

        /// <summary>
        /// List audience analytics
        /// </summary>
        /// <remarks>
        /// Get a list of audience IDs and their member count. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceIds">The IDs of one or more audiences, separated by commas, by which to filter results.</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetAudiencesAnalyticsAsyncWithHttpInfo (string audienceIds, string sort = default(string));
        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> GetCampaignAsync (long applicationId, long campaignId);

        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// Retrieve the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> GetCampaignAsyncWithHttpInfo (long applicationId, long campaignId);
        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> GetCampaignAnalyticsAsync (long applicationId, long campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));

        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve statistical data about the performance of the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetCampaignAnalyticsAsyncWithHttpInfo (long applicationId, long campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));
        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetCampaignByAttributesAsync (long applicationId, CampaignSearch body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string));

        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the campaigns that match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetCampaignByAttributesAsyncWithHttpInfo (long applicationId, CampaignSearch body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string));
        /// <summary>
        /// Get campaign access group
        /// </summary>
        /// <remarks>
        /// Get a campaign access group specified by its ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignGroupId">The ID of the campaign access group.</param>
        /// <returns>Task of CampaignGroup</returns>
        System.Threading.Tasks.Task<CampaignGroup> GetCampaignGroupAsync (long campaignGroupId);

        /// <summary>
        /// Get campaign access group
        /// </summary>
        /// <remarks>
        /// Get a campaign access group specified by its ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignGroupId">The ID of the campaign access group.</param>
        /// <returns>Task of ApiResponse (CampaignGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignGroup>> GetCampaignGroupAsyncWithHttpInfo (long campaignGroupId);
        /// <summary>
        /// List campaign access groups
        /// </summary>
        /// <remarks>
        /// List the campaign access groups in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetCampaignGroupsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List campaign access groups
        /// </summary>
        /// <remarks>
        /// List the campaign access groups in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetCampaignGroupsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// List campaign templates
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaign templates.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> GetCampaignTemplatesAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), long? userId = default(long?));

        /// <summary>
        /// List campaign templates
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaign templates.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetCampaignTemplatesAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), long? userId = default(long?));
        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List the campaigns of the specified application that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign access group ID. (optional)</param>
        /// <param name="templateId">The ID of the campaign template this campaign was created from. (optional)</param>
        /// <param name="storeId">Filter results to campaigns linked to the specified store ID. (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetCampaignsAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), long? campaignGroupId = default(long?), long? templateId = default(long?), long? storeId = default(long?));

        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// List the campaigns of the specified application that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign access group ID. (optional)</param>
        /// <param name="templateId">The ID of the campaign template this campaign was created from. (optional)</param>
        /// <param name="storeId">Filter results to campaigns linked to the specified store ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetCampaignsAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), long? campaignGroupId = default(long?), long? templateId = default(long?), long? storeId = default(long?));
        /// <summary>
        /// Get audit logs for an account
        /// </summary>
        /// <remarks>
        /// Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of InlineResponse20044</returns>
        System.Threading.Tasks.Task<InlineResponse20044> GetChangesAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), long? userId = default(long?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), long? managementKeyId = default(long?), bool? includeOld = default(bool?));

        /// <summary>
        /// Get audit logs for an account
        /// </summary>
        /// <remarks>
        /// Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> GetChangesAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), long? userId = default(long?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), long? managementKeyId = default(long?), bool? includeOld = default(bool?));
        /// <summary>
        /// Get campaign-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> GetCollectionAsync (long applicationId, long campaignId, long collectionId);

        /// <summary>
        /// Get campaign-level collection
        /// </summary>
        /// <remarks>
        /// Retrieve a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> GetCollectionAsyncWithHttpInfo (long applicationId, long campaignId, long collectionId);
        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Retrieve items from a given collection.  You can retrieve items from both account-level collections and campaign-level collections using this endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GetCollectionItemsAsync (long collectionId, long? pageSize = default(long?), long? skip = default(long?));

        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Retrieve items from a given collection.  You can retrieve items from both account-level collections and campaign-level collections using this endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetCollectionItemsAsyncWithHttpInfo (long collectionId, long? pageSize = default(long?), long? skip = default(long?));
        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="redeemed">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetCouponsWithoutTotalCountAsync (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string redeemed = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), DateTime? expiresBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? startsAfter = default(DateTime?), bool? valuesOnly = default(bool?));

        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// List all the coupons matching the specified criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="redeemed">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetCouponsWithoutTotalCountAsyncWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string redeemed = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), DateTime? expiresBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? startsAfter = default(DateTime?), bool? valuesOnly = default(bool?));
        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of CustomerActivityReport</returns>
        System.Threading.Tasks.Task<CustomerActivityReport> GetCustomerActivityReportAsync (DateTime rangeStart, DateTime rangeEnd, long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?));

        /// <summary>
        /// Get customer&#39;s activity report
        /// </summary>
        /// <remarks>
        /// Fetch the summary report of a given customer in the given application, in a time range.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (CustomerActivityReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerActivityReport>> GetCustomerActivityReportAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?));
        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name. (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaign name. (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name. (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> GetCustomerActivityReportsWithoutTotalCountAsync (DateTime rangeStart, DateTime rangeEnd, long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));

        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name. (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaign name. (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));
        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of CustomerAnalytics</returns>
        System.Threading.Tasks.Task<CustomerAnalytics> GetCustomerAnalyticsAsync (long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// Get customer&#39;s analytics report
        /// </summary>
        /// <remarks>
        /// Fetch analytics for a given customer in the given application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (CustomerAnalytics)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerAnalytics>> GetCustomerAnalyticsAsyncWithHttpInfo (long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of CustomerProfile</returns>
        System.Threading.Tasks.Task<CustomerProfile> GetCustomerProfileAsync (long customerId);

        /// <summary>
        /// Get customer profile
        /// </summary>
        /// <remarks>
        /// Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApiResponse (CustomerProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerProfile>> GetCustomerProfileAsyncWithHttpInfo (long customerId);
        /// <summary>
        /// List customer achievements
        /// </summary>
        /// <remarks>
        /// For the given customer profile, list all the achievements that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint. (optional)</param>
        /// <param name="title">Filter results by the &#x60;title&#x60; of an achievement. (optional)</param>
        /// <returns>Task of InlineResponse20051</returns>
        System.Threading.Tasks.Task<InlineResponse20051> GetCustomerProfileAchievementProgressAsync (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), long? achievementId = default(long?), string title = default(string));

        /// <summary>
        /// List customer achievements
        /// </summary>
        /// <remarks>
        /// For the given customer profile, list all the achievements that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint. (optional)</param>
        /// <param name="title">Filter results by the &#x60;title&#x60; of an achievement. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> GetCustomerProfileAchievementProgressAsyncWithHttpInfo (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), long? achievementId = default(long?), string title = default(string));
        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GetCustomerProfilesAsync (long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?));

        /// <summary>
        /// List customer profiles
        /// </summary>
        /// <remarks>
        /// List all customer profiles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetCustomerProfilesAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?));
        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GetCustomersByAttributesAsync (CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?));

        /// <summary>
        /// List customer profiles matching the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GetCustomersByAttributesAsyncWithHttpInfo (CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?));
        /// <summary>
        /// Get statistics for loyalty dashboard
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics displayed on the specified loyalty program&#39;s dashboard, such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> GetDashboardStatisticsAsync (long loyaltyProgramId, DateTime rangeStart, DateTime rangeEnd, string subledgerId = default(string));

        /// <summary>
        /// Get statistics for loyalty dashboard
        /// </summary>
        /// <remarks>
        /// Retrieve the statistics displayed on the specified loyalty program&#39;s dashboard, such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetDashboardStatisticsAsyncWithHttpInfo (long loyaltyProgramId, DateTime rangeStart, DateTime rangeEnd, string subledgerId = default(string));
        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20042</returns>
        System.Threading.Tasks.Task<InlineResponse20042> GetEventTypesAsync (string name = default(string), bool? includeOldVersions = default(bool?), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> GetEventTypesAsyncWithHttpInfo (string name = default(string), bool? includeOldVersions = default(bool?), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of InlineResponse20045</returns>
        System.Threading.Tasks.Task<InlineResponse20045> GetExportsAsync (long? pageSize = default(long?), long? skip = default(long?), decimal? applicationId = default(decimal?), long? campaignId = default(long?), string entity = default(string));

        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// List all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> GetExportsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), decimal? applicationId = default(decimal?), long? campaignId = default(long?), string entity = default(string));
        /// <summary>
        /// Get loyalty card
        /// </summary>
        /// <remarks>
        /// Get the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of LoyaltyCard</returns>
        System.Threading.Tasks.Task<LoyaltyCard> GetLoyaltyCardAsync (long loyaltyProgramId, string loyaltyCardId);

        /// <summary>
        /// Get loyalty card
        /// </summary>
        /// <remarks>
        /// Get the given loyalty card.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyCard>> GetLoyaltyCardAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId);
        /// <summary>
        /// List card&#39;s transactions
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/card-based/card-based-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> GetLoyaltyCardTransactionLogsAsync (long loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?), string subledgerId = default(string));

        /// <summary>
        /// List card&#39;s transactions
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/card-based/card-based-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetLoyaltyCardTransactionLogsAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?), string subledgerId = default(string));
        /// <summary>
        /// List loyalty cards
        /// </summary>
        /// <remarks>
        /// For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="identifier">The card code by which to filter loyalty cards in the response. (optional)</param>
        /// <param name="profileId">Filter results by customer profile ID. (optional)</param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> GetLoyaltyCardsAsync (long loyaltyProgramId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string identifier = default(string), long? profileId = default(long?), string batchId = default(string));

        /// <summary>
        /// List loyalty cards
        /// </summary>
        /// <remarks>
        /// For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="identifier">The card code by which to filter loyalty cards in the response. (optional)</param>
        /// <param name="profileId">Filter results by customer profile ID. (optional)</param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetLoyaltyCardsAsyncWithHttpInfo (long loyaltyProgramId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string identifier = default(string), long? profileId = default(long?), string batchId = default(string));
        /// <summary>
        /// Get customer&#39;s full loyalty ledger
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <returns>Task of LoyaltyLedger</returns>
        System.Threading.Tasks.Task<LoyaltyLedger> GetLoyaltyPointsAsync (string loyaltyProgramId, string integrationId);

        /// <summary>
        /// Get customer&#39;s full loyalty ledger
        /// </summary>
        /// <remarks>
        /// Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <returns>Task of ApiResponse (LoyaltyLedger)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyLedger>> GetLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId);
        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of LoyaltyProgram</returns>
        System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramAsync (long loyaltyProgramId);

        /// <summary>
        /// Get loyalty program
        /// </summary>
        /// <remarks>
        /// Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> GetLoyaltyProgramAsyncWithHttpInfo (long loyaltyProgramId);
        /// <summary>
        /// List loyalty program transactions
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. **Note:** If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GetLoyaltyProgramTransactionsAsync (long loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?));

        /// <summary>
        /// List loyalty program transactions
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. **Note:** If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetLoyaltyProgramTransactionsAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?));
        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GetLoyaltyProgramsAsync ();

        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List the loyalty programs of the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetLoyaltyProgramsAsyncWithHttpInfo ();
        /// <summary>
        /// Get loyalty program statistics
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To retrieve statistics for a loyalty program, use the [Get statistics for loyalty dashboard](/management-api#tag/Loyalty/operation/getDashboardStatistics) endpoint.  Retrieve the statistics of the specified loyalty program, such as the total active points, pending points, spent points, and expired points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of LoyaltyDashboardData</returns>
        System.Threading.Tasks.Task<LoyaltyDashboardData> GetLoyaltyStatisticsAsync (long loyaltyProgramId);

        /// <summary>
        /// Get loyalty program statistics
        /// </summary>
        /// <remarks>
        /// ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To retrieve statistics for a loyalty program, use the [Get statistics for loyalty dashboard](/management-api#tag/Loyalty/operation/getDashboardStatistics) endpoint.  Retrieve the statistics of the specified loyalty program, such as the total active points, pending points, spent points, and expired points. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyDashboardData)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyDashboardData>> GetLoyaltyStatisticsAsyncWithHttpInfo (long loyaltyProgramId);
        /// <summary>
        /// List message log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all message log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The entity type the log is related to. </param>
        /// <param name="messageID">Filter results by message ID. (optional)</param>
        /// <param name="changeType">Filter results by change type. (optional)</param>
        /// <param name="notificationIDs">Filter results by notification ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="cursor">A specific unique value in the database. If this value is not given, the server fetches results starting with the first record.  (optional)</param>
        /// <param name="period">Filter results by time period. Choose between the available relative time frames.  (optional)</param>
        /// <param name="isSuccessful">Indicates whether to return log entries with either successful or unsuccessful HTTP response codes. When set to&#x60;true&#x60;, only log entries with &#x60;2xx&#x60; response codes are returned. When set to &#x60;false&#x60;, only log entries with &#x60;4xx&#x60; and &#x60;5xx&#x60; response codes are returned.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. (optional)</param>
        /// <param name="responseCode">Filter results by response status code. (optional)</param>
        /// <param name="webhookIDs">Filter results by webhook ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <returns>Task of MessageLogEntries</returns>
        System.Threading.Tasks.Task<MessageLogEntries> GetMessageLogsAsync (string entityType, string messageID = default(string), string changeType = default(string), string notificationIDs = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), byte[] cursor = default(byte[]), string period = default(string), bool? isSuccessful = default(bool?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), long? loyaltyProgramId = default(long?), long? responseCode = default(long?), string webhookIDs = default(string));

        /// <summary>
        /// List message log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all message log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The entity type the log is related to. </param>
        /// <param name="messageID">Filter results by message ID. (optional)</param>
        /// <param name="changeType">Filter results by change type. (optional)</param>
        /// <param name="notificationIDs">Filter results by notification ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="cursor">A specific unique value in the database. If this value is not given, the server fetches results starting with the first record.  (optional)</param>
        /// <param name="period">Filter results by time period. Choose between the available relative time frames.  (optional)</param>
        /// <param name="isSuccessful">Indicates whether to return log entries with either successful or unsuccessful HTTP response codes. When set to&#x60;true&#x60;, only log entries with &#x60;2xx&#x60; response codes are returned. When set to &#x60;false&#x60;, only log entries with &#x60;4xx&#x60; and &#x60;5xx&#x60; response codes are returned.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. (optional)</param>
        /// <param name="responseCode">Filter results by response status code. (optional)</param>
        /// <param name="webhookIDs">Filter results by webhook ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <returns>Task of ApiResponse (MessageLogEntries)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageLogEntries>> GetMessageLogsAsyncWithHttpInfo (string entityType, string messageID = default(string), string changeType = default(string), string notificationIDs = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), byte[] cursor = default(byte[]), string period = default(string), bool? isSuccessful = default(bool?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), long? loyaltyProgramId = default(long?), long? responseCode = default(long?), string webhookIDs = default(string));
        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile ID specified in the referral&#39;s AdvocateProfileIntegrationId field. (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetReferralsWithoutTotalCountAsync (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));

        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// List all referrals of the specified campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile ID specified in the referral&#39;s AdvocateProfileIntegrationId field. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetReferralsWithoutTotalCountAsyncWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));
        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of a specific role. To see all the roles, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <returns>Task of RoleV2</returns>
        System.Threading.Tasks.Task<RoleV2> GetRoleV2Async (long roleId);

        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Get the details of a specific role. To see all the roles, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <returns>Task of ApiResponse (RoleV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleV2>> GetRoleV2AsyncWithHttpInfo (long roleId);
        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Task of Ruleset</returns>
        System.Threading.Tasks.Task<Ruleset> GetRulesetAsync (long applicationId, long campaignId, long rulesetId);

        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ruleset>> GetRulesetAsyncWithHttpInfo (long applicationId, long campaignId, long rulesetId);
        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetRulesetsAsync (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List campaign rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetRulesetsAsyncWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get store
        /// </summary>
        /// <remarks>
        /// Get store details for a specific store ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> GetStoreAsync (long applicationId, string storeId);

        /// <summary>
        /// Get store
        /// </summary>
        /// <remarks>
        /// Get store details for a specific store ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> GetStoreAsyncWithHttpInfo (long applicationId, string storeId);
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync (long userId);

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (long userId);
        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20043</returns>
        System.Threading.Tasks.Task<InlineResponse20043> GetUsersAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));

        /// <summary>
        /// List users in account
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> GetUsersAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string));
        /// <summary>
        /// Get webhook
        /// </summary>
        /// <remarks>
        /// Returns a webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> GetWebhookAsync (long webhookId);

        /// <summary>
        /// Get webhook
        /// </summary>
        /// <remarks>
        /// Returns a webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (long webhookId);
        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20040</returns>
        System.Threading.Tasks.Task<InlineResponse20040> GetWebhookActivationLogsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook activation log entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> GetWebhookActivationLogsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20041</returns>
        System.Threading.Tasks.Task<InlineResponse20041> GetWebhookLogsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List webhook log entries
        /// </summary>
        /// <remarks>
        /// Retrieve all webhook log entries.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> GetWebhookLogsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Checks if the given catalog or its attributes are referenced in the specified Application ID.  **Note**: If no Application ID is provided, we check for all connected Applications.  (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="creationType">Filter results by creation type. (optional)</param>
        /// <param name="visibility">Filter results by visibility. (optional)</param>
        /// <param name="outgoingIntegrationsTypeId">Filter results by outgoing integration type ID. (optional)</param>
        /// <param name="title">Filter results performing case-insensitive matching against the webhook title. (optional)</param>
        /// <returns>Task of InlineResponse20039</returns>
        System.Threading.Tasks.Task<InlineResponse20039> GetWebhooksAsync (string applicationIds = default(string), string sort = default(string), long? pageSize = default(long?), long? skip = default(long?), string creationType = default(string), string visibility = default(string), long? outgoingIntegrationsTypeId = default(long?), string title = default(string));

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List all webhooks.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Checks if the given catalog or its attributes are referenced in the specified Application ID.  **Note**: If no Application ID is provided, we check for all connected Applications.  (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="creationType">Filter results by creation type. (optional)</param>
        /// <param name="visibility">Filter results by visibility. (optional)</param>
        /// <param name="outgoingIntegrationsTypeId">Filter results by outgoing integration type ID. (optional)</param>
        /// <param name="title">Filter results performing case-insensitive matching against the webhook title. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> GetWebhooksAsyncWithHttpInfo (string applicationIds = default(string), string sort = default(string), long? pageSize = default(long?), long? skip = default(long?), string creationType = default(string), string visibility = default(string), long? outgoingIntegrationsTypeId = default(long?), string title = default(string));
        /// <summary>
        /// Import data into existing account-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportAccountCollectionAsync (long collectionId, string upFile = default(string));

        /// <summary>
        /// Import data into existing account-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportAccountCollectionAsyncWithHttpInfo (long collectionId, string upFile = default(string));
        /// <summary>
        /// Import allowed values for attribute
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportAllowedListAsync (long attributeId, string upFile = default(string));

        /// <summary>
        /// Import allowed values for attribute
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportAllowedListAsyncWithHttpInfo (long attributeId, string upFile = default(string));
        /// <summary>
        /// Import audience members
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the integration IDs of the members you want to add to an audience.  The file should be sent as multipart data and should contain only the following column (required): - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile.  The import **replaces** the previous list of audience members.  **Note:** We recommend limiting your file size to 500MB.  Example:  &#x60;&#x60;&#x60;text profileintegrationid charles alexa &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportAudiencesMembershipsAsync (long audienceId, string upFile = default(string));

        /// <summary>
        /// Import audience members
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the integration IDs of the members you want to add to an audience.  The file should be sent as multipart data and should contain only the following column (required): - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile.  The import **replaces** the previous list of audience members.  **Note:** We recommend limiting your file size to 500MB.  Example:  &#x60;&#x60;&#x60;text profileintegrationid charles alexa &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportAudiencesMembershipsAsyncWithHttpInfo (long audienceId, string upFile = default(string));
        /// <summary>
        /// Import campaign store budgets
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing store budgets for a given campaign.  Send the file as multipart data.  The CSV file **must** only contain the following columns: - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store.  The import **replaces** the previous list of store budgets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportCampaignStoreBudgetAsync (long applicationId, long campaignId, string action = default(string), string period = default(string), string upFile = default(string));

        /// <summary>
        /// Import campaign store budgets
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing store budgets for a given campaign.  Send the file as multipart data.  The CSV file **must** only contain the following columns: - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store.  The import **replaces** the previous list of store budgets. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportCampaignStoreBudgetAsyncWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string), string upFile = default(string));
        /// <summary>
        /// Import stores
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the stores you want to link to a specific campaign.  Send the file as multipart data.  The CSV file **must** only contain the following column: - &#x60;store_integration_id&#x60;: The identifier of the store.  The import **replaces** the previous list of stores linked to the campaign. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportCampaignStoresAsync (long applicationId, long campaignId, string upFile = default(string));

        /// <summary>
        /// Import stores
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the stores you want to link to a specific campaign.  Send the file as multipart data.  The CSV file **must** only contain the following column: - &#x60;store_integration_id&#x60;: The identifier of the store.  The import **replaces** the previous list of stores linked to the campaign. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportCampaignStoresAsyncWithHttpInfo (long applicationId, long campaignId, string upFile = default(string));
        /// <summary>
        /// Import data into existing campaign-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportCollectionAsync (long applicationId, long campaignId, long collectionId, string upFile = default(string));

        /// <summary>
        /// Import data into existing campaign-level collection
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportCollectionAsyncWithHttpInfo (long applicationId, long campaignId, long collectionId, string upFile = default(string));
        /// <summary>
        /// Import coupons
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A JSON object describing _custom_ coupon attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the coupon entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="skipDuplicates">An indicator of whether to skip duplicate coupon values instead of causing an error. Duplicate values are ignored when &#x60;skipDuplicates&#x3D;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportCouponsAsync (long applicationId, long campaignId, bool? skipDuplicates = default(bool?), string upFile = default(string));

        /// <summary>
        /// Import coupons
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A JSON object describing _custom_ coupon attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the coupon entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="skipDuplicates">An indicator of whether to skip duplicate coupon values instead of causing an error. Duplicate values are ignored when &#x60;skipDuplicates&#x3D;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportCouponsAsyncWithHttpInfo (long applicationId, long campaignId, bool? skipDuplicates = default(bool?), string upFile = default(string));
        /// <summary>
        /// Import loyalty cards
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card. The identifiers should be separated with a semicolon (;).  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportLoyaltyCardsAsync (long loyaltyProgramId, string upFile = default(string));

        /// <summary>
        /// Import loyalty cards
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card. The identifiers should be separated with a semicolon (;).  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportLoyaltyCardsAsyncWithHttpInfo (long loyaltyProgramId, string upFile = default(string));
        /// <summary>
        /// Import customers into loyalty tiers
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing existing customers to be assigned to existing tiers. Send the file as multipart data.  **Important:** This endpoint only works with loyalty programs with advanced tiers (with expiration and downgrade policy) feature enabled.  The CSV file should contain the following columns: - &#x60;subledgerid&#x60; (optional): The ID of the subledger. If this field is empty, the main ledger will be used. - &#x60;customerprofileid&#x60;: The integration ID of the customer profile to whom the tier should be assigned. - &#x60;tiername&#x60;: The name of an existing tier to assign to the customer. - &#x60;expirydate&#x60;: The expiration date of the tier when the tier is reevaluated. It should be a future date.  About customer assignment to a tier: - If the customer isn&#39;t already in a tier, the customer is assigned to the specified tier during the tier import. - If the customer is already in the tier that&#39;s specified in the CSV file, only the expiration date is updated.  **Note:** We recommend not using this endpoint to update the tier of a customer. To update a customer&#39;s tier, you can [add](/management-api#tag/Loyalty/operation/addLoyaltyPoints) or [deduct](/management-api#tag/Loyalty/operation/removeLoyaltyPoints) their loyalty points.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:** &#x60;&#x60;&#x60;csv subledgerid,customerprofileid,tiername,expirydate SUB1,alexa,Gold,2024-03-21T07:32:14Z ,george,Silver,2025-04-16T21:12:37Z SUB2,avocado,Bronze,2026-05-03T11:47:01Z &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportLoyaltyCustomersTiersAsync (long loyaltyProgramId, string upFile = default(string));

        /// <summary>
        /// Import customers into loyalty tiers
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing existing customers to be assigned to existing tiers. Send the file as multipart data.  **Important:** This endpoint only works with loyalty programs with advanced tiers (with expiration and downgrade policy) feature enabled.  The CSV file should contain the following columns: - &#x60;subledgerid&#x60; (optional): The ID of the subledger. If this field is empty, the main ledger will be used. - &#x60;customerprofileid&#x60;: The integration ID of the customer profile to whom the tier should be assigned. - &#x60;tiername&#x60;: The name of an existing tier to assign to the customer. - &#x60;expirydate&#x60;: The expiration date of the tier when the tier is reevaluated. It should be a future date.  About customer assignment to a tier: - If the customer isn&#39;t already in a tier, the customer is assigned to the specified tier during the tier import. - If the customer is already in the tier that&#39;s specified in the CSV file, only the expiration date is updated.  **Note:** We recommend not using this endpoint to update the tier of a customer. To update a customer&#39;s tier, you can [add](/management-api#tag/Loyalty/operation/addLoyaltyPoints) or [deduct](/management-api#tag/Loyalty/operation/removeLoyaltyPoints) their loyalty points.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:** &#x60;&#x60;&#x60;csv subledgerid,customerprofileid,tiername,expirydate SUB1,alexa,Gold,2024-03-21T07:32:14Z ,george,Silver,2025-04-16T21:12:37Z SUB2,avocado,Bronze,2026-05-03T11:47:01Z &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportLoyaltyCustomersTiersAsyncWithHttpInfo (long loyaltyProgramId, string upFile = default(string));
        /// <summary>
        /// Import loyalty points
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the type of loyalty program, you can import points into a given customer profile or loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported.    **Note**: If the customer profile does not exist, it will be created. The profile will not be visible in any Application   until a session or profile update is received for that profile. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60; (optional): The earliest date when the points can be redeemed. The points are &#x60;active&#x60; from this date until the expiration date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;immediate&#x60;. Empty or missing values are considered &#x60;immediate&#x60;. - &#x60;expirydate&#x60; (optional): The latest date when the points can be redeemed. The points are &#x60;expired&#x60; after this date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;unlimited&#x60;. Empty or missing values are considered &#x60;unlimited&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="notificationsEnabled">Indicates whether the points import triggers notifications about its effects. For example, a notification is sent if the import upgrades a customer&#39;s tier or offsets their negative points balance.  This parameter is optional and defaults to &#x60;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportLoyaltyPointsAsync (long loyaltyProgramId, bool? notificationsEnabled = default(bool?), string upFile = default(string));

        /// <summary>
        /// Import loyalty points
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the type of loyalty program, you can import points into a given customer profile or loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported.    **Note**: If the customer profile does not exist, it will be created. The profile will not be visible in any Application   until a session or profile update is received for that profile. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60; (optional): The earliest date when the points can be redeemed. The points are &#x60;active&#x60; from this date until the expiration date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;immediate&#x60;. Empty or missing values are considered &#x60;immediate&#x60;. - &#x60;expirydate&#x60; (optional): The latest date when the points can be redeemed. The points are &#x60;expired&#x60; after this date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;unlimited&#x60;. Empty or missing values are considered &#x60;unlimited&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="notificationsEnabled">Indicates whether the points import triggers notifications about its effects. For example, a notification is sent if the import upgrades a customer&#39;s tier or offsets their negative points balance.  This parameter is optional and defaults to &#x60;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportLoyaltyPointsAsyncWithHttpInfo (long loyaltyProgramId, bool? notificationsEnabled = default(bool?), string upFile = default(string));
        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): The code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  The start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: The last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A JSON object describing _custom_ giveaway attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated with the giveaway entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;provider\&quot;: \&quot;myPartnerCompany\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone setting of your choice. The values are converted to UTC internally by Talon.One.  **Note:**  - We recommend limiting your file size to 500MB. - You can import the same code multiple times. Duplicate codes are treated and distributed to customers as unique codes.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportPoolGiveawaysAsync (long poolId, string upFile = default(string));

        /// <summary>
        /// Import giveaway codes into a giveaway pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): The code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  The start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: The last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A JSON object describing _custom_ giveaway attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated with the giveaway entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;provider\&quot;: \&quot;myPartnerCompany\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone setting of your choice. The values are converted to UTC internally by Talon.One.  **Note:**  - We recommend limiting your file size to 500MB. - You can import the same code multiple times. Duplicate codes are treated and distributed to customers as unique codes.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportPoolGiveawaysAsyncWithHttpInfo (long poolId, string upFile = default(string));
        /// <summary>
        /// Import referrals
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A JSON object describing _custom_ referral attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the referral entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Important:** When you import a CSV file with referrals, a [customer profile](https://docs.talon.one/docs/dev/concepts/entities/customer-profiles) is **not** automatically created for each &#x60;advocateprofileintegrationid&#x60; column value. Use the [Update customer profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint or the [Update multiple customer profiles](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfilesV2) endpoint to create the customer profiles.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportReferralsAsync (long applicationId, long campaignId, string upFile = default(string));

        /// <summary>
        /// Import referrals
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A JSON object describing _custom_ referral attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the referral entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Important:** When you import a CSV file with referrals, a [customer profile](https://docs.talon.one/docs/dev/concepts/entities/customer-profiles) is **not** automatically created for each &#x60;advocateprofileintegrationid&#x60; column value. Use the [Update customer profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint or the [Update multiple customer profiles](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfilesV2) endpoint to create the customer profiles.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportReferralsAsyncWithHttpInfo (long applicationId, long campaignId, string upFile = default(string));
        /// <summary>
        /// Invite user from identity provider
        /// </summary>
        /// <remarks>
        /// [Invite a user](https://docs.talon.one/docs/product/account/account-settings/managing-users#inviting-a-user) from an external identity provider to Talon.One by sending an invitation to their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InviteUserExternalAsync (NewExternalInvitation body);

        /// <summary>
        /// Invite user from identity provider
        /// </summary>
        /// <remarks>
        /// [Invite a user](https://docs.talon.one/docs/product/account/account-settings/managing-users#inviting-a-user) from an external identity provider to Talon.One by sending an invitation to their email address. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InviteUserExternalAsyncWithHttpInfo (NewExternalInvitation body);
        /// <summary>
        /// List collections in account
        /// </summary>
        /// <remarks>
        /// List account-level collections in the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> ListAccountCollectionsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections in account
        /// </summary>
        /// <remarks>
        /// List account-level collections in the account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> ListAccountCollectionsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// List achievements
        /// </summary>
        /// <remarks>
        /// List all the achievements for a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="title">Filter by the display name for the achievement in the campaign manager.  **Note**: If no &#x60;title&#x60; is provided, all the achievements from the campaign are returned.  (optional)</param>
        /// <returns>Task of InlineResponse20050</returns>
        System.Threading.Tasks.Task<InlineResponse20050> ListAchievementsAsync (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string title = default(string));

        /// <summary>
        /// List achievements
        /// </summary>
        /// <remarks>
        /// List all the achievements for a specific campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="title">Filter by the display name for the achievement in the campaign manager.  **Note**: If no &#x60;title&#x60; is provided, all the achievements from the campaign are returned.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> ListAchievementsAsyncWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string title = default(string));
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20046</returns>
        System.Threading.Tasks.Task<InlineResponse20046> ListAllRolesV2Async ();

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// List all roles.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> ListAllRolesV2AsyncWithHttpInfo ();
        /// <summary>
        /// List campaign store budget limits
        /// </summary>
        /// <remarks>
        /// Return the store budget limits for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of InlineResponse20048</returns>
        System.Threading.Tasks.Task<InlineResponse20048> ListCampaignStoreBudgetLimitsAsync (long applicationId, long campaignId, string action = default(string), string period = default(string));

        /// <summary>
        /// List campaign store budget limits
        /// </summary>
        /// <remarks>
        /// Return the store budget limits for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> ListCampaignStoreBudgetLimitsAsyncWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string));
        /// <summary>
        /// List items in a catalog
        /// </summary>
        /// <remarks>
        /// Return a paginated list of cart items in the given catalog. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogId">The ID of the catalog. You can find the ID in the Campaign Manager in **Account** &gt; **Tools** &gt; **Cart item catalogs**.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="sku">Filter results by one or more SKUs. Must be exact match. (optional)</param>
        /// <param name="productNames">Filter results by one or more product names. Must be exact match. (optional)</param>
        /// <returns>Task of InlineResponse20037</returns>
        System.Threading.Tasks.Task<InlineResponse20037> ListCatalogItemsAsync (long catalogId, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?), List<string> sku = default(List<string>), List<string> productNames = default(List<string>));

        /// <summary>
        /// List items in a catalog
        /// </summary>
        /// <remarks>
        /// Return a paginated list of cart items in the given catalog. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogId">The ID of the catalog. You can find the ID in the Campaign Manager in **Account** &gt; **Tools** &gt; **Cart item catalogs**.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="sku">Filter results by one or more SKUs. Must be exact match. (optional)</param>
        /// <param name="productNames">Filter results by one or more product names. Must be exact match. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> ListCatalogItemsAsyncWithHttpInfo (long catalogId, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?), List<string> sku = default(List<string>), List<string> productNames = default(List<string>));
        /// <summary>
        /// List collections in campaign
        /// </summary>
        /// <remarks>
        /// List collections in a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> ListCollectionsAsync (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections in campaign
        /// </summary>
        /// <remarks>
        /// List collections in a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> ListCollectionsAsyncWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// List collections in Application
        /// </summary>
        /// <remarks>
        /// List campaign-level collections from all campaigns in a given Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> ListCollectionsInApplicationAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));

        /// <summary>
        /// List collections in Application
        /// </summary>
        /// <remarks>
        /// List campaign-level collections from all campaigns in a given Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> ListCollectionsInApplicationAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string));
        /// <summary>
        /// List stores
        /// </summary>
        /// <remarks>
        /// List all stores for a specific Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="name">The name of the store. (optional)</param>
        /// <param name="integrationId">The integration ID of the store. (optional)</param>
        /// <param name="query">Filter results by &#x60;name&#x60; or &#x60;integrationId&#x60;. (optional)</param>
        /// <returns>Task of InlineResponse20047</returns>
        System.Threading.Tasks.Task<InlineResponse20047> ListStoresAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), decimal? campaignId = default(decimal?), string name = default(string), string integrationId = default(string), string query = default(string));

        /// <summary>
        /// List stores
        /// </summary>
        /// <remarks>
        /// List all stores for a specific Application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="name">The name of the store. (optional)</param>
        /// <param name="integrationId">The integration ID of the store. (optional)</param>
        /// <param name="query">Filter results by &#x60;name&#x60; or &#x60;integrationId&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> ListStoresAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), decimal? campaignId = default(decimal?), string name = default(string), string integrationId = default(string), string query = default(string));
        /// <summary>
        /// Validate Okta API ownership
        /// </summary>
        /// <remarks>
        /// Validate the ownership of the API through a challenge-response mechanism.  This challenger endpoint is used by Okta to confirm that communication between Talon.One and Okta is correctly configured and accessible for provisioning and deprovisioning of Talon.One users, and that only Talon.One can receive and respond to events from Okta. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OktaEventHandlerChallengeAsync ();

        /// <summary>
        /// Validate Okta API ownership
        /// </summary>
        /// <remarks>
        /// Validate the ownership of the API through a challenge-response mechanism.  This challenger endpoint is used by Okta to confirm that communication between Talon.One and Okta is correctly configured and accessible for provisioning and deprovisioning of Talon.One users, and that only Talon.One can receive and respond to events from Okta. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OktaEventHandlerChallengeAsyncWithHttpInfo ();
        /// <summary>
        /// Deduct points from customer profile
        /// </summary>
        /// <remarks>
        /// Deduct points from the specified loyalty program and specified customer profile.  **Important:** - Only active points can be deducted. - Only pending points are rolled back when a session is cancelled or reopened.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveLoyaltyPointsAsync (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body);

        /// <summary>
        /// Deduct points from customer profile
        /// </summary>
        /// <remarks>
        /// Deduct points from the specified loyalty program and specified customer profile.  **Important:** - Only active points can be deducted. - Only pending points are rolled back when a session is cancelled or reopened.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body);
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of NewPassword</returns>
        System.Threading.Tasks.Task<NewPassword> ResetPasswordAsync (NewPassword body);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NewPassword)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewPassword>> ResetPasswordAsyncWithHttpInfo (NewPassword body);
        /// <summary>
        /// Create SCIM group
        /// </summary>
        /// <remarks>
        /// Create a new Talon.One group using the SCIM Group provisioning protocol with an identity provider, for example, Microsoft Entra ID, and assign members from the payload to the new group. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> ScimCreateGroupAsync (ScimBaseGroup body);

        /// <summary>
        /// Create SCIM group
        /// </summary>
        /// <remarks>
        /// Create a new Talon.One group using the SCIM Group provisioning protocol with an identity provider, for example, Microsoft Entra ID, and assign members from the payload to the new group. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> ScimCreateGroupAsyncWithHttpInfo (ScimBaseGroup body);
        /// <summary>
        /// Create SCIM user
        /// </summary>
        /// <remarks>
        /// Create a new Talon.One user using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ScimUser</returns>
        System.Threading.Tasks.Task<ScimUser> ScimCreateUserAsync (ScimNewUser body);

        /// <summary>
        /// Create SCIM user
        /// </summary>
        /// <remarks>
        /// Create a new Talon.One user using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimUser>> ScimCreateUserAsyncWithHttpInfo (ScimNewUser body);
        /// <summary>
        /// Delete SCIM group
        /// </summary>
        /// <remarks>
        /// Delete a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScimDeleteGroupAsync (long groupId);

        /// <summary>
        /// Delete SCIM group
        /// </summary>
        /// <remarks>
        /// Delete a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScimDeleteGroupAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// Delete SCIM user
        /// </summary>
        /// <remarks>
        /// Delete a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScimDeleteUserAsync (long userId);

        /// <summary>
        /// Delete SCIM user
        /// </summary>
        /// <remarks>
        /// Delete a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScimDeleteUserAsyncWithHttpInfo (long userId);
        /// <summary>
        /// Get SCIM group
        /// </summary>
        /// <remarks>
        /// Retrieve data for a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> ScimGetGroupAsync (long groupId);

        /// <summary>
        /// Get SCIM group
        /// </summary>
        /// <remarks>
        /// Retrieve data for a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> ScimGetGroupAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// List SCIM groups
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of groups created using the SCIM protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ScimGroupsListResponse</returns>
        System.Threading.Tasks.Task<ScimGroupsListResponse> ScimGetGroupsAsync ();

        /// <summary>
        /// List SCIM groups
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of groups created using the SCIM protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ScimGroupsListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroupsListResponse>> ScimGetGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// List supported SCIM resource types
        /// </summary>
        /// <remarks>
        /// Retrieve a list of resource types supported by the SCIM provisioning protocol.  Resource types define the various kinds of resources that can be managed via the SCIM API, such as users, groups, or custom-defined resources. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ScimResourceTypesListResponse</returns>
        System.Threading.Tasks.Task<ScimResourceTypesListResponse> ScimGetResourceTypesAsync ();

        /// <summary>
        /// List supported SCIM resource types
        /// </summary>
        /// <remarks>
        /// Retrieve a list of resource types supported by the SCIM provisioning protocol.  Resource types define the various kinds of resources that can be managed via the SCIM API, such as users, groups, or custom-defined resources. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ScimResourceTypesListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimResourceTypesListResponse>> ScimGetResourceTypesAsyncWithHttpInfo ();
        /// <summary>
        /// List supported SCIM schemas
        /// </summary>
        /// <remarks>
        /// Retrieve a list of schemas supported by the SCIM provisioning protocol.  Schemas define the structure and attributes of the different resources that can be managed via the SCIM API, such as users, groups, and any custom-defined resources. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ScimSchemasListResponse</returns>
        System.Threading.Tasks.Task<ScimSchemasListResponse> ScimGetSchemasAsync ();

        /// <summary>
        /// List supported SCIM schemas
        /// </summary>
        /// <remarks>
        /// Retrieve a list of schemas supported by the SCIM provisioning protocol.  Schemas define the structure and attributes of the different resources that can be managed via the SCIM API, such as users, groups, and any custom-defined resources. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ScimSchemasListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimSchemasListResponse>> ScimGetSchemasAsyncWithHttpInfo ();
        /// <summary>
        /// Get SCIM service provider configuration
        /// </summary>
        /// <remarks>
        /// Retrieve the configuration settings of the SCIM service provider. It provides details about the features and capabilities supported by the SCIM API, such as the different operation settings. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ScimServiceProviderConfigResponse</returns>
        System.Threading.Tasks.Task<ScimServiceProviderConfigResponse> ScimGetServiceProviderConfigAsync ();

        /// <summary>
        /// Get SCIM service provider configuration
        /// </summary>
        /// <remarks>
        /// Retrieve the configuration settings of the SCIM service provider. It provides details about the features and capabilities supported by the SCIM API, such as the different operation settings. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ScimServiceProviderConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimServiceProviderConfigResponse>> ScimGetServiceProviderConfigAsyncWithHttpInfo ();
        /// <summary>
        /// Get SCIM user
        /// </summary>
        /// <remarks>
        /// Retrieve data for a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ScimUser</returns>
        System.Threading.Tasks.Task<ScimUser> ScimGetUserAsync (long userId);

        /// <summary>
        /// Get SCIM user
        /// </summary>
        /// <remarks>
        /// Retrieve data for a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimUser>> ScimGetUserAsyncWithHttpInfo (long userId);
        /// <summary>
        /// List SCIM users
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of users that have been provisioned using the SCIM protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ScimUsersListResponse</returns>
        System.Threading.Tasks.Task<ScimUsersListResponse> ScimGetUsersAsync ();

        /// <summary>
        /// List SCIM users
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of users that have been provisioned using the SCIM protocol with an identity provider, for example, Microsoft Entra ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ScimUsersListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimUsersListResponse>> ScimGetUsersAsyncWithHttpInfo ();
        /// <summary>
        /// Update SCIM group attributes
        /// </summary>
        /// <remarks>
        /// Update certain attributes of a group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint allows for selective adding, removing, or replacing of specific group attributes while other attributes remain unchanged. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> ScimPatchGroupAsync (long groupId, ScimPatchRequest body);

        /// <summary>
        /// Update SCIM group attributes
        /// </summary>
        /// <remarks>
        /// Update certain attributes of a group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint allows for selective adding, removing, or replacing of specific group attributes while other attributes remain unchanged. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> ScimPatchGroupAsyncWithHttpInfo (long groupId, ScimPatchRequest body);
        /// <summary>
        /// Update SCIM user attributes
        /// </summary>
        /// <remarks>
        /// Update certain attributes of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint allows for selective adding, removing, or replacing specific attributes while leaving other attributes unchanged. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ScimUser</returns>
        System.Threading.Tasks.Task<ScimUser> ScimPatchUserAsync (long userId, ScimPatchRequest body);

        /// <summary>
        /// Update SCIM user attributes
        /// </summary>
        /// <remarks>
        /// Update certain attributes of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint allows for selective adding, removing, or replacing specific attributes while leaving other attributes unchanged. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimUser>> ScimPatchUserAsyncWithHttpInfo (long userId, ScimPatchRequest body);
        /// <summary>
        /// Update SCIM group
        /// </summary>
        /// <remarks>
        /// Update the details of a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint replaces all attributes of the given group with the attributes provided in the request payload. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> ScimReplaceGroupAttributesAsync (long groupId, ScimBaseGroup body);

        /// <summary>
        /// Update SCIM group
        /// </summary>
        /// <remarks>
        /// Update the details of a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint replaces all attributes of the given group with the attributes provided in the request payload. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> ScimReplaceGroupAttributesAsyncWithHttpInfo (long groupId, ScimBaseGroup body);
        /// <summary>
        /// Update SCIM user
        /// </summary>
        /// <remarks>
        /// Update the details of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint replaces all attributes of the specific user with the attributes provided in the request payload. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ScimUser</returns>
        System.Threading.Tasks.Task<ScimUser> ScimReplaceUserAttributesAsync (long userId, ScimNewUser body);

        /// <summary>
        /// Update SCIM user
        /// </summary>
        /// <remarks>
        /// Update the details of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint replaces all attributes of the specific user with the attributes provided in the request payload. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimUser>> ScimReplaceUserAttributesAsyncWithHttpInfo (long userId, ScimNewUser body);
        /// <summary>
        /// List coupons that match the given attributes (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in all the campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsync (long applicationId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in all the campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo (long applicationId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> SearchCouponsAdvancedWithoutTotalCountAsync (long applicationId, long campaignId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count)
        /// </summary>
        /// <remarks>
        /// List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo (long applicationId, long campaignId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// Get summary of campaign store budgets
        /// </summary>
        /// <remarks>
        /// Fetch a summary of all store budget information for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of InlineResponse20049</returns>
        System.Threading.Tasks.Task<InlineResponse20049> SummarizeCampaignStoreBudgetAsync (long applicationId, long campaignId);

        /// <summary>
        /// Get summary of campaign store budgets
        /// </summary>
        /// <remarks>
        /// Fetch a summary of all store budget information for a given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> SummarizeCampaignStoreBudgetAsyncWithHttpInfo (long applicationId, long campaignId);
        /// <summary>
        /// Transfer card data
        /// </summary>
        /// <remarks>
        /// Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TransferLoyaltyCardAsync (long loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body);

        /// <summary>
        /// Transfer card data
        /// </summary>
        /// <remarks>
        /// Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransferLoyaltyCardAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body);
        /// <summary>
        /// Update account-level collection
        /// </summary>
        /// <remarks>
        /// Edit the description of a given account-level collection and enable or disable the collection in the specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> UpdateAccountCollectionAsync (long collectionId, UpdateCollection body);

        /// <summary>
        /// Update account-level collection
        /// </summary>
        /// <remarks>
        /// Edit the description of a given account-level collection and enable or disable the collection in the specified Applications.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> UpdateAccountCollectionAsyncWithHttpInfo (long collectionId, UpdateCollection body);
        /// <summary>
        /// Update achievement
        /// </summary>
        /// <remarks>
        /// Update the details of a specific achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Achievement</returns>
        System.Threading.Tasks.Task<Achievement> UpdateAchievementAsync (long applicationId, long campaignId, long achievementId, UpdateAchievement body);

        /// <summary>
        /// Update achievement
        /// </summary>
        /// <remarks>
        /// Update the details of a specific achievement.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Achievement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Achievement>> UpdateAchievementAsyncWithHttpInfo (long applicationId, long campaignId, long achievementId, UpdateAchievement body);
        /// <summary>
        /// Update additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that cannot be changed is the &#x60;name&#x60; property (or **API name** in the Campaign Manager). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> UpdateAdditionalCostAsync (long additionalCostId, NewAdditionalCost body);

        /// <summary>
        /// Update additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that cannot be changed is the &#x60;name&#x60; property (or **API name** in the Campaign Manager). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> UpdateAdditionalCostAsyncWithHttpInfo (long additionalCostId, NewAdditionalCost body);
        /// <summary>
        /// Update custom attribute
        /// </summary>
        /// <remarks>
        /// Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> UpdateAttributeAsync (long attributeId, NewAttribute body);

        /// <summary>
        /// Update custom attribute
        /// </summary>
        /// <remarks>
        /// Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> UpdateAttributeAsyncWithHttpInfo (long attributeId, NewAttribute body);
        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.  **Important:** You cannot use this endpoint to update campaigns if [campaign staging and revisions](https://docs.talon.one/docs/product/applications/managing-general-settings#campaign-staging-and-revisions) is enabled for your Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> UpdateCampaignAsync (long applicationId, long campaignId, UpdateCampaign body);

        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// Update the given campaign.  **Important:** You cannot use this endpoint to update campaigns if [campaign staging and revisions](https://docs.talon.one/docs/product/applications/managing-general-settings#campaign-staging-and-revisions) is enabled for your Application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> UpdateCampaignAsyncWithHttpInfo (long applicationId, long campaignId, UpdateCampaign body);
        /// <summary>
        /// Update campaign-level collection&#39;s description
        /// </summary>
        /// <remarks>
        /// Edit the description of a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> UpdateCollectionAsync (long applicationId, long campaignId, long collectionId, UpdateCampaignCollection body);

        /// <summary>
        /// Update campaign-level collection&#39;s description
        /// </summary>
        /// <remarks>
        /// Edit the description of a given campaign-level collection.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> UpdateCollectionAsyncWithHttpInfo (long applicationId, long campaignId, long collectionId, UpdateCampaignCollection body);
        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt;, &lt;code&gt;expiryDate&lt;/code&gt;, and &lt;code&gt;recipientIntegrationId&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Task of Coupon</returns>
        System.Threading.Tasks.Task<Coupon> UpdateCouponAsync (long applicationId, long campaignId, string couponId, UpdateCoupon body);

        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt;, &lt;code&gt;expiryDate&lt;/code&gt;, and &lt;code&gt;recipientIntegrationId&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<Coupon>> UpdateCouponAsyncWithHttpInfo (long applicationId, long campaignId, string couponId, UpdateCoupon body);
        /// <summary>
        /// Update coupons
        /// </summary>
        /// <remarks>
        /// Update all coupons or a specific batch of coupons in the given campaign. You can find the &#x60;batchId&#x60; on the **Coupons** page of your campaign in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint time out after 30 minutes. If you hit a timeout, contact our support team.&lt;/li&gt;     &lt;li&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt; and &lt;code&gt;expiryDate&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCouponBatchAsync (long applicationId, long campaignId, UpdateCouponBatch body);

        /// <summary>
        /// Update coupons
        /// </summary>
        /// <remarks>
        /// Update all coupons or a specific batch of coupons in the given campaign. You can find the &#x60;batchId&#x60; on the **Coupons** page of your campaign in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint time out after 30 minutes. If you hit a timeout, contact our support team.&lt;/li&gt;     &lt;li&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt; and &lt;code&gt;expiryDate&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCouponBatchAsyncWithHttpInfo (long applicationId, long campaignId, UpdateCouponBatch body);
        /// <summary>
        /// Update loyalty card status
        /// </summary>
        /// <remarks>
        /// Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of LoyaltyCard</returns>
        System.Threading.Tasks.Task<LoyaltyCard> UpdateLoyaltyCardAsync (long loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body);

        /// <summary>
        /// Update loyalty card status
        /// </summary>
        /// <remarks>
        /// Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (LoyaltyCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyCard>> UpdateLoyaltyCardAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body);
        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Referral</returns>
        System.Threading.Tasks.Task<Referral> UpdateReferralAsync (long applicationId, long campaignId, string referralId, UpdateReferral body);

        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// Update the specified referral.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        System.Threading.Tasks.Task<ApiResponse<Referral>> UpdateReferralAsyncWithHttpInfo (long applicationId, long campaignId, string referralId, UpdateReferral body);
        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// Update a specific role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of RoleV2</returns>
        System.Threading.Tasks.Task<RoleV2> UpdateRoleV2Async (long roleId, RoleV2Base body);

        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// Update a specific role.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (RoleV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleV2>> UpdateRoleV2AsyncWithHttpInfo (long roleId, RoleV2Base body);
        /// <summary>
        /// Update store
        /// </summary>
        /// <remarks>
        /// Update store details for a specific store ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> UpdateStoreAsync (long applicationId, string storeId, NewStore body);

        /// <summary>
        /// Update store
        /// </summary>
        /// <remarks>
        /// Update store details for a specific store ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> UpdateStoreAsyncWithHttpInfo (long applicationId, string storeId, NewStore body);
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// Update the details of a specific user.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserAsync (long userId, UpdateUser body);

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// Update the details of a specific user.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserAsyncWithHttpInfo (long userId, UpdateUser body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApi : IManagementApiSync, IManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManagementApi : IManagementApi
    {
        private TalonOne.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementApi(String basePath)
        {
            this.Configuration = TalonOne.Client.Configuration.MergeConfigurations(
                TalonOne.Client.GlobalConfiguration.Instance,
                new TalonOne.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManagementApi(TalonOne.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TalonOne.Client.Configuration.MergeConfigurations(
                TalonOne.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TalonOne.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ManagementApi(TalonOne.Client.ISynchronousClient client,TalonOne.Client.IAsynchronousClient asyncClient, TalonOne.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TalonOne.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TalonOne.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TalonOne.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TalonOne.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Enable user by email address Enable a [disabled user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void ActivateUserByEmail (DeleteUserRequest body)
        {
             ActivateUserByEmailWithHttpInfo(body);
        }

        /// <summary>
        /// Enable user by email address Enable a [disabled user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> ActivateUserByEmailWithHttpInfo (DeleteUserRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ActivateUserByEmail");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/users/activate", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateUserByEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable user by email address Enable a [disabled user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateUserByEmailAsync (DeleteUserRequest body)
        {
             await ActivateUserByEmailAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Enable user by email address Enable a [disabled user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> ActivateUserByEmailAsyncWithHttpInfo (DeleteUserRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ActivateUserByEmail");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/users/activate", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateUserByEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add points to card Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void AddLoyaltyCardPoints (long loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body)
        {
             AddLoyaltyCardPointsWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);
        }

        /// <summary>
        /// Add points to card Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> AddLoyaltyCardPointsWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->AddLoyaltyCardPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->AddLoyaltyCardPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/add_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoyaltyCardPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add points to card Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLoyaltyCardPointsAsync (long loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body)
        {
             await AddLoyaltyCardPointsAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);

        }

        /// <summary>
        /// Add points to card Add points to the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> AddLoyaltyCardPointsAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, AddLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->AddLoyaltyCardPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->AddLoyaltyCardPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/add_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoyaltyCardPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add points to customer profile Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void AddLoyaltyPoints (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body)
        {
             AddLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId, body);
        }

        /// <summary>
        /// Add points to customer profile Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> AddLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->AddLoyaltyPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/add_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add points to customer profile Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLoyaltyPointsAsync (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body)
        {
             await AddLoyaltyPointsAsyncWithHttpInfo(loyaltyProgramId, integrationId, body);

        }

        /// <summary>
        /// Add points to customer profile Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> AddLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId, AddLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->AddLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->AddLoyaltyPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/add_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy the campaign into the specified Application Copy the campaign into all specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 CopyCampaignToApplications (long applicationId, long campaignId, CampaignCopy body)
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = CopyCampaignToApplicationsWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy the campaign into the specified Application Copy the campaign into all specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2008 > CopyCampaignToApplicationsWithHttpInfo (long applicationId, long campaignId, CampaignCopy body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CopyCampaignToApplications");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2008 >("/v1/applications/{applicationId}/campaigns/{campaignId}/copy", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCampaignToApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy the campaign into the specified Application Copy the campaign into all specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> CopyCampaignToApplicationsAsync (long applicationId, long campaignId, CampaignCopy body)
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = await CopyCampaignToApplicationsAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy the campaign into the specified Application Copy the campaign into all specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2008>> CopyCampaignToApplicationsAsyncWithHttpInfo (long applicationId, long campaignId, CampaignCopy body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CopyCampaignToApplications");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2008>("/v1/applications/{applicationId}/campaigns/{campaignId}/copy", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCampaignToApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create account-level collection Create an account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        public Collection CreateAccountCollection (NewCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = CreateAccountCollectionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create account-level collection Create an account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > CreateAccountCollectionWithHttpInfo (NewCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAccountCollection");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Collection >("/v1/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create account-level collection Create an account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> CreateAccountCollectionAsync (NewCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await CreateAccountCollectionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create account-level collection Create an account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> CreateAccountCollectionAsyncWithHttpInfo (NewCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAccountCollection");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Collection>("/v1/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create achievement Create a new achievement in a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Achievement</returns>
        public Achievement CreateAchievement (long applicationId, long campaignId, CreateAchievement body)
        {
             TalonOne.Client.ApiResponse<Achievement> localVarResponse = CreateAchievementWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create achievement Create a new achievement in a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Achievement</returns>
        public TalonOne.Client.ApiResponse< Achievement > CreateAchievementWithHttpInfo (long applicationId, long campaignId, CreateAchievement body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAchievement");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Achievement >("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAchievement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create achievement Create a new achievement in a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Achievement</returns>
        public async System.Threading.Tasks.Task<Achievement> CreateAchievementAsync (long applicationId, long campaignId, CreateAchievement body)
        {
             TalonOne.Client.ApiResponse<Achievement> localVarResponse = await CreateAchievementAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create achievement Create a new achievement in a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Achievement)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Achievement>> CreateAchievementAsyncWithHttpInfo (long applicationId, long campaignId, CreateAchievement body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAchievement");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Achievement>("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAchievement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create additional cost Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost CreateAdditionalCost (NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = CreateAdditionalCostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create additional cost Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public TalonOne.Client.ApiResponse< AccountAdditionalCost > CreateAdditionalCostWithHttpInfo (NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAdditionalCost");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AccountAdditionalCost >("/v1/additional_costs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create additional cost Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> CreateAdditionalCostAsync (NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = await CreateAdditionalCostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create additional cost Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAdditionalCost>> CreateAdditionalCostAsyncWithHttpInfo (NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAdditionalCost");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountAdditionalCost>("/v1/additional_costs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Attribute</returns>
        public Attribute CreateAttribute (NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = CreateAttributeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Attribute</returns>
        public TalonOne.Client.ApiResponse< Attribute > CreateAttributeWithHttpInfo (NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAttribute");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Attribute >("/v1/attributes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> CreateAttributeAsync (NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = await CreateAttributeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create custom attribute Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Attribute>> CreateAttributeAsyncWithHttpInfo (NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateAttribute");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Attribute>("/v1/attributes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create loyalty cards Create a batch of loyalty cards in a specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types).  Customers can use loyalty cards to collect and spend loyalty points.  **Important:**  - The specified card-based loyalty program must have a defined card code format that is used to generate the loyalty card codes. - Trying to create more than 20,000 loyalty cards in a single request returns an error message with a &#x60;400&#x60; status code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>LoyaltyCardBatchResponse</returns>
        public LoyaltyCardBatchResponse CreateBatchLoyaltyCards (long loyaltyProgramId, LoyaltyCardBatch body)
        {
             TalonOne.Client.ApiResponse<LoyaltyCardBatchResponse> localVarResponse = CreateBatchLoyaltyCardsWithHttpInfo(loyaltyProgramId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create loyalty cards Create a batch of loyalty cards in a specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types).  Customers can use loyalty cards to collect and spend loyalty points.  **Important:**  - The specified card-based loyalty program must have a defined card code format that is used to generate the loyalty card codes. - Trying to create more than 20,000 loyalty cards in a single request returns an error message with a &#x60;400&#x60; status code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of LoyaltyCardBatchResponse</returns>
        public TalonOne.Client.ApiResponse< LoyaltyCardBatchResponse > CreateBatchLoyaltyCardsWithHttpInfo (long loyaltyProgramId, LoyaltyCardBatch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateBatchLoyaltyCards");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< LoyaltyCardBatchResponse >("/v1/loyalty_programs/{loyaltyProgramId}/cards/batch", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatchLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create loyalty cards Create a batch of loyalty cards in a specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types).  Customers can use loyalty cards to collect and spend loyalty points.  **Important:**  - The specified card-based loyalty program must have a defined card code format that is used to generate the loyalty card codes. - Trying to create more than 20,000 loyalty cards in a single request returns an error message with a &#x60;400&#x60; status code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of LoyaltyCardBatchResponse</returns>
        public async System.Threading.Tasks.Task<LoyaltyCardBatchResponse> CreateBatchLoyaltyCardsAsync (long loyaltyProgramId, LoyaltyCardBatch body)
        {
             TalonOne.Client.ApiResponse<LoyaltyCardBatchResponse> localVarResponse = await CreateBatchLoyaltyCardsAsyncWithHttpInfo(loyaltyProgramId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create loyalty cards Create a batch of loyalty cards in a specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types).  Customers can use loyalty cards to collect and spend loyalty points.  **Important:**  - The specified card-based loyalty program must have a defined card code format that is used to generate the loyalty card codes. - Trying to create more than 20,000 loyalty cards in a single request returns an error message with a &#x60;400&#x60; status code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (LoyaltyCardBatchResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyCardBatchResponse>> CreateBatchLoyaltyCardsAsyncWithHttpInfo (long loyaltyProgramId, LoyaltyCardBatch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateBatchLoyaltyCards");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltyCardBatchResponse>("/v1/loyalty_programs/{loyaltyProgramId}/cards/batch", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatchLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create campaign from campaign template Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>CreateTemplateCampaignResponse</returns>
        public CreateTemplateCampaignResponse CreateCampaignFromTemplate (long applicationId, CreateTemplateCampaign body)
        {
             TalonOne.Client.ApiResponse<CreateTemplateCampaignResponse> localVarResponse = CreateCampaignFromTemplateWithHttpInfo(applicationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create campaign from campaign template Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of CreateTemplateCampaignResponse</returns>
        public TalonOne.Client.ApiResponse< CreateTemplateCampaignResponse > CreateCampaignFromTemplateWithHttpInfo (long applicationId, CreateTemplateCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCampaignFromTemplate");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateTemplateCampaignResponse >("/v1/applications/{applicationId}/create_campaign_from_template", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaignFromTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create campaign from campaign template Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of CreateTemplateCampaignResponse</returns>
        public async System.Threading.Tasks.Task<CreateTemplateCampaignResponse> CreateCampaignFromTemplateAsync (long applicationId, CreateTemplateCampaign body)
        {
             TalonOne.Client.ApiResponse<CreateTemplateCampaignResponse> localVarResponse = await CreateCampaignFromTemplateAsyncWithHttpInfo(applicationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create campaign from campaign template Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (CreateTemplateCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CreateTemplateCampaignResponse>> CreateCampaignFromTemplateAsyncWithHttpInfo (long applicationId, CreateTemplateCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCampaignFromTemplate");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTemplateCampaignResponse>("/v1/applications/{applicationId}/create_campaign_from_template", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaignFromTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create campaign store budget Create a new store budget for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void CreateCampaignStoreBudget (long applicationId, long campaignId, NewCampaignStoreBudget body)
        {
             CreateCampaignStoreBudgetWithHttpInfo(applicationId, campaignId, body);
        }

        /// <summary>
        /// Create campaign store budget Create a new store budget for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> CreateCampaignStoreBudgetWithHttpInfo (long applicationId, long campaignId, NewCampaignStoreBudget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCampaignStoreBudget");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaignStoreBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create campaign store budget Create a new store budget for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateCampaignStoreBudgetAsync (long applicationId, long campaignId, NewCampaignStoreBudget body)
        {
             await CreateCampaignStoreBudgetAsyncWithHttpInfo(applicationId, campaignId, body);

        }

        /// <summary>
        /// Create campaign store budget Create a new store budget for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> CreateCampaignStoreBudgetAsyncWithHttpInfo (long applicationId, long campaignId, NewCampaignStoreBudget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCampaignStoreBudget");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaignStoreBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create campaign-level collection Create a campaign-level collection in a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        public Collection CreateCollection (long applicationId, long campaignId, NewCampaignCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = CreateCollectionWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create campaign-level collection Create a campaign-level collection in a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > CreateCollectionWithHttpInfo (long applicationId, long campaignId, NewCampaignCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCollection");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Collection >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create campaign-level collection Create a campaign-level collection in a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> CreateCollectionAsync (long applicationId, long campaignId, NewCampaignCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await CreateCollectionAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create campaign-level collection Create a campaign-level collection in a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> CreateCollectionAsyncWithHttpInfo (long applicationId, long campaignId, NewCampaignCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCollection");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Collection>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 CreateCoupons (long applicationId, long campaignId, NewCoupons body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20010> localVarResponse = CreateCouponsWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20010 > CreateCouponsWithHttpInfo (long applicationId, long campaignId, NewCoupons body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCoupons");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20010 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> CreateCouponsAsync (long applicationId, long campaignId, NewCoupons body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20010> localVarResponse = await CreateCouponsAsyncWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20010>> CreateCouponsAsyncWithHttpInfo (long applicationId, long campaignId, NewCoupons body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCoupons");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20010>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons asynchronously Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>AsyncCouponCreationResponse</returns>
        public AsyncCouponCreationResponse CreateCouponsAsync (long applicationId, long campaignId, NewCouponCreationJob body)
        {
             TalonOne.Client.ApiResponse<AsyncCouponCreationResponse> localVarResponse = CreateCouponsAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupons asynchronously Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AsyncCouponCreationResponse</returns>
        public TalonOne.Client.ApiResponse< AsyncCouponCreationResponse > CreateCouponsAsyncWithHttpInfo (long applicationId, long campaignId, NewCouponCreationJob body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsAsync");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AsyncCouponCreationResponse >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_async", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons asynchronously Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of AsyncCouponCreationResponse</returns>
        public async System.Threading.Tasks.Task<AsyncCouponCreationResponse> CreateCouponsAsyncAsync (long applicationId, long campaignId, NewCouponCreationJob body)
        {
             TalonOne.Client.ApiResponse<AsyncCouponCreationResponse> localVarResponse = await CreateCouponsAsyncAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupons asynchronously Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AsyncCouponCreationResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AsyncCouponCreationResponse>> CreateCouponsAsyncAsyncWithHttpInfo (long applicationId, long campaignId, NewCouponCreationJob body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsAsync");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AsyncCouponCreationResponse>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_async", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a coupon deletion job This endpoint handles creating a job to delete coupons asynchronously. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>AsyncCouponDeletionJobResponse</returns>
        public AsyncCouponDeletionJobResponse CreateCouponsDeletionJob (long applicationId, long campaignId, NewCouponDeletionJob body)
        {
             TalonOne.Client.ApiResponse<AsyncCouponDeletionJobResponse> localVarResponse = CreateCouponsDeletionJobWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a coupon deletion job This endpoint handles creating a job to delete coupons asynchronously. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AsyncCouponDeletionJobResponse</returns>
        public TalonOne.Client.ApiResponse< AsyncCouponDeletionJobResponse > CreateCouponsDeletionJobWithHttpInfo (long applicationId, long campaignId, NewCouponDeletionJob body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsDeletionJob");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AsyncCouponDeletionJobResponse >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_deletion_jobs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsDeletionJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a coupon deletion job This endpoint handles creating a job to delete coupons asynchronously. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of AsyncCouponDeletionJobResponse</returns>
        public async System.Threading.Tasks.Task<AsyncCouponDeletionJobResponse> CreateCouponsDeletionJobAsync (long applicationId, long campaignId, NewCouponDeletionJob body)
        {
             TalonOne.Client.ApiResponse<AsyncCouponDeletionJobResponse> localVarResponse = await CreateCouponsDeletionJobAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a coupon deletion job This endpoint handles creating a job to delete coupons asynchronously. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AsyncCouponDeletionJobResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AsyncCouponDeletionJobResponse>> CreateCouponsDeletionJobAsyncWithHttpInfo (long applicationId, long campaignId, NewCouponDeletionJob body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsDeletionJob");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AsyncCouponDeletionJobResponse>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_deletion_jobs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsDeletionJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 CreateCouponsForMultipleRecipients (long applicationId, long campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20010> localVarResponse = CreateCouponsForMultipleRecipientsWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20010 > CreateCouponsForMultipleRecipientsWithHttpInfo (long applicationId, long campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsForMultipleRecipients");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20010 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_with_recipients", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsForMultipleRecipients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> CreateCouponsForMultipleRecipientsAsync (long applicationId, long campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20010> localVarResponse = await CreateCouponsForMultipleRecipientsAsyncWithHttpInfo(applicationId, campaignId, body, silent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to some pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="silent">Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the performance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles.  (optional, default to &quot;yes&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20010>> CreateCouponsForMultipleRecipientsAsyncWithHttpInfo (long applicationId, long campaignId, NewCouponsForMultipleRecipients body, string silent = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateCouponsForMultipleRecipients");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (silent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "silent", silent));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20010>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_with_recipients", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCouponsForMultipleRecipients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resend invitation email Resend an email invitation to an existing user.  **Note:** The invitation token is valid for 24 hours after the email has been sent. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>NewInviteEmail</returns>
        public NewInviteEmail CreateInviteEmail (NewInviteEmail body)
        {
             TalonOne.Client.ApiResponse<NewInviteEmail> localVarResponse = CreateInviteEmailWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resend invitation email Resend an email invitation to an existing user.  **Note:** The invitation token is valid for 24 hours after the email has been sent. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NewInviteEmail</returns>
        public TalonOne.Client.ApiResponse< NewInviteEmail > CreateInviteEmailWithHttpInfo (NewInviteEmail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateInviteEmail");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< NewInviteEmail >("/v1/invite_emails", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInviteEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resend invitation email Resend an email invitation to an existing user.  **Note:** The invitation token is valid for 24 hours after the email has been sent. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of NewInviteEmail</returns>
        public async System.Threading.Tasks.Task<NewInviteEmail> CreateInviteEmailAsync (NewInviteEmail body)
        {
             TalonOne.Client.ApiResponse<NewInviteEmail> localVarResponse = await CreateInviteEmailAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resend invitation email Resend an email invitation to an existing user.  **Note:** The invitation token is valid for 24 hours after the email has been sent. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NewInviteEmail)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<NewInviteEmail>> CreateInviteEmailAsyncWithHttpInfo (NewInviteEmail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateInviteEmail");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NewInviteEmail>("/v1/invite_emails", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInviteEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite user Create a new user in the account and send an invitation to their email address.  **Note**: The invitation token is valid for 24 hours after the email has been sent. You can resend an invitation to a user with the [Resend invitation email](https://docs.talon.one/management-api#tag/Accounts-and-users/operation/createInviteEmail) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>User</returns>
        public User CreateInviteV2 (NewInvitation body)
        {
             TalonOne.Client.ApiResponse<User> localVarResponse = CreateInviteV2WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invite user Create a new user in the account and send an invitation to their email address.  **Note**: The invitation token is valid for 24 hours after the email has been sent. You can resend an invitation to a user with the [Resend invitation email](https://docs.talon.one/management-api#tag/Accounts-and-users/operation/createInviteEmail) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of User</returns>
        public TalonOne.Client.ApiResponse< User > CreateInviteV2WithHttpInfo (NewInvitation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateInviteV2");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< User >("/v2/invites", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInviteV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite user Create a new user in the account and send an invitation to their email address.  **Note**: The invitation token is valid for 24 hours after the email has been sent. You can resend an invitation to a user with the [Resend invitation email](https://docs.talon.one/management-api#tag/Accounts-and-users/operation/createInviteEmail) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateInviteV2Async (NewInvitation body)
        {
             TalonOne.Client.ApiResponse<User> localVarResponse = await CreateInviteV2AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invite user Create a new user in the account and send an invitation to their email address.  **Note**: The invitation token is valid for 24 hours after the email has been sent. You can resend an invitation to a user with the [Resend invitation email](https://docs.talon.one/management-api#tag/Accounts-and-users/operation/createInviteEmail) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<User>> CreateInviteV2AsyncWithHttpInfo (NewInvitation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateInviteV2");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/v2/invites", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInviteV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>NewPasswordEmail</returns>
        public NewPasswordEmail CreatePasswordRecoveryEmail (NewPasswordEmail body)
        {
             TalonOne.Client.ApiResponse<NewPasswordEmail> localVarResponse = CreatePasswordRecoveryEmailWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NewPasswordEmail</returns>
        public TalonOne.Client.ApiResponse< NewPasswordEmail > CreatePasswordRecoveryEmailWithHttpInfo (NewPasswordEmail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreatePasswordRecoveryEmail");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< NewPasswordEmail >("/v1/password_recovery_emails", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePasswordRecoveryEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of NewPasswordEmail</returns>
        public async System.Threading.Tasks.Task<NewPasswordEmail> CreatePasswordRecoveryEmailAsync (NewPasswordEmail body)
        {
             TalonOne.Client.ApiResponse<NewPasswordEmail> localVarResponse = await CreatePasswordRecoveryEmailAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request a password reset Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NewPasswordEmail)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<NewPasswordEmail>> CreatePasswordRecoveryEmailAsyncWithHttpInfo (NewPasswordEmail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreatePasswordRecoveryEmail");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NewPasswordEmail>("/v1/password_recovery_emails", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePasswordRecoveryEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Session</returns>
        public Session CreateSession (LoginParams body)
        {
             TalonOne.Client.ApiResponse<Session> localVarResponse = CreateSessionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Session</returns>
        public TalonOne.Client.ApiResponse< Session > CreateSessionWithHttpInfo (LoginParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateSession");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Session >("/v1/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of Session</returns>
        public async System.Threading.Tasks.Task<Session> CreateSessionAsync (LoginParams body)
        {
             TalonOne.Client.ApiResponse<Session> localVarResponse = await CreateSessionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create session Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Session)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Session>> CreateSessionAsyncWithHttpInfo (LoginParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateSession");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Session>("/v1/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create store Create a new store in a specific Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Store</returns>
        public Store CreateStore (long applicationId, NewStore body)
        {
             TalonOne.Client.ApiResponse<Store> localVarResponse = CreateStoreWithHttpInfo(applicationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create store Create a new store in a specific Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Store</returns>
        public TalonOne.Client.ApiResponse< Store > CreateStoreWithHttpInfo (long applicationId, NewStore body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateStore");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Store >("/v1/applications/{applicationId}/stores", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create store Create a new store in a specific Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> CreateStoreAsync (long applicationId, NewStore body)
        {
             TalonOne.Client.ApiResponse<Store> localVarResponse = await CreateStoreAsyncWithHttpInfo(applicationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create store Create a new store in a specific Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Store>> CreateStoreAsyncWithHttpInfo (long applicationId, NewStore body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->CreateStore");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Store>("/v1/applications/{applicationId}/stores", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable user by email address [Disable a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void DeactivateUserByEmail (DeleteUserRequest body)
        {
             DeactivateUserByEmailWithHttpInfo(body);
        }

        /// <summary>
        /// Disable user by email address [Disable a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeactivateUserByEmailWithHttpInfo (DeleteUserRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->DeactivateUserByEmail");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/users/deactivate", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateUserByEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable user by email address [Disable a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateUserByEmailAsync (DeleteUserRequest body)
        {
             await DeactivateUserByEmailAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Disable user by email address [Disable a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#disabling-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeactivateUserByEmailAsyncWithHttpInfo (DeleteUserRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->DeactivateUserByEmail");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/users/deactivate", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateUserByEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deduct points from card Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void DeductLoyaltyCardPoints (long loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body)
        {
             DeductLoyaltyCardPointsWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);
        }

        /// <summary>
        /// Deduct points from card Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeductLoyaltyCardPointsWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->DeductLoyaltyCardPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->DeductLoyaltyCardPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/deduct_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeductLoyaltyCardPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deduct points from card Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeductLoyaltyCardPointsAsync (long loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body)
        {
             await DeductLoyaltyCardPointsAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);

        }

        /// <summary>
        /// Deduct points from card Deduct points from the given loyalty card in the specified card-based loyalty program. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeductLoyaltyCardPointsAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DeductLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->DeductLoyaltyCardPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->DeductLoyaltyCardPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/deduct_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeductLoyaltyCardPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete account-level collection Delete a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns></returns>
        public void DeleteAccountCollection (long collectionId)
        {
             DeleteAccountCollectionWithHttpInfo(collectionId);
        }

        /// <summary>
        /// Delete account-level collection Delete a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteAccountCollectionWithHttpInfo (long collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete account-level collection Delete a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountCollectionAsync (long collectionId)
        {
             await DeleteAccountCollectionAsyncWithHttpInfo(collectionId);

        }

        /// <summary>
        /// Delete account-level collection Delete a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteAccountCollectionAsyncWithHttpInfo (long collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete achievement Delete the specified achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns></returns>
        public void DeleteAchievement (long applicationId, long campaignId, long achievementId)
        {
             DeleteAchievementWithHttpInfo(applicationId, campaignId, achievementId);
        }

        /// <summary>
        /// Delete achievement Delete the specified achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteAchievementWithHttpInfo (long applicationId, long campaignId, long achievementId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("achievementId", TalonOne.Client.ClientUtils.ParameterToString(achievementId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements/{achievementId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAchievement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete achievement Delete the specified achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAchievementAsync (long applicationId, long campaignId, long achievementId)
        {
             await DeleteAchievementAsyncWithHttpInfo(applicationId, campaignId, achievementId);

        }

        /// <summary>
        /// Delete achievement Delete the specified achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteAchievementAsyncWithHttpInfo (long applicationId, long campaignId, long achievementId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("achievementId", TalonOne.Client.ClientUtils.ParameterToString(achievementId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements/{achievementId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAchievement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns></returns>
        public void DeleteCampaign (long applicationId, long campaignId)
        {
             DeleteCampaignWithHttpInfo(applicationId, campaignId);
        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCampaignWithHttpInfo (long applicationId, long campaignId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCampaignAsync (long applicationId, long campaignId)
        {
             await DeleteCampaignAsyncWithHttpInfo(applicationId, campaignId);

        }

        /// <summary>
        /// Delete campaign Delete the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCampaignAsyncWithHttpInfo (long applicationId, long campaignId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete campaign store budgets Delete the store budgets for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns></returns>
        public void DeleteCampaignStoreBudgets (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {
             DeleteCampaignStoreBudgetsWithHttpInfo(applicationId, campaignId, action, period);
        }

        /// <summary>
        /// Delete campaign store budgets Delete the store budgets for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCampaignStoreBudgetsWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCampaignStoreBudgets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete campaign store budgets Delete the store budgets for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCampaignStoreBudgetsAsync (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {
             await DeleteCampaignStoreBudgetsAsyncWithHttpInfo(applicationId, campaignId, action, period);

        }

        /// <summary>
        /// Delete campaign store budgets Delete the store budgets for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCampaignStoreBudgetsAsyncWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCampaignStoreBudgets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete campaign-level collection Delete a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns></returns>
        public void DeleteCollection (long applicationId, long campaignId, long collectionId)
        {
             DeleteCollectionWithHttpInfo(applicationId, campaignId, collectionId);
        }

        /// <summary>
        /// Delete campaign-level collection Delete a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCollectionWithHttpInfo (long applicationId, long campaignId, long collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete campaign-level collection Delete a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCollectionAsync (long applicationId, long campaignId, long collectionId)
        {
             await DeleteCollectionAsyncWithHttpInfo(applicationId, campaignId, collectionId);

        }

        /// <summary>
        /// Delete campaign-level collection Delete a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCollectionAsyncWithHttpInfo (long applicationId, long campaignId, long collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns></returns>
        public void DeleteCoupon (long applicationId, long campaignId, string couponId)
        {
             DeleteCouponWithHttpInfo(applicationId, campaignId, couponId);
        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCouponWithHttpInfo (long applicationId, long campaignId, string couponId)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->DeleteCoupon");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponAsync (long applicationId, long campaignId, string couponId)
        {
             await DeleteCouponAsyncWithHttpInfo(applicationId, campaignId, couponId);

        }

        /// <summary>
        /// Delete coupon Delete the specified coupon.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCouponAsyncWithHttpInfo (long applicationId, long campaignId, string couponId)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->DeleteCoupon");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteCoupons (long applicationId, long campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
             DeleteCouponsWithHttpInfo(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);
        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteCouponsWithHttpInfo (long applicationId, long campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (startsAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsAfter", startsAfter));
            }
            if (startsBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsBefore", startsBefore));
            }
            if (expiresAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresAfter", expiresAfter));
            }
            if (expiresBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresBefore", expiresBefore));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponsAsync (long applicationId, long campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
             await DeleteCouponsAsyncWithHttpInfo(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);

        }

        /// <summary>
        /// Delete coupons Deletes all the coupons matching the specified criteria.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field.  (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteCouponsAsyncWithHttpInfo (long applicationId, long campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (startsAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsAfter", startsAfter));
            }
            if (startsBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsBefore", startsBefore));
            }
            if (expiresAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresAfter", expiresAfter));
            }
            if (expiresBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresBefore", expiresBefore));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete loyalty card Delete the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns></returns>
        public void DeleteLoyaltyCard (long loyaltyProgramId, string loyaltyCardId)
        {
             DeleteLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId);
        }

        /// <summary>
        /// Delete loyalty card Delete the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteLoyaltyCardWithHttpInfo (long loyaltyProgramId, string loyaltyCardId)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->DeleteLoyaltyCard");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete loyalty card Delete the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLoyaltyCardAsync (long loyaltyProgramId, string loyaltyCardId)
        {
             await DeleteLoyaltyCardAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId);

        }

        /// <summary>
        /// Delete loyalty card Delete the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteLoyaltyCardAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->DeleteLoyaltyCard");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns></returns>
        public void DeleteReferral (long applicationId, long campaignId, string referralId)
        {
             DeleteReferralWithHttpInfo(applicationId, campaignId, referralId);
        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteReferralWithHttpInfo (long applicationId, long campaignId, string referralId)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->DeleteReferral");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReferralAsync (long applicationId, long campaignId, string referralId)
        {
             await DeleteReferralAsyncWithHttpInfo(applicationId, campaignId, referralId);

        }

        /// <summary>
        /// Delete referral Delete the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteReferralAsyncWithHttpInfo (long applicationId, long campaignId, string referralId)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->DeleteReferral");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete store Delete the specified store.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns></returns>
        public void DeleteStore (long applicationId, string storeId)
        {
             DeleteStoreWithHttpInfo(applicationId, storeId);
        }

        /// <summary>
        /// Delete store Delete the specified store.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteStoreWithHttpInfo (long applicationId, string storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'storeId' when calling ManagementApi->DeleteStore");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("storeId", TalonOne.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/stores/{storeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete store Delete the specified store.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStoreAsync (long applicationId, string storeId)
        {
             await DeleteStoreAsyncWithHttpInfo(applicationId, storeId);

        }

        /// <summary>
        /// Delete store Delete the specified store.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteStoreAsyncWithHttpInfo (long applicationId, string storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'storeId' when calling ManagementApi->DeleteStore");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("storeId", TalonOne.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/stores/{storeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete user Delete a specific user.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        public void DeleteUser (long userId)
        {
             DeleteUserWithHttpInfo(userId);
        }

        /// <summary>
        /// Delete user Delete a specific user.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteUserWithHttpInfo (long userId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete user Delete a specific user.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (long userId)
        {
             await DeleteUserAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Delete user Delete a specific user.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (long userId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete user by email address [Delete a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#deleting-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void DeleteUserByEmail (DeleteUserRequest body)
        {
             DeleteUserByEmailWithHttpInfo(body);
        }

        /// <summary>
        /// Delete user by email address [Delete a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#deleting-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DeleteUserByEmailWithHttpInfo (DeleteUserRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->DeleteUserByEmail");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/users/delete", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserByEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete user by email address [Delete a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#deleting-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserByEmailAsync (DeleteUserRequest body)
        {
             await DeleteUserByEmailAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Delete user by email address [Delete a specific user](https://docs.talon.one/docs/product/account/account-settings/managing-users#deleting-a-user) by their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DeleteUserByEmailAsyncWithHttpInfo (DeleteUserRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->DeleteUserByEmail");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/users/delete", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserByEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DestroySession ()
        {
             DestroySessionWithHttpInfo();
        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DestroySessionWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroySessionAsync ()
        {
             await DestroySessionAsyncWithHttpInfo();

        }

        /// <summary>
        /// Destroy session Destroys the session.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DestroySessionAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disconnect stores Disconnect the stores linked to a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns></returns>
        public void DisconnectCampaignStores (long applicationId, long campaignId)
        {
             DisconnectCampaignStoresWithHttpInfo(applicationId, campaignId);
        }

        /// <summary>
        /// Disconnect stores Disconnect the stores linked to a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> DisconnectCampaignStoresWithHttpInfo (long applicationId, long campaignId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisconnectCampaignStores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disconnect stores Disconnect the stores linked to a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisconnectCampaignStoresAsync (long applicationId, long campaignId)
        {
             await DisconnectCampaignStoresAsyncWithHttpInfo(applicationId, campaignId);

        }

        /// <summary>
        /// Disconnect stores Disconnect the stores linked to a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> DisconnectCampaignStoresAsyncWithHttpInfo (long applicationId, long campaignId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisconnectCampaignStores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export account-level collection&#39;s items Download a CSV file containing items from a given account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>string</returns>
        public string ExportAccountCollectionItems (long collectionId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportAccountCollectionItemsWithHttpInfo(collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export account-level collection&#39;s items Download a CSV file containing items from a given account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportAccountCollectionItemsWithHttpInfo (long collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/collections/{collectionId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAccountCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export account-level collection&#39;s items Download a CSV file containing items from a given account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportAccountCollectionItemsAsync (long collectionId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportAccountCollectionItemsAsyncWithHttpInfo(collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export account-level collection&#39;s items Download a CSV file containing items from a given account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportAccountCollectionItemsAsyncWithHttpInfo (long collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/collections/{collectionId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAccountCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export achievement customer data Download a CSV file containing a list of all the customers who have participated in and are currently participating in the given achievement.  The CSV file contains the following columns: - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile participating in the achievement. - &#x60;title&#x60;: The display name of the achievement in the Campaign Manager. - &#x60;target&#x60;: The required number of actions or the transactional milestone to complete the achievement. - &#x60;progress&#x60;: The current progress of the customer in the achievement. - &#x60;status&#x60;: The status of the achievement. Can be one of: [&#39;inprogress&#39;, &#39;completed&#39;, &#39;expired&#39;]. - &#x60;startDate&#x60;: The date on which the customer profile started the achievement in RFC3339. - &#x60;endDate&#x60;: The date on which the achievement ends and resets for the customer profile in RFC3339. - &#x60;completionDate&#x60;: The date on which the customer profile completed the achievement in RFC3339. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>string</returns>
        public string ExportAchievements (long applicationId, long campaignId, long achievementId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportAchievementsWithHttpInfo(applicationId, campaignId, achievementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export achievement customer data Download a CSV file containing a list of all the customers who have participated in and are currently participating in the given achievement.  The CSV file contains the following columns: - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile participating in the achievement. - &#x60;title&#x60;: The display name of the achievement in the Campaign Manager. - &#x60;target&#x60;: The required number of actions or the transactional milestone to complete the achievement. - &#x60;progress&#x60;: The current progress of the customer in the achievement. - &#x60;status&#x60;: The status of the achievement. Can be one of: [&#39;inprogress&#39;, &#39;completed&#39;, &#39;expired&#39;]. - &#x60;startDate&#x60;: The date on which the customer profile started the achievement in RFC3339. - &#x60;endDate&#x60;: The date on which the achievement ends and resets for the customer profile in RFC3339. - &#x60;completionDate&#x60;: The date on which the customer profile completed the achievement in RFC3339. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportAchievementsWithHttpInfo (long applicationId, long campaignId, long achievementId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("achievementId", TalonOne.Client.ClientUtils.ParameterToString(achievementId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements/{achievementId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAchievements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export achievement customer data Download a CSV file containing a list of all the customers who have participated in and are currently participating in the given achievement.  The CSV file contains the following columns: - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile participating in the achievement. - &#x60;title&#x60;: The display name of the achievement in the Campaign Manager. - &#x60;target&#x60;: The required number of actions or the transactional milestone to complete the achievement. - &#x60;progress&#x60;: The current progress of the customer in the achievement. - &#x60;status&#x60;: The status of the achievement. Can be one of: [&#39;inprogress&#39;, &#39;completed&#39;, &#39;expired&#39;]. - &#x60;startDate&#x60;: The date on which the customer profile started the achievement in RFC3339. - &#x60;endDate&#x60;: The date on which the achievement ends and resets for the customer profile in RFC3339. - &#x60;completionDate&#x60;: The date on which the customer profile completed the achievement in RFC3339. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportAchievementsAsync (long applicationId, long campaignId, long achievementId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportAchievementsAsyncWithHttpInfo(applicationId, campaignId, achievementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export achievement customer data Download a CSV file containing a list of all the customers who have participated in and are currently participating in the given achievement.  The CSV file contains the following columns: - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile participating in the achievement. - &#x60;title&#x60;: The display name of the achievement in the Campaign Manager. - &#x60;target&#x60;: The required number of actions or the transactional milestone to complete the achievement. - &#x60;progress&#x60;: The current progress of the customer in the achievement. - &#x60;status&#x60;: The status of the achievement. Can be one of: [&#39;inprogress&#39;, &#39;completed&#39;, &#39;expired&#39;]. - &#x60;startDate&#x60;: The date on which the customer profile started the achievement in RFC3339. - &#x60;endDate&#x60;: The date on which the achievement ends and resets for the customer profile in RFC3339. - &#x60;completionDate&#x60;: The date on which the customer profile completed the achievement in RFC3339. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportAchievementsAsyncWithHttpInfo (long applicationId, long campaignId, long achievementId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("achievementId", TalonOne.Client.ClientUtils.ParameterToString(achievementId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements/{achievementId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAchievements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export audience members Download a CSV file containing the integration IDs of the members of an audience.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The file contains the following column: - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <returns>string</returns>
        public string ExportAudiencesMemberships (long audienceId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportAudiencesMembershipsWithHttpInfo(audienceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export audience members Download a CSV file containing the integration IDs of the members of an audience.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The file contains the following column: - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportAudiencesMembershipsWithHttpInfo (long audienceId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("audienceId", TalonOne.Client.ClientUtils.ParameterToString(audienceId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/audiences/{audienceId}/memberships/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAudiencesMemberships", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export audience members Download a CSV file containing the integration IDs of the members of an audience.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The file contains the following column: - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportAudiencesMembershipsAsync (long audienceId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportAudiencesMembershipsAsyncWithHttpInfo(audienceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export audience members Download a CSV file containing the integration IDs of the members of an audience.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The file contains the following column: - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportAudiencesMembershipsAsyncWithHttpInfo (long audienceId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("audienceId", TalonOne.Client.ClientUtils.ParameterToString(audienceId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/audiences/{audienceId}/memberships/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAudiencesMemberships", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export campaign store budgets Download a CSV file containing the store budgets for a given campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>string</returns>
        public string ExportCampaignStoreBudgets (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCampaignStoreBudgetsWithHttpInfo(applicationId, campaignId, action, period);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export campaign store budgets Download a CSV file containing the store budgets for a given campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCampaignStoreBudgetsWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCampaignStoreBudgets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export campaign store budgets Download a CSV file containing the store budgets for a given campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCampaignStoreBudgetsAsync (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCampaignStoreBudgetsAsyncWithHttpInfo(applicationId, campaignId, action, period);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export campaign store budgets Download a CSV file containing the store budgets for a given campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCampaignStoreBudgetsAsyncWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCampaignStoreBudgets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export stores Download a CSV file containing the stores linked to a specific campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following column:  - &#x60;store_integration_id&#x60;: The identifier of the store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>string</returns>
        public string ExportCampaignStores (long applicationId, long campaignId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCampaignStoresWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export stores Download a CSV file containing the stores linked to a specific campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following column:  - &#x60;store_integration_id&#x60;: The identifier of the store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCampaignStoresWithHttpInfo (long applicationId, long campaignId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCampaignStores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export stores Download a CSV file containing the stores linked to a specific campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following column:  - &#x60;store_integration_id&#x60;: The identifier of the store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCampaignStoresAsync (long applicationId, long campaignId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCampaignStoresAsyncWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export stores Download a CSV file containing the stores linked to a specific campaign.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following column:  - &#x60;store_integration_id&#x60;: The identifier of the store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCampaignStoresAsyncWithHttpInfo (long applicationId, long campaignId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCampaignStores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export campaign-level collection&#39;s items Download a CSV file containing items from a given campaign-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>string</returns>
        public string ExportCollectionItems (long applicationId, long campaignId, long collectionId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCollectionItemsWithHttpInfo(applicationId, campaignId, collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export campaign-level collection&#39;s items Download a CSV file containing items from a given campaign-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCollectionItemsWithHttpInfo (long applicationId, long campaignId, long collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export campaign-level collection&#39;s items Download a CSV file containing items from a given campaign-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCollectionItemsAsync (long applicationId, long campaignId, long collectionId)
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCollectionItemsAsyncWithHttpInfo(applicationId, campaignId, collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export campaign-level collection&#39;s items Download a CSV file containing items from a given campaign-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCollectionItemsAsyncWithHttpInfo (long applicationId, long campaignId, long collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export coupons Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file can contain the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date in RFC3339 of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon can be reserved for multiple customers. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>string</returns>
        public string ExportCoupons (long applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string), bool? valuesOnly = default(bool?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCouponsWithHttpInfo(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState, valuesOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export coupons Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file can contain the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date in RFC3339 of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon can be reserved for multiple customers. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCouponsWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string), bool? valuesOnly = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            if (valuesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valuesOnly", valuesOnly));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export coupons Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file can contain the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date in RFC3339 of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon can be reserved for multiple customers. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCouponsAsync (long applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string), bool? valuesOnly = default(bool?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCouponsAsyncWithHttpInfo(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState, valuesOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export coupons Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file can contain the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date in RFC3339 of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon can be reserved for multiple customers. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCouponsAsyncWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string), bool? valuesOnly = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            if (valuesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valuesOnly", valuesOnly));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer sessions Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/dev/server-infrastructure-and-data-retention).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of cart items and additional costs in the session, before any discounts are applied. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;store_integration_id&#x60;: The integration ID of the store. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>string</returns>
        public string ExportCustomerSessions (long applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCustomerSessionsWithHttpInfo(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer sessions Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/dev/server-infrastructure-and-data-retention).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of cart items and additional costs in the session, before any discounts are applied. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;store_integration_id&#x60;: The integration ID of the store. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCustomerSessionsWithHttpInfo (long applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (profileIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileIntegrationId", profileIntegrationId));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (customerSessionState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerSessionState", customerSessionState));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_customer_sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCustomerSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer sessions Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/dev/server-infrastructure-and-data-retention).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of cart items and additional costs in the session, before any discounts are applied. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;store_integration_id&#x60;: The integration ID of the store. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCustomerSessionsAsync (long applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCustomerSessionsAsyncWithHttpInfo(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer sessions Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/dev/server-infrastructure-and-data-retention).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of cart items and additional costs in the session, before any discounts are applied. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;store_integration_id&#x60;: The integration ID of the store. - &#x60;coupons&#x60;: Coupon codes in the session. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCustomerSessionsAsyncWithHttpInfo (long applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (profileIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileIntegrationId", profileIntegrationId));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }
            if (customerSessionState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerSessionState", customerSessionState));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_customer_sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCustomerSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customers&#39; tier data Download a CSV file containing the tier information for customers of the specified loyalty program.  The generated file contains the following columns:  - &#x60;programid&#x60;: The identifier of the loyalty program. It is displayed in your Talon.One deployment URL. - &#x60;subledgerid&#x60;: The ID of the subledger associated with the loyalty program. This column is empty if the loyalty program has no subledger. In this case, refer to the export file name to get the ID of the loyalty program. - &#x60;customerprofileid&#x60;: The ID used to integrate customer profiles with the loyalty program. - &#x60;tiername&#x60;: The name of the tier. - &#x60;startdate&#x60;: The tier start date in RFC3339. - &#x60;expirydate&#x60;: The tier expiry date in RFC3339.  You can filter the results by providing the following optional input parameters:  - &#x60;subledgerIds&#x60; (optional): Filter results by an array of subledger IDs. If no value is provided, all subledger data for the specified loyalty program will be exported. - &#x60;tierNames&#x60; (optional): Filter results by an array of tier names. If no value is provided, all tier data for the specified loyalty program will be exported. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="subledgerIds">An array of subledgers IDs to filter the export by. (optional)</param>
        /// <param name="tierNames">An array of tier names to filter the export by. (optional)</param>
        /// <returns>string</returns>
        public string ExportCustomersTiers (string loyaltyProgramId, List<string> subledgerIds = default(List<string>), List<string> tierNames = default(List<string>))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportCustomersTiersWithHttpInfo(loyaltyProgramId, subledgerIds, tierNames);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customers&#39; tier data Download a CSV file containing the tier information for customers of the specified loyalty program.  The generated file contains the following columns:  - &#x60;programid&#x60;: The identifier of the loyalty program. It is displayed in your Talon.One deployment URL. - &#x60;subledgerid&#x60;: The ID of the subledger associated with the loyalty program. This column is empty if the loyalty program has no subledger. In this case, refer to the export file name to get the ID of the loyalty program. - &#x60;customerprofileid&#x60;: The ID used to integrate customer profiles with the loyalty program. - &#x60;tiername&#x60;: The name of the tier. - &#x60;startdate&#x60;: The tier start date in RFC3339. - &#x60;expirydate&#x60;: The tier expiry date in RFC3339.  You can filter the results by providing the following optional input parameters:  - &#x60;subledgerIds&#x60; (optional): Filter results by an array of subledger IDs. If no value is provided, all subledger data for the specified loyalty program will be exported. - &#x60;tierNames&#x60; (optional): Filter results by an array of tier names. If no value is provided, all tier data for the specified loyalty program will be exported. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="subledgerIds">An array of subledgers IDs to filter the export by. (optional)</param>
        /// <param name="tierNames">An array of tier names to filter the export by. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportCustomersTiersWithHttpInfo (string loyaltyProgramId, List<string> subledgerIds = default(List<string>), List<string> tierNames = default(List<string>))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportCustomersTiers");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (subledgerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("csv", "subledgerIds", subledgerIds));
            }
            if (tierNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("csv", "tierNames", tierNames));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/export_customers_tiers", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCustomersTiers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customers&#39; tier data Download a CSV file containing the tier information for customers of the specified loyalty program.  The generated file contains the following columns:  - &#x60;programid&#x60;: The identifier of the loyalty program. It is displayed in your Talon.One deployment URL. - &#x60;subledgerid&#x60;: The ID of the subledger associated with the loyalty program. This column is empty if the loyalty program has no subledger. In this case, refer to the export file name to get the ID of the loyalty program. - &#x60;customerprofileid&#x60;: The ID used to integrate customer profiles with the loyalty program. - &#x60;tiername&#x60;: The name of the tier. - &#x60;startdate&#x60;: The tier start date in RFC3339. - &#x60;expirydate&#x60;: The tier expiry date in RFC3339.  You can filter the results by providing the following optional input parameters:  - &#x60;subledgerIds&#x60; (optional): Filter results by an array of subledger IDs. If no value is provided, all subledger data for the specified loyalty program will be exported. - &#x60;tierNames&#x60; (optional): Filter results by an array of tier names. If no value is provided, all tier data for the specified loyalty program will be exported. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="subledgerIds">An array of subledgers IDs to filter the export by. (optional)</param>
        /// <param name="tierNames">An array of tier names to filter the export by. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCustomersTiersAsync (string loyaltyProgramId, List<string> subledgerIds = default(List<string>), List<string> tierNames = default(List<string>))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportCustomersTiersAsyncWithHttpInfo(loyaltyProgramId, subledgerIds, tierNames);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customers&#39; tier data Download a CSV file containing the tier information for customers of the specified loyalty program.  The generated file contains the following columns:  - &#x60;programid&#x60;: The identifier of the loyalty program. It is displayed in your Talon.One deployment URL. - &#x60;subledgerid&#x60;: The ID of the subledger associated with the loyalty program. This column is empty if the loyalty program has no subledger. In this case, refer to the export file name to get the ID of the loyalty program. - &#x60;customerprofileid&#x60;: The ID used to integrate customer profiles with the loyalty program. - &#x60;tiername&#x60;: The name of the tier. - &#x60;startdate&#x60;: The tier start date in RFC3339. - &#x60;expirydate&#x60;: The tier expiry date in RFC3339.  You can filter the results by providing the following optional input parameters:  - &#x60;subledgerIds&#x60; (optional): Filter results by an array of subledger IDs. If no value is provided, all subledger data for the specified loyalty program will be exported. - &#x60;tierNames&#x60; (optional): Filter results by an array of tier names. If no value is provided, all tier data for the specified loyalty program will be exported. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="subledgerIds">An array of subledgers IDs to filter the export by. (optional)</param>
        /// <param name="tierNames">An array of tier names to filter the export by. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportCustomersTiersAsyncWithHttpInfo (string loyaltyProgramId, List<string> subledgerIds = default(List<string>), List<string> tierNames = default(List<string>))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportCustomersTiers");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (subledgerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("csv", "subledgerIds", subledgerIds));
            }
            if (tierNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("csv", "tierNames", tierNames));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/export_customers_tiers", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCustomersTiers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export triggered effects Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/entities/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. - &#x60;store_integration_id&#x60;: The integration ID of the store. You choose this ID when you create a store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportEffects (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportEffectsWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export triggered effects Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/entities/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. - &#x60;store_integration_id&#x60;: The integration ID of the store. You choose this ID when you create a store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportEffectsWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_effects", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportEffects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export triggered effects Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/entities/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. - &#x60;store_integration_id&#x60;: The integration ID of the store. You choose this ID when you create a store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportEffectsAsync (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportEffectsAsyncWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export triggered effects Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/entities/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. - &#x60;store_integration_id&#x60;: The integration ID of the store. You choose this ID when you create a store. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportEffectsAsyncWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_effects", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportEffects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer loyalty balance to CSV ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyBalance (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyBalanceWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer loyalty balance to CSV ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyBalanceWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyBalance");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/export_customer_balance", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer loyalty balance to CSV ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyBalanceAsync (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyBalanceAsyncWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer loyalty balance to CSV ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyBalanceAsyncWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyBalance");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/export_customer_balance", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer loyalty balances Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyBalances (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyBalancesWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer loyalty balances Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyBalancesWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyBalances");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/export_customer_balances", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer loyalty balances Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyBalancesAsync (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyBalancesAsyncWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer loyalty balances Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyBalancesAsyncWithHttpInfo (string loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyBalances");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/export_customer_balances", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export all card transaction logs Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyCardBalances (long loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyCardBalancesWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export all card transaction logs Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyCardBalancesWithHttpInfo (long loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/export_card_balances", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export all card transaction logs Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyCardBalancesAsync (long loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyCardBalancesAsyncWithHttpInfo(loyaltyProgramId, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export all card transaction logs Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="endDate">Used to return expired, active, and pending loyalty balances before this timestamp. You can enter any past, present, or future timestamp value.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyCardBalancesAsyncWithHttpInfo (long loyaltyProgramId, DateTime? endDate = default(DateTime?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/export_card_balances", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export card&#39;s ledger log Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyCardLedger (long loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyCardLedgerWithHttpInfo(loyaltyProgramId, loyaltyCardId, rangeStart, rangeEnd, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export card&#39;s ledger log Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyCardLedgerWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->ExportLoyaltyCardLedger");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/export_log", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export card&#39;s ledger log Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyCardLedgerAsync (long loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyCardLedgerAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, rangeStart, rangeEnd, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export card&#39;s ledger log Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyCardLedgerAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->ExportLoyaltyCardLedger");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/export_log", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export loyalty cards Download a CSV file containing the loyalty cards from a specified loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;identifier&#x60;: The unique identifier of the loyalty card. - &#x60;created&#x60;: The date and time the loyalty card was created. - &#x60;status&#x60;: The status of the loyalty card. - &#x60;userpercardlimit&#x60;: The maximum number of customer profiles that can be linked to the card. - &#x60;customerprofileids&#x60;: Integration IDs of the customer profiles linked to the card. - &#x60;blockreason&#x60;: The reason for transferring and blocking the loyalty card. - &#x60;generated&#x60;: An indicator of whether the loyalty card was generated. - &#x60;batchid&#x60;: The ID of the batch the loyalty card is in. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <param name="createdBefore">Only return loyalty cards created before this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="createdAfter">Only return loyalty cards created after this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyCards (long loyaltyProgramId, string batchId = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyCardsWithHttpInfo(loyaltyProgramId, batchId, createdBefore, createdAfter, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export loyalty cards Download a CSV file containing the loyalty cards from a specified loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;identifier&#x60;: The unique identifier of the loyalty card. - &#x60;created&#x60;: The date and time the loyalty card was created. - &#x60;status&#x60;: The status of the loyalty card. - &#x60;userpercardlimit&#x60;: The maximum number of customer profiles that can be linked to the card. - &#x60;customerprofileids&#x60;: Integration IDs of the customer profiles linked to the card. - &#x60;blockreason&#x60;: The reason for transferring and blocking the loyalty card. - &#x60;generated&#x60;: An indicator of whether the loyalty card was generated. - &#x60;batchid&#x60;: The ID of the batch the loyalty card is in. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <param name="createdBefore">Only return loyalty cards created before this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="createdAfter">Only return loyalty cards created after this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyCardsWithHttpInfo (long loyaltyProgramId, string batchId = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/cards/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export loyalty cards Download a CSV file containing the loyalty cards from a specified loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;identifier&#x60;: The unique identifier of the loyalty card. - &#x60;created&#x60;: The date and time the loyalty card was created. - &#x60;status&#x60;: The status of the loyalty card. - &#x60;userpercardlimit&#x60;: The maximum number of customer profiles that can be linked to the card. - &#x60;customerprofileids&#x60;: Integration IDs of the customer profiles linked to the card. - &#x60;blockreason&#x60;: The reason for transferring and blocking the loyalty card. - &#x60;generated&#x60;: An indicator of whether the loyalty card was generated. - &#x60;batchid&#x60;: The ID of the batch the loyalty card is in. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <param name="createdBefore">Only return loyalty cards created before this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="createdAfter">Only return loyalty cards created after this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyCardsAsync (long loyaltyProgramId, string batchId = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyCardsAsyncWithHttpInfo(loyaltyProgramId, batchId, createdBefore, createdAfter, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export loyalty cards Download a CSV file containing the loyalty cards from a specified loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;identifier&#x60;: The unique identifier of the loyalty card. - &#x60;created&#x60;: The date and time the loyalty card was created. - &#x60;status&#x60;: The status of the loyalty card. - &#x60;userpercardlimit&#x60;: The maximum number of customer profiles that can be linked to the card. - &#x60;customerprofileids&#x60;: Integration IDs of the customer profiles linked to the card. - &#x60;blockreason&#x60;: The reason for transferring and blocking the loyalty card. - &#x60;generated&#x60;: An indicator of whether the loyalty card was generated. - &#x60;batchid&#x60;: The ID of the batch the loyalty card is in. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <param name="createdBefore">Only return loyalty cards created before this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="createdAfter">Only return loyalty cards created after this timestamp.  **Note:** - This must be an RFC3339 timestamp string.  (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyCardsAsyncWithHttpInfo (long loyaltyProgramId, string batchId = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/cards/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer&#39;s transaction logs Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The transaction type, such as &#x60;addition&#x60; or &#x60;subtraction&#x60;. - &#x60;name&#x60;: The reason for the transaction. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;flags&#x60;: The flags of the transaction, when applicable. The &#x60;createsNegativeBalance&#x60; flag indicates whether the transaction results in a negative balance. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyLedger (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportLoyaltyLedgerWithHttpInfo(rangeStart, rangeEnd, loyaltyProgramId, integrationId, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer&#39;s transaction logs Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The transaction type, such as &#x60;addition&#x60; or &#x60;subtraction&#x60;. - &#x60;name&#x60;: The reason for the transaction. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;flags&#x60;: The flags of the transaction, when applicable. The &#x60;createsNegativeBalance&#x60; flag indicates whether the transaction results in a negative balance. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportLoyaltyLedgerWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyLedger");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->ExportLoyaltyLedger");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/export_log", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export customer&#39;s transaction logs Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The transaction type, such as &#x60;addition&#x60; or &#x60;subtraction&#x60;. - &#x60;name&#x60;: The reason for the transaction. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;flags&#x60;: The flags of the transaction, when applicable. The &#x60;createsNegativeBalance&#x60; flag indicates whether the transaction results in a negative balance. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyLedgerAsync (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportLoyaltyLedgerAsyncWithHttpInfo(rangeStart, rangeEnd, loyaltyProgramId, integrationId, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer&#39;s transaction logs Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The transaction type, such as &#x60;addition&#x60; or &#x60;subtraction&#x60;. - &#x60;name&#x60;: The reason for the transaction. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;flags&#x60;: The flags of the transaction, when applicable. The &#x60;createsNegativeBalance&#x60; flag indicates whether the transaction results in a negative balance. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportLoyaltyLedgerAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string loyaltyProgramId, string integrationId, string dateFormat = default(string))
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->ExportLoyaltyLedger");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->ExportLoyaltyLedger");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/export_log", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export giveaway codes of a giveaway pool Download a CSV file containing the giveaway codes of a specific giveaway pool.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;id&#x60;: The internal ID of the giveaway. - &#x60;poolid&#x60;: The internal ID of the giveaway pool. - &#x60;code&#x60;: The giveaway code. - &#x60;startdate&#x60;: The validity start date in RFC3339 of the giveaway (can be empty). - &#x60;enddate&#x60;: The validity end date in RFC3339 of the giveaway (can be empty). - &#x60;attributes&#x60;: Any custom attributes associated with the giveaway code (can be empty). - &#x60;used&#x60;: An indication of whether the giveaway is already awarded. - &#x60;importid&#x60;: The ID of the import which created the giveaway. - &#x60;created&#x60;: The creation time of the giveaway code. - &#x60;profileintegrationid&#x60;: The third-party integration ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded. - &#x60;profileid&#x60;: The internal ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded or an internal ID does not exist. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="createdBefore">Timestamp that filters the results to only contain giveaways created before this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Timestamp that filters the results to only contain giveaways created after this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <returns>string</returns>
        public string ExportPoolGiveaways (long poolId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportPoolGiveawaysWithHttpInfo(poolId, createdBefore, createdAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export giveaway codes of a giveaway pool Download a CSV file containing the giveaway codes of a specific giveaway pool.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;id&#x60;: The internal ID of the giveaway. - &#x60;poolid&#x60;: The internal ID of the giveaway pool. - &#x60;code&#x60;: The giveaway code. - &#x60;startdate&#x60;: The validity start date in RFC3339 of the giveaway (can be empty). - &#x60;enddate&#x60;: The validity end date in RFC3339 of the giveaway (can be empty). - &#x60;attributes&#x60;: Any custom attributes associated with the giveaway code (can be empty). - &#x60;used&#x60;: An indication of whether the giveaway is already awarded. - &#x60;importid&#x60;: The ID of the import which created the giveaway. - &#x60;created&#x60;: The creation time of the giveaway code. - &#x60;profileintegrationid&#x60;: The third-party integration ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded. - &#x60;profileid&#x60;: The internal ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded or an internal ID does not exist. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="createdBefore">Timestamp that filters the results to only contain giveaways created before this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Timestamp that filters the results to only contain giveaways created after this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportPoolGiveawaysWithHttpInfo (long poolId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("poolId", TalonOne.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/giveaways/pools/{poolId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportPoolGiveaways", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export giveaway codes of a giveaway pool Download a CSV file containing the giveaway codes of a specific giveaway pool.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;id&#x60;: The internal ID of the giveaway. - &#x60;poolid&#x60;: The internal ID of the giveaway pool. - &#x60;code&#x60;: The giveaway code. - &#x60;startdate&#x60;: The validity start date in RFC3339 of the giveaway (can be empty). - &#x60;enddate&#x60;: The validity end date in RFC3339 of the giveaway (can be empty). - &#x60;attributes&#x60;: Any custom attributes associated with the giveaway code (can be empty). - &#x60;used&#x60;: An indication of whether the giveaway is already awarded. - &#x60;importid&#x60;: The ID of the import which created the giveaway. - &#x60;created&#x60;: The creation time of the giveaway code. - &#x60;profileintegrationid&#x60;: The third-party integration ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded. - &#x60;profileid&#x60;: The internal ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded or an internal ID does not exist. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="createdBefore">Timestamp that filters the results to only contain giveaways created before this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Timestamp that filters the results to only contain giveaways created after this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportPoolGiveawaysAsync (long poolId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportPoolGiveawaysAsyncWithHttpInfo(poolId, createdBefore, createdAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export giveaway codes of a giveaway pool Download a CSV file containing the giveaway codes of a specific giveaway pool.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;id&#x60;: The internal ID of the giveaway. - &#x60;poolid&#x60;: The internal ID of the giveaway pool. - &#x60;code&#x60;: The giveaway code. - &#x60;startdate&#x60;: The validity start date in RFC3339 of the giveaway (can be empty). - &#x60;enddate&#x60;: The validity end date in RFC3339 of the giveaway (can be empty). - &#x60;attributes&#x60;: Any custom attributes associated with the giveaway code (can be empty). - &#x60;used&#x60;: An indication of whether the giveaway is already awarded. - &#x60;importid&#x60;: The ID of the import which created the giveaway. - &#x60;created&#x60;: The creation time of the giveaway code. - &#x60;profileintegrationid&#x60;: The third-party integration ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded. - &#x60;profileid&#x60;: The internal ID of the customer profile that was awarded the giveaway. Can be empty if the giveaway was not awarded or an internal ID does not exist. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="createdBefore">Timestamp that filters the results to only contain giveaways created before this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Timestamp that filters the results to only contain giveaways created after this date. Must be an RFC3339 timestamp string. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportPoolGiveawaysAsyncWithHttpInfo (long poolId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("poolId", TalonOne.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/giveaways/pools/{poolId}/export", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportPoolGiveaways", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export referrals Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportReferrals (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = ExportReferralsWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, valid, usable, batchId, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export referrals Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public TalonOne.Client.ApiResponse< string > ExportReferralsWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/v1/applications/{applicationId}/export_referrals", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportReferrals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export referrals Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportReferralsAsync (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string))
        {
             TalonOne.Client.ApiResponse<string> localVarResponse = await ExportReferralsAsyncWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, valid, usable, batchId, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export referrals Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">- &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">- &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned.  (optional)</param>
        /// <param name="batchId">Filter results by batches of referrals (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<string>> ExportReferralsAsyncWithHttpInfo (long applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string batchId = default(string), string dateFormat = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/csv"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (dateFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "dateFormat", dateFormat));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/applications/{applicationId}/export_referrals", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportReferrals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls sent to the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GetAccessLogsWithoutTotalCount (long applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20022> localVarResponse = GetAccessLogsWithoutTotalCountWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls sent to the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20022 > GetAccessLogsWithoutTotalCountWithHttpInfo (long applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20022 >("/v1/applications/{applicationId}/access_logs/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccessLogsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls sent to the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GetAccessLogsWithoutTotalCountAsync (long applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20022> localVarResponse = await GetAccessLogsWithoutTotalCountAsyncWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get access logs for Application Retrieve the list of API calls sent to the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20022>> GetAccessLogsWithoutTotalCountAsyncWithHttpInfo (long applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20022>("/v1/applications/{applicationId}/access_logs/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccessLogsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Account</returns>
        public Account GetAccount (long accountId)
        {
             TalonOne.Client.ApiResponse<Account> localVarResponse = GetAccountWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>ApiResponse of Account</returns>
        public TalonOne.Client.ApiResponse< Account > GetAccountWithHttpInfo (long accountId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Account >("/v1/accounts/{accountId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> GetAccountAsync (long accountId)
        {
             TalonOne.Client.ApiResponse<Account> localVarResponse = await GetAccountAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Account>> GetAccountAsyncWithHttpInfo (long accountId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Account>("/v1/accounts/{accountId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account analytics Return the analytics of your Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>AccountAnalytics</returns>
        public AccountAnalytics GetAccountAnalytics (long accountId)
        {
             TalonOne.Client.ApiResponse<AccountAnalytics> localVarResponse = GetAccountAnalyticsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account analytics Return the analytics of your Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>ApiResponse of AccountAnalytics</returns>
        public TalonOne.Client.ApiResponse< AccountAnalytics > GetAccountAnalyticsWithHttpInfo (long accountId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountAnalytics >("/v1/accounts/{accountId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account analytics Return the analytics of your Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of AccountAnalytics</returns>
        public async System.Threading.Tasks.Task<AccountAnalytics> GetAccountAnalyticsAsync (long accountId)
        {
             TalonOne.Client.ApiResponse<AccountAnalytics> localVarResponse = await GetAccountAnalyticsAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account analytics Return the analytics of your Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. </param>
        /// <returns>Task of ApiResponse (AccountAnalytics)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAnalytics>> GetAccountAnalyticsAsyncWithHttpInfo (long accountId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountId", TalonOne.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountAnalytics>("/v1/accounts/{accountId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account-level collection Retrieve a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Collection</returns>
        public Collection GetAccountCollection (long collectionId)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = GetAccountCollectionWithHttpInfo(collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account-level collection Retrieve a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > GetAccountCollectionWithHttpInfo (long collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Collection >("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account-level collection Retrieve a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> GetAccountCollectionAsync (long collectionId)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await GetAccountCollectionAsyncWithHttpInfo(collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account-level collection Retrieve a given account-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> GetAccountCollectionAsyncWithHttpInfo (long collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Collection>("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get achievement Get the details of a specific achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Achievement</returns>
        public Achievement GetAchievement (long applicationId, long campaignId, long achievementId)
        {
             TalonOne.Client.ApiResponse<Achievement> localVarResponse = GetAchievementWithHttpInfo(applicationId, campaignId, achievementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get achievement Get the details of a specific achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>ApiResponse of Achievement</returns>
        public TalonOne.Client.ApiResponse< Achievement > GetAchievementWithHttpInfo (long applicationId, long campaignId, long achievementId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("achievementId", TalonOne.Client.ClientUtils.ParameterToString(achievementId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Achievement >("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements/{achievementId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAchievement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get achievement Get the details of a specific achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of Achievement</returns>
        public async System.Threading.Tasks.Task<Achievement> GetAchievementAsync (long applicationId, long campaignId, long achievementId)
        {
             TalonOne.Client.ApiResponse<Achievement> localVarResponse = await GetAchievementAsyncWithHttpInfo(applicationId, campaignId, achievementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get achievement Get the details of a specific achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <returns>Task of ApiResponse (Achievement)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Achievement>> GetAchievementAsyncWithHttpInfo (long applicationId, long campaignId, long achievementId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("achievementId", TalonOne.Client.ClientUtils.ParameterToString(achievementId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Achievement>("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements/{achievementId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAchievement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get additional cost Returns the additional cost. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost GetAdditionalCost (long additionalCostId)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = GetAdditionalCostWithHttpInfo(additionalCostId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get additional cost Returns the additional cost. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public TalonOne.Client.ApiResponse< AccountAdditionalCost > GetAdditionalCostWithHttpInfo (long additionalCostId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountAdditionalCost >("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get additional cost Returns the additional cost. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> GetAdditionalCostAsync (long additionalCostId)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = await GetAdditionalCostAsyncWithHttpInfo(additionalCostId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get additional cost Returns the additional cost. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAdditionalCost>> GetAdditionalCostAsyncWithHttpInfo (long additionalCostId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountAdditionalCost>("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20038</returns>
        public InlineResponse20038 GetAdditionalCosts (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20038> localVarResponse = GetAdditionalCostsWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20038 > GetAdditionalCostsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20038 >("/v1/additional_costs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20038</returns>
        public async System.Threading.Tasks.Task<InlineResponse20038> GetAdditionalCostsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20038> localVarResponse = await GetAdditionalCostsAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20038>> GetAdditionalCostsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20038>("/v1/additional_costs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdditionalCosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Application</returns>
        public Application GetApplication (long applicationId)
        {
             TalonOne.Client.ApiResponse<Application> localVarResponse = GetApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Application</returns>
        public TalonOne.Client.ApiResponse< Application > GetApplicationWithHttpInfo (long applicationId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Application >("/v1/applications/{applicationId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> GetApplicationAsync (long applicationId)
        {
             TalonOne.Client.ApiResponse<Application> localVarResponse = await GetApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Application>> GetApplicationAsyncWithHttpInfo (long applicationId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Application>("/v1/applications/{applicationId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application health Display the health of the Application and show the last time the Application was used.  You can also find this information in the Campaign Manager. In your Application, click **Settings** &gt; **Integration API Keys**. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApplicationApiHealth</returns>
        public ApplicationApiHealth GetApplicationApiHealth (long applicationId)
        {
             TalonOne.Client.ApiResponse<ApplicationApiHealth> localVarResponse = GetApplicationApiHealthWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application health Display the health of the Application and show the last time the Application was used.  You can also find this information in the Campaign Manager. In your Application, click **Settings** &gt; **Integration API Keys**. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of ApplicationApiHealth</returns>
        public TalonOne.Client.ApiResponse< ApplicationApiHealth > GetApplicationApiHealthWithHttpInfo (long applicationId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApplicationApiHealth >("/v1/applications/{applicationId}/health_report", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationApiHealth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application health Display the health of the Application and show the last time the Application was used.  You can also find this information in the Campaign Manager. In your Application, click **Settings** &gt; **Integration API Keys**. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApplicationApiHealth</returns>
        public async System.Threading.Tasks.Task<ApplicationApiHealth> GetApplicationApiHealthAsync (long applicationId)
        {
             TalonOne.Client.ApiResponse<ApplicationApiHealth> localVarResponse = await GetApplicationApiHealthAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application health Display the health of the Application and show the last time the Application was used.  You can also find this information in the Campaign Manager. In your Application, click **Settings** &gt; **Integration API Keys**. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (ApplicationApiHealth)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ApplicationApiHealth>> GetApplicationApiHealthAsyncWithHttpInfo (long applicationId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationApiHealth>("/v1/applications/{applicationId}/health_report", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationApiHealth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApplicationCustomer</returns>
        public ApplicationCustomer GetApplicationCustomer (long applicationId, long customerId)
        {
             TalonOne.Client.ApiResponse<ApplicationCustomer> localVarResponse = GetApplicationCustomerWithHttpInfo(applicationId, customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApiResponse of ApplicationCustomer</returns>
        public TalonOne.Client.ApiResponse< ApplicationCustomer > GetApplicationCustomerWithHttpInfo (long applicationId, long customerId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApplicationCustomer >("/v1/applications/{applicationId}/customers/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApplicationCustomer</returns>
        public async System.Threading.Tasks.Task<ApplicationCustomer> GetApplicationCustomerAsync (long applicationId, long customerId)
        {
             TalonOne.Client.ApiResponse<ApplicationCustomer> localVarResponse = await GetApplicationCustomerAsyncWithHttpInfo(applicationId, customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application&#39;s customer Retrieve the customers of the specified application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApiResponse (ApplicationCustomer)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ApplicationCustomer>> GetApplicationCustomerAsyncWithHttpInfo (long applicationId, long customerId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationCustomer>("/v1/applications/{applicationId}/customers/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 GetApplicationCustomerFriends (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20035> localVarResponse = GetApplicationCustomerFriendsWithHttpInfo(applicationId, integrationId, pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20035 > GetApplicationCustomerFriendsWithHttpInfo (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetApplicationCustomerFriends");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20035 >("/v1/applications/{applicationId}/profile/{integrationId}/friends", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomerFriends", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035> GetApplicationCustomerFriendsAsync (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20035> localVarResponse = await GetApplicationCustomerFriendsAsyncWithHttpInfo(applicationId, integrationId, pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List friends referred by customer profile List the friends referred by the specified customer profile in this Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The Integration ID of the Advocate&#39;s Profile.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20035>> GetApplicationCustomerFriendsAsyncWithHttpInfo (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetApplicationCustomerFriends");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20035>("/v1/applications/{applicationId}/profile/{integrationId}/friends", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomerFriends", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GetApplicationCustomers (long applicationId, string integrationId = default(string), long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20024> localVarResponse = GetApplicationCustomersWithHttpInfo(applicationId, integrationId, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20024 > GetApplicationCustomersWithHttpInfo (long applicationId, string integrationId = default(string), long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20024 >("/v1/applications/{applicationId}/customers", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> GetApplicationCustomersAsync (long applicationId, string integrationId = default(string), long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20024> localVarResponse = await GetApplicationCustomersAsyncWithHttpInfo(applicationId, integrationId, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List application&#39;s customers List all the customers of the specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20024>> GetApplicationCustomersAsyncWithHttpInfo (long applicationId, string integrationId = default(string), long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20024>("/v1/applications/{applicationId}/customers", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GetApplicationCustomersByAttributes (long applicationId, CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20025> localVarResponse = GetApplicationCustomersByAttributesWithHttpInfo(applicationId, body, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20025 > GetApplicationCustomersByAttributesWithHttpInfo (long applicationId, CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetApplicationCustomersByAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20025 >("/v1/applications/{applicationId}/customer_search", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> GetApplicationCustomersByAttributesAsync (long applicationId, CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20025> localVarResponse = await GetApplicationCustomersByAttributesAsyncWithHttpInfo(applicationId, body, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List application customers matching the given attributes Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20025>> GetApplicationCustomersByAttributesAsyncWithHttpInfo (long applicationId, CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetApplicationCustomersByAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20025>("/v1/applications/{applicationId}/customer_search", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#tag/Events/operation/trackEventV2) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 GetApplicationEventTypes (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20031> localVarResponse = GetApplicationEventTypesWithHttpInfo(applicationId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#tag/Events/operation/trackEventV2) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20031 > GetApplicationEventTypesWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20031 >("/v1/applications/{applicationId}/event_types", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#tag/Events/operation/trackEventV2) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> GetApplicationEventTypesAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20031> localVarResponse = await GetApplicationEventTypesAsyncWithHttpInfo(applicationId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications event types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#tag/Events/operation/trackEventV2) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20031>> GetApplicationEventTypesAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20031>("/v1/applications/{applicationId}/event_types", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>InlineResponse20030</returns>
        public InlineResponse20030 GetApplicationEventsWithoutTotalCount (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20030> localVarResponse = GetApplicationEventsWithoutTotalCountWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20030 > GetApplicationEventsWithoutTotalCountWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (session != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "session", session));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (customerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerName", customerName));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerEmail", customerEmail));
            }
            if (couponCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "couponCode", couponCode));
            }
            if (referralCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralCode", referralCode));
            }
            if (ruleQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "ruleQuery", ruleQuery));
            }
            if (campaignQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignQuery", campaignQuery));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20030 >("/v1/applications/{applicationId}/events/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of InlineResponse20030</returns>
        public async System.Threading.Tasks.Task<InlineResponse20030> GetApplicationEventsWithoutTotalCountAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20030> localVarResponse = await GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20030>> GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (session != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "session", session));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (customerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerName", customerName));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "customerEmail", customerEmail));
            }
            if (couponCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "couponCode", couponCode));
            }
            if (referralCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralCode", referralCode));
            }
            if (ruleQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "ruleQuery", ruleQuery));
            }
            if (campaignQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignQuery", campaignQuery));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20030>("/v1/applications/{applicationId}/events/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationEventsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>ApplicationSession</returns>
        public ApplicationSession GetApplicationSession (long applicationId, long sessionId)
        {
             TalonOne.Client.ApiResponse<ApplicationSession> localVarResponse = GetApplicationSessionWithHttpInfo(applicationId, sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>ApiResponse of ApplicationSession</returns>
        public TalonOne.Client.ApiResponse< ApplicationSession > GetApplicationSessionWithHttpInfo (long applicationId, long sessionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", TalonOne.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApplicationSession >("/v1/applications/{applicationId}/sessions/{sessionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>Task of ApplicationSession</returns>
        public async System.Threading.Tasks.Task<ApplicationSession> GetApplicationSessionAsync (long applicationId, long sessionId)
        {
             TalonOne.Client.ApiResponse<ApplicationSession> localVarResponse = await GetApplicationSessionAsyncWithHttpInfo(applicationId, sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application session Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="sessionId">The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. </param>
        /// <returns>Task of ApiResponse (ApplicationSession)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ApplicationSession>> GetApplicationSessionAsyncWithHttpInfo (long applicationId, long sessionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", TalonOne.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationSession>("/v1/applications/{applicationId}/sessions/{sessionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integration ID. Must be exact match. (optional)</param>
        /// <param name="storeIntegrationId">The integration ID of the store. You choose this ID when you create a store. (optional)</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 GetApplicationSessions (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string), string storeIntegrationId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20029> localVarResponse = GetApplicationSessionsWithHttpInfo(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId, storeIntegrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integration ID. Must be exact match. (optional)</param>
        /// <param name="storeIntegrationId">The integration ID of the store. You choose this ID when you create a store. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20029 > GetApplicationSessionsWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string), string storeIntegrationId = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (coupon != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "coupon", coupon));
            }
            if (referral != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referral", referral));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (storeIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "storeIntegrationId", storeIntegrationId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20029 >("/v1/applications/{applicationId}/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integration ID. Must be exact match. (optional)</param>
        /// <param name="storeIntegrationId">The integration ID of the store. You choose this ID when you create a store. (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> GetApplicationSessionsAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string), string storeIntegrationId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20029> localVarResponse = await GetApplicationSessionsAsyncWithHttpInfo(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId, storeIntegrationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Application sessions List all the sessions of the specified Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integration ID. Must be exact match. (optional)</param>
        /// <param name="storeIntegrationId">The integration ID of the store. You choose this ID when you create a store. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20029>> GetApplicationSessionsAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string), string storeIntegrationId = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (coupon != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "coupon", coupon));
            }
            if (referral != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referral", referral));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (storeIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "storeIntegrationId", storeIntegrationId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20029>("/v1/applications/{applicationId}/sessions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications List all applications in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetApplications (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2007> localVarResponse = GetApplicationsWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications List all applications in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2007 > GetApplicationsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2007 >("/v1/applications", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications List all applications in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GetApplicationsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2007> localVarResponse = await GetApplicationsAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications List all applications in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2007>> GetApplicationsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/v1/applications", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get custom attribute Retrieve the specified custom attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Attribute</returns>
        public Attribute GetAttribute (long attributeId)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = GetAttributeWithHttpInfo(attributeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get custom attribute Retrieve the specified custom attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>ApiResponse of Attribute</returns>
        public TalonOne.Client.ApiResponse< Attribute > GetAttributeWithHttpInfo (long attributeId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Attribute >("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get custom attribute Retrieve the specified custom attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> GetAttributeAsync (long attributeId)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = await GetAttributeAsyncWithHttpInfo(attributeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get custom attribute Retrieve the specified custom attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Attribute>> GetAttributeAsyncWithHttpInfo (long attributeId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Attribute>("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List custom attributes Return all the custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 GetAttributes (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20036> localVarResponse = GetAttributesWithHttpInfo(pageSize, skip, sort, entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List custom attributes Return all the custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20036 > GetAttributesWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string entity = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20036 >("/v1/attributes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List custom attributes Return all the custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036> GetAttributesAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20036> localVarResponse = await GetAttributesAsyncWithHttpInfo(pageSize, skip, sort, entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List custom attributes Return all the custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="entity">Returned attributes will be filtered by supplied entity. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20036>> GetAttributesAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string entity = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20036>("/v1/attributes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List audience members Get a paginated list of the customer profiles in a given audience.  A maximum of 1000 customer profiles per page is allowed. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profileQuery">The filter to select a profile. (optional)</param>
        /// <returns>InlineResponse20034</returns>
        public InlineResponse20034 GetAudienceMemberships (long audienceId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profileQuery = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20034> localVarResponse = GetAudienceMembershipsWithHttpInfo(audienceId, pageSize, skip, sort, profileQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List audience members Get a paginated list of the customer profiles in a given audience.  A maximum of 1000 customer profiles per page is allowed. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profileQuery">The filter to select a profile. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20034 > GetAudienceMembershipsWithHttpInfo (long audienceId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profileQuery = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("audienceId", TalonOne.Client.ClientUtils.ParameterToString(audienceId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (profileQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileQuery", profileQuery));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20034 >("/v1/audiences/{audienceId}/memberships", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudienceMemberships", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List audience members Get a paginated list of the customer profiles in a given audience.  A maximum of 1000 customer profiles per page is allowed. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profileQuery">The filter to select a profile. (optional)</param>
        /// <returns>Task of InlineResponse20034</returns>
        public async System.Threading.Tasks.Task<InlineResponse20034> GetAudienceMembershipsAsync (long audienceId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profileQuery = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20034> localVarResponse = await GetAudienceMembershipsAsyncWithHttpInfo(audienceId, pageSize, skip, sort, profileQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List audience members Get a paginated list of the customer profiles in a given audience.  A maximum of 1000 customer profiles per page is allowed. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="profileQuery">The filter to select a profile. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20034>> GetAudienceMembershipsAsyncWithHttpInfo (long audienceId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string profileQuery = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("audienceId", TalonOne.Client.ClientUtils.ParameterToString(audienceId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (profileQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileQuery", profileQuery));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20034>("/v1/audiences/{audienceId}/memberships", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudienceMemberships", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List audiences Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 GetAudiences (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20032> localVarResponse = GetAudiencesWithHttpInfo(pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List audiences Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20032 > GetAudiencesWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20032 >("/v1/audiences", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudiences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List audiences Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032> GetAudiencesAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20032> localVarResponse = await GetAudiencesAsyncWithHttpInfo(pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List audiences Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20032>> GetAudiencesAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20032>("/v1/audiences", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudiences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List audience analytics Get a list of audience IDs and their member count. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceIds">The IDs of one or more audiences, separated by commas, by which to filter results.</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 GetAudiencesAnalytics (string audienceIds, string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20033> localVarResponse = GetAudiencesAnalyticsWithHttpInfo(audienceIds, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List audience analytics Get a list of audience IDs and their member count. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceIds">The IDs of one or more audiences, separated by commas, by which to filter results.</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20033 > GetAudiencesAnalyticsWithHttpInfo (string audienceIds, string sort = default(string))
        {
            // verify the required parameter 'audienceIds' is set
            if (audienceIds == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'audienceIds' when calling ManagementApi->GetAudiencesAnalytics");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "audienceIds", audienceIds));

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20033 >("/v1/audiences/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudiencesAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List audience analytics Get a list of audience IDs and their member count. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceIds">The IDs of one or more audiences, separated by commas, by which to filter results.</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033> GetAudiencesAnalyticsAsync (string audienceIds, string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20033> localVarResponse = await GetAudiencesAnalyticsAsyncWithHttpInfo(audienceIds, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List audience analytics Get a list of audience IDs and their member count. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceIds">The IDs of one or more audiences, separated by commas, by which to filter results.</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20033>> GetAudiencesAnalyticsAsyncWithHttpInfo (string audienceIds, string sort = default(string))
        {
            // verify the required parameter 'audienceIds' is set
            if (audienceIds == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'audienceIds' when calling ManagementApi->GetAudiencesAnalytics");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "audienceIds", audienceIds));

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20033>("/v1/audiences/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudiencesAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Campaign</returns>
        public Campaign GetCampaign (long applicationId, long campaignId)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = GetCampaignWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of Campaign</returns>
        public TalonOne.Client.ApiResponse< Campaign > GetCampaignWithHttpInfo (long applicationId, long campaignId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Campaign >("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> GetCampaignAsync (long applicationId, long campaignId)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = await GetCampaignAsyncWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get campaign Retrieve the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Campaign>> GetCampaignAsyncWithHttpInfo (long applicationId, long campaignId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Campaign>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 GetCampaignAnalytics (long applicationId, long campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20023> localVarResponse = GetCampaignAnalyticsWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, granularity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20023 > GetCampaignAnalyticsWithHttpInfo (long applicationId, long campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20023 >("/v1/applications/{applicationId}/campaigns/{campaignId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> GetCampaignAnalyticsAsync (long applicationId, long campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20023> localVarResponse = await GetCampaignAnalyticsAsyncWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, granularity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get analytics of campaigns Retrieve statistical data about the performance of the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20023>> GetCampaignAnalyticsAsyncWithHttpInfo (long applicationId, long campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20023>("/v1/applications/{applicationId}/campaigns/{campaignId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetCampaignByAttributes (long applicationId, CampaignSearch body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = GetCampaignByAttributesWithHttpInfo(applicationId, body, pageSize, skip, sort, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2008 > GetCampaignByAttributesWithHttpInfo (long applicationId, CampaignSearch body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCampaignByAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2008 >("/v1/applications/{applicationId}/campaigns_search", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> GetCampaignByAttributesAsync (long applicationId, CampaignSearch body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = await GetCampaignByAttributesAsyncWithHttpInfo(applicationId, body, pageSize, skip, sort, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaigns that match the given attributes Get a list of all the campaigns that match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2008>> GetCampaignByAttributesAsyncWithHttpInfo (long applicationId, CampaignSearch body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCampaignByAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2008>("/v1/applications/{applicationId}/campaigns_search", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get campaign access group Get a campaign access group specified by its ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignGroupId">The ID of the campaign access group.</param>
        /// <returns>CampaignGroup</returns>
        public CampaignGroup GetCampaignGroup (long campaignGroupId)
        {
             TalonOne.Client.ApiResponse<CampaignGroup> localVarResponse = GetCampaignGroupWithHttpInfo(campaignGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get campaign access group Get a campaign access group specified by its ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignGroupId">The ID of the campaign access group.</param>
        /// <returns>ApiResponse of CampaignGroup</returns>
        public TalonOne.Client.ApiResponse< CampaignGroup > GetCampaignGroupWithHttpInfo (long campaignGroupId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("campaignGroupId", TalonOne.Client.ClientUtils.ParameterToString(campaignGroupId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CampaignGroup >("/v1/campaign_groups/{campaignGroupId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get campaign access group Get a campaign access group specified by its ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignGroupId">The ID of the campaign access group.</param>
        /// <returns>Task of CampaignGroup</returns>
        public async System.Threading.Tasks.Task<CampaignGroup> GetCampaignGroupAsync (long campaignGroupId)
        {
             TalonOne.Client.ApiResponse<CampaignGroup> localVarResponse = await GetCampaignGroupAsyncWithHttpInfo(campaignGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get campaign access group Get a campaign access group specified by its ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignGroupId">The ID of the campaign access group.</param>
        /// <returns>Task of ApiResponse (CampaignGroup)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CampaignGroup>> GetCampaignGroupAsyncWithHttpInfo (long campaignGroupId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("campaignGroupId", TalonOne.Client.ClientUtils.ParameterToString(campaignGroupId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CampaignGroup>("/v1/campaign_groups/{campaignGroupId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign access groups List the campaign access groups in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetCampaignGroups (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20013> localVarResponse = GetCampaignGroupsWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaign access groups List the campaign access groups in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20013 > GetCampaignGroupsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20013 >("/v1/campaign_groups", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign access groups List the campaign access groups in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetCampaignGroupsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20013> localVarResponse = await GetCampaignGroupsAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaign access groups List the campaign access groups in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20013>> GetCampaignGroupsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20013>("/v1/campaign_groups", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign templates Retrieve a list of campaign templates.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 GetCampaignTemplates (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), long? userId = default(long?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20014> localVarResponse = GetCampaignTemplatesWithHttpInfo(pageSize, skip, sort, state, name, tags, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaign templates Retrieve a list of campaign templates.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20014 > GetCampaignTemplatesWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), long? userId = default(long?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20014 >("/v1/campaign_templates", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign templates Retrieve a list of campaign templates.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> GetCampaignTemplatesAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), long? userId = default(long?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20014> localVarResponse = await GetCampaignTemplatesAsyncWithHttpInfo(pageSize, skip, sort, state, name, tags, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaign templates Retrieve a list of campaign templates.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="state">Filter results by the state of the campaign template. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign template. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values.  (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20014>> GetCampaignTemplatesAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string state = default(string), string name = default(string), string tags = default(string), long? userId = default(long?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20014>("/v1/campaign_templates", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns List the campaigns of the specified application that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign access group ID. (optional)</param>
        /// <param name="templateId">The ID of the campaign template this campaign was created from. (optional)</param>
        /// <param name="storeId">Filter results to campaigns linked to the specified store ID. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetCampaigns (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), long? campaignGroupId = default(long?), long? templateId = default(long?), long? storeId = default(long?))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = GetCampaignsWithHttpInfo(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId, templateId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaigns List the campaigns of the specified application that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign access group ID. (optional)</param>
        /// <param name="templateId">The ID of the campaign template this campaign was created from. (optional)</param>
        /// <param name="storeId">Filter results to campaigns linked to the specified store ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2008 > GetCampaignsWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), long? campaignGroupId = default(long?), long? templateId = default(long?), long? storeId = default(long?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (campaignGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignGroupId", campaignGroupId));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2008 >("/v1/applications/{applicationId}/campaigns", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaigns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaigns List the campaigns of the specified application that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign access group ID. (optional)</param>
        /// <param name="templateId">The ID of the campaign template this campaign was created from. (optional)</param>
        /// <param name="storeId">Filter results to campaigns linked to the specified store ID. (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> GetCampaignsAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), long? campaignGroupId = default(long?), long? templateId = default(long?), long? storeId = default(long?))
        {
             TalonOne.Client.ApiResponse<InlineResponse2008> localVarResponse = await GetCampaignsAsyncWithHttpInfo(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId, templateId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaigns List the campaigns of the specified application that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign access group ID. (optional)</param>
        /// <param name="templateId">The ID of the campaign template this campaign was created from. (optional)</param>
        /// <param name="storeId">Filter results to campaigns linked to the specified store ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2008>> GetCampaignsAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), long? campaignGroupId = default(long?), long? templateId = default(long?), long? storeId = default(long?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (campaignGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignGroupId", campaignGroupId));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/v1/applications/{applicationId}/campaigns", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaigns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit logs for an account Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>InlineResponse20044</returns>
        public InlineResponse20044 GetChanges (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), long? userId = default(long?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), long? managementKeyId = default(long?), bool? includeOld = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20044> localVarResponse = GetChangesWithHttpInfo(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, managementKeyId, includeOld);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit logs for an account Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20044 > GetChangesWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), long? userId = default(long?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), long? managementKeyId = default(long?), bool? includeOld = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (entityPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entityPath", entityPath));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (managementKeyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "managementKeyId", managementKeyId));
            }
            if (includeOld != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOld", includeOld));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20044 >("/v1/changes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit logs for an account Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of InlineResponse20044</returns>
        public async System.Threading.Tasks.Task<InlineResponse20044> GetChangesAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), long? userId = default(long?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), long? managementKeyId = default(long?), bool? includeOld = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20044> localVarResponse = await GetChangesAsyncWithHttpInfo(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, managementKeyId, includeOld);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get audit logs for an account Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId">Filter results by user ID. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="managementKeyId">Filter results that match the given management key ID. (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20044>> GetChangesAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), decimal? applicationId = default(decimal?), string entityPath = default(string), long? userId = default(long?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), long? managementKeyId = default(long?), bool? includeOld = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (entityPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entityPath", entityPath));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (managementKeyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "managementKeyId", managementKeyId));
            }
            if (includeOld != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOld", includeOld));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20044>("/v1/changes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get campaign-level collection Retrieve a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Collection</returns>
        public Collection GetCollection (long applicationId, long campaignId, long collectionId)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = GetCollectionWithHttpInfo(applicationId, campaignId, collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get campaign-level collection Retrieve a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > GetCollectionWithHttpInfo (long applicationId, long campaignId, long collectionId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Collection >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get campaign-level collection Retrieve a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> GetCollectionAsync (long applicationId, long campaignId, long collectionId)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await GetCollectionAsyncWithHttpInfo(applicationId, campaignId, collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get campaign-level collection Retrieve a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> GetCollectionAsyncWithHttpInfo (long applicationId, long campaignId, long collectionId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Collection>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get collection items Retrieve items from a given collection.  You can retrieve items from both account-level collections and campaign-level collections using this endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GetCollectionItems (long collectionId, long? pageSize = default(long?), long? skip = default(long?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20021> localVarResponse = GetCollectionItemsWithHttpInfo(collectionId, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection items Retrieve items from a given collection.  You can retrieve items from both account-level collections and campaign-level collections using this endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20021 > GetCollectionItemsWithHttpInfo (long collectionId, long? pageSize = default(long?), long? skip = default(long?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20021 >("/v1/collections/{collectionId}/items", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get collection items Retrieve items from a given collection.  You can retrieve items from both account-level collections and campaign-level collections using this endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> GetCollectionItemsAsync (long collectionId, long? pageSize = default(long?), long? skip = default(long?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20021> localVarResponse = await GetCollectionItemsAsyncWithHttpInfo(collectionId, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection items Retrieve items from a given collection.  You can retrieve items from both account-level collections and campaign-level collections using this endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20021>> GetCollectionItemsAsyncWithHttpInfo (long collectionId, long? pageSize = default(long?), long? skip = default(long?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20021>("/v1/collections/{collectionId}/items", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="redeemed">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetCouponsWithoutTotalCount (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string redeemed = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), DateTime? expiresBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? startsAfter = default(DateTime?), bool? valuesOnly = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20011> localVarResponse = GetCouponsWithoutTotalCountWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, redeemed, referralId, recipientIntegrationId, batchId, exactMatch, expiresBefore, expiresAfter, startsBefore, startsAfter, valuesOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="redeemed">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20011 > GetCouponsWithoutTotalCountWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string redeemed = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), DateTime? expiresBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? startsAfter = default(DateTime?), bool? valuesOnly = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (redeemed != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "redeemed", redeemed));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (expiresBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresBefore", expiresBefore));
            }
            if (expiresAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresAfter", expiresAfter));
            }
            if (startsBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsBefore", startsBefore));
            }
            if (startsAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsAfter", startsAfter));
            }
            if (valuesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valuesOnly", valuesOnly));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCouponsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="redeemed">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> GetCouponsWithoutTotalCountAsync (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string redeemed = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), DateTime? expiresBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? startsAfter = default(DateTime?), bool? valuesOnly = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20011> localVarResponse = await GetCouponsWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, redeemed, referralId, recipientIntegrationId, batchId, exactMatch, expiresBefore, expiresAfter, startsBefore, startsAfter, valuesOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons List all the coupons matching the specified criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="redeemed">- &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon expiration date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon start date timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valuesOnly">Filter results to only return the coupon codes (&#x60;value&#x60; column) without the associated coupon data. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20011>> GetCouponsWithoutTotalCountAsyncWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string redeemed = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), DateTime? expiresBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? startsAfter = default(DateTime?), bool? valuesOnly = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (redeemed != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "redeemed", redeemed));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (expiresBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresBefore", expiresBefore));
            }
            if (expiresAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "expiresAfter", expiresAfter));
            }
            if (startsBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsBefore", startsBefore));
            }
            if (startsAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startsAfter", startsAfter));
            }
            if (valuesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valuesOnly", valuesOnly));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCouponsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>CustomerActivityReport</returns>
        public CustomerActivityReport GetCustomerActivityReport (DateTime rangeStart, DateTime rangeEnd, long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?))
        {
             TalonOne.Client.ApiResponse<CustomerActivityReport> localVarResponse = GetCustomerActivityReportWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of CustomerActivityReport</returns>
        public TalonOne.Client.ApiResponse< CustomerActivityReport > GetCustomerActivityReportWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CustomerActivityReport >("/v1/applications/{applicationId}/customer_activity_reports/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of CustomerActivityReport</returns>
        public async System.Threading.Tasks.Task<CustomerActivityReport> GetCustomerActivityReportAsync (DateTime rangeStart, DateTime rangeEnd, long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?))
        {
             TalonOne.Client.ApiResponse<CustomerActivityReport> localVarResponse = await GetCustomerActivityReportAsyncWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer&#39;s activity report Fetch the summary report of a given customer in the given application, in a time range.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (CustomerActivityReport)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CustomerActivityReport>> GetCustomerActivityReportAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerActivityReport>("/v1/applications/{applicationId}/customer_activity_reports/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name. (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaign name. (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name. (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 GetCustomerActivityReportsWithoutTotalCount (DateTime rangeStart, DateTime rangeEnd, long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20028> localVarResponse = GetCustomerActivityReportsWithoutTotalCountWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name. (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaign name. (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20028 > GetCustomerActivityReportsWithoutTotalCountWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (campaignName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignName", campaignName));
            }
            if (advocateName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocateName", advocateName));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20028 >("/v1/applications/{applicationId}/customer_activity_reports/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReportsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name. (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaign name. (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name. (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> GetCustomerActivityReportsWithoutTotalCountAsync (DateTime rangeStart, DateTime rangeEnd, long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20028> localVarResponse = await GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="name">Only return reports matching the customer name. (optional)</param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaign name. (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20028>> GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (campaignName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignName", campaignName));
            }
            if (advocateName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocateName", advocateName));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20028>("/v1/applications/{applicationId}/customer_activity_reports/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerActivityReportsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>CustomerAnalytics</returns>
        public CustomerAnalytics GetCustomerAnalytics (long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<CustomerAnalytics> localVarResponse = GetCustomerAnalyticsWithHttpInfo(applicationId, customerId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of CustomerAnalytics</returns>
        public TalonOne.Client.ApiResponse< CustomerAnalytics > GetCustomerAnalyticsWithHttpInfo (long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CustomerAnalytics >("/v1/applications/{applicationId}/customers/{customerId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of CustomerAnalytics</returns>
        public async System.Threading.Tasks.Task<CustomerAnalytics> GetCustomerAnalyticsAsync (long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<CustomerAnalytics> localVarResponse = await GetCustomerAnalyticsAsyncWithHttpInfo(applicationId, customerId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer&#39;s analytics report Fetch analytics for a given customer in the given application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (CustomerAnalytics)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CustomerAnalytics>> GetCustomerAnalyticsAsyncWithHttpInfo (long applicationId, long customerId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerAnalytics>("/v1/applications/{applicationId}/customers/{customerId}/analytics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerAnalytics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>CustomerProfile</returns>
        public CustomerProfile GetCustomerProfile (long customerId)
        {
             TalonOne.Client.ApiResponse<CustomerProfile> localVarResponse = GetCustomerProfileWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>ApiResponse of CustomerProfile</returns>
        public TalonOne.Client.ApiResponse< CustomerProfile > GetCustomerProfileWithHttpInfo (long customerId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CustomerProfile >("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of CustomerProfile</returns>
        public async System.Threading.Tasks.Task<CustomerProfile> GetCustomerProfileAsync (long customerId)
        {
             TalonOne.Client.ApiResponse<CustomerProfile> localVarResponse = await GetCustomerProfileAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer profile Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. </param>
        /// <returns>Task of ApiResponse (CustomerProfile)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<CustomerProfile>> GetCustomerProfileAsyncWithHttpInfo (long customerId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("customerId", TalonOne.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerProfile>("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer achievements For the given customer profile, list all the achievements that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint. (optional)</param>
        /// <param name="title">Filter results by the &#x60;title&#x60; of an achievement. (optional)</param>
        /// <returns>InlineResponse20051</returns>
        public InlineResponse20051 GetCustomerProfileAchievementProgress (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), long? achievementId = default(long?), string title = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20051> localVarResponse = GetCustomerProfileAchievementProgressWithHttpInfo(applicationId, integrationId, pageSize, skip, achievementId, title);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List customer achievements For the given customer profile, list all the achievements that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint. (optional)</param>
        /// <param name="title">Filter results by the &#x60;title&#x60; of an achievement. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20051 > GetCustomerProfileAchievementProgressWithHttpInfo (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), long? achievementId = default(long?), string title = default(string))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetCustomerProfileAchievementProgress");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (achievementId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "achievementId", achievementId));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20051 >("/v1/applications/{applicationId}/achievement_progress/{integrationId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfileAchievementProgress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer achievements For the given customer profile, list all the achievements that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint. (optional)</param>
        /// <param name="title">Filter results by the &#x60;title&#x60; of an achievement. (optional)</param>
        /// <returns>Task of InlineResponse20051</returns>
        public async System.Threading.Tasks.Task<InlineResponse20051> GetCustomerProfileAchievementProgressAsync (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), long? achievementId = default(long?), string title = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20051> localVarResponse = await GetCustomerProfileAchievementProgressAsyncWithHttpInfo(applicationId, integrationId, pageSize, skip, achievementId, title);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List customer achievements For the given customer profile, list all the achievements that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint. (optional)</param>
        /// <param name="title">Filter results by the &#x60;title&#x60; of an achievement. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20051>> GetCustomerProfileAchievementProgressAsyncWithHttpInfo (long applicationId, string integrationId, long? pageSize = default(long?), long? skip = default(long?), long? achievementId = default(long?), string title = default(string))
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetCustomerProfileAchievementProgress");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (achievementId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "achievementId", achievementId));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20051>("/v1/applications/{applicationId}/achievement_progress/{integrationId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfileAchievementProgress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GetCustomerProfiles (long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20027> localVarResponse = GetCustomerProfilesWithHttpInfo(pageSize, skip, sandbox);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20027 > GetCustomerProfilesWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sandbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sandbox", sandbox));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20027 >("/v1/customers/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> GetCustomerProfilesAsync (long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20027> localVarResponse = await GetCustomerProfilesAsyncWithHttpInfo(pageSize, skip, sandbox);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List customer profiles List all customer profiles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20027>> GetCustomerProfilesAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sandbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sandbox", sandbox));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20027>("/v1/customers/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerProfiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GetCustomersByAttributes (CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20026> localVarResponse = GetCustomersByAttributesWithHttpInfo(body, pageSize, skip, sandbox);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20026 > GetCustomersByAttributesWithHttpInfo (CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCustomersByAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sandbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sandbox", sandbox));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20026 >("/v1/customer_search/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GetCustomersByAttributesAsync (CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20026> localVarResponse = await GetCustomersByAttributesAsyncWithHttpInfo(body, pageSize, skip, sandbox);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List customer profiles matching the given attributes Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sandbox">Indicates whether you are pointing to a sandbox or live customer. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20026>> GetCustomersByAttributesAsyncWithHttpInfo (CustomerProfileSearchQuery body, long? pageSize = default(long?), long? skip = default(long?), bool? sandbox = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->GetCustomersByAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sandbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sandbox", sandbox));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20026>("/v1/customer_search/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersByAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics for loyalty dashboard Retrieve the statistics displayed on the specified loyalty program&#39;s dashboard, such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 GetDashboardStatistics (long loyaltyProgramId, DateTime rangeStart, DateTime rangeEnd, string subledgerId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20016> localVarResponse = GetDashboardStatisticsWithHttpInfo(loyaltyProgramId, rangeStart, rangeEnd, subledgerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics for loyalty dashboard Retrieve the statistics displayed on the specified loyalty program&#39;s dashboard, such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20016 > GetDashboardStatisticsWithHttpInfo (long loyaltyProgramId, DateTime rangeStart, DateTime rangeEnd, string subledgerId = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (subledgerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "subledgerId", subledgerId));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20016 >("/v1/loyalty_programs/{loyaltyProgramId}/dashboard", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics for loyalty dashboard Retrieve the statistics displayed on the specified loyalty program&#39;s dashboard, such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> GetDashboardStatisticsAsync (long loyaltyProgramId, DateTime rangeStart, DateTime rangeEnd, string subledgerId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20016> localVarResponse = await GetDashboardStatisticsAsyncWithHttpInfo(loyaltyProgramId, rangeStart, rangeEnd, subledgerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics for loyalty dashboard Retrieve the statistics displayed on the specified loyalty program&#39;s dashboard, such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="rangeStart">Only return results from after this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="rangeEnd">Only return results from before this timestamp.  **Note:** - This must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered. </param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20016>> GetDashboardStatisticsAsyncWithHttpInfo (long loyaltyProgramId, DateTime rangeStart, DateTime rangeEnd, string subledgerId = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (subledgerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "subledgerId", subledgerId));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeStart", rangeStart));
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "rangeEnd", rangeEnd));

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20016>("/v1/loyalty_programs/{loyaltyProgramId}/dashboard", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20042</returns>
        public InlineResponse20042 GetEventTypes (string name = default(string), bool? includeOldVersions = default(bool?), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20042> localVarResponse = GetEventTypesWithHttpInfo(name, includeOldVersions, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20042 > GetEventTypesWithHttpInfo (string name = default(string), bool? includeOldVersions = default(bool?), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (includeOldVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOldVersions", includeOldVersions));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20042 >("/v1/event_types", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20042</returns>
        public async System.Threading.Tasks.Task<InlineResponse20042> GetEventTypesAsync (string name = default(string), bool? includeOldVersions = default(bool?), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20042> localVarResponse = await GetEventTypesAsyncWithHttpInfo(name, includeOldVersions, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20042>> GetEventTypesAsyncWithHttpInfo (string name = default(string), bool? includeOldVersions = default(bool?), long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (includeOldVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "includeOldVersions", includeOldVersions));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20042>("/v1/event_types", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>InlineResponse20045</returns>
        public InlineResponse20045 GetExports (long? pageSize = default(long?), long? skip = default(long?), decimal? applicationId = default(decimal?), long? campaignId = default(long?), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20045> localVarResponse = GetExportsWithHttpInfo(pageSize, skip, applicationId, campaignId, entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20045 > GetExportsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), decimal? applicationId = default(decimal?), long? campaignId = default(long?), string entity = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20045 >("/v1/exports", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExports", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of InlineResponse20045</returns>
        public async System.Threading.Tasks.Task<InlineResponse20045> GetExportsAsync (long? pageSize = default(long?), long? skip = default(long?), decimal? applicationId = default(decimal?), long? campaignId = default(long?), string entity = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20045> localVarResponse = await GetExportsAsyncWithHttpInfo(pageSize, skip, applicationId, campaignId, entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get exports List all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter by the campaign ID on which the limit counters are used. (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20045>> GetExportsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), decimal? applicationId = default(decimal?), long? campaignId = default(long?), string entity = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20045>("/v1/exports", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExports", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty card Get the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>LoyaltyCard</returns>
        public LoyaltyCard GetLoyaltyCard (long loyaltyProgramId, string loyaltyCardId)
        {
             TalonOne.Client.ApiResponse<LoyaltyCard> localVarResponse = GetLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty card Get the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyCard</returns>
        public TalonOne.Client.ApiResponse< LoyaltyCard > GetLoyaltyCardWithHttpInfo (long loyaltyProgramId, string loyaltyCardId)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->GetLoyaltyCard");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyCard >("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty card Get the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of LoyaltyCard</returns>
        public async System.Threading.Tasks.Task<LoyaltyCard> GetLoyaltyCardAsync (long loyaltyProgramId, string loyaltyCardId)
        {
             TalonOne.Client.ApiResponse<LoyaltyCard> localVarResponse = await GetLoyaltyCardAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty card Get the given loyalty card.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyCard)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyCard>> GetLoyaltyCardAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->GetLoyaltyCard");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyCard>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List card&#39;s transactions Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/card-based/card-based-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 GetLoyaltyCardTransactionLogs (long loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?), string subledgerId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20019> localVarResponse = GetLoyaltyCardTransactionLogsWithHttpInfo(loyaltyProgramId, loyaltyCardId, startDate, endDate, pageSize, skip, subledgerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List card&#39;s transactions Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/card-based/card-based-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20019 > GetLoyaltyCardTransactionLogsWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?), string subledgerId = default(string))
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->GetLoyaltyCardTransactionLogs");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (subledgerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "subledgerId", subledgerId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20019 >("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCardTransactionLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List card&#39;s transactions Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/card-based/card-based-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> GetLoyaltyCardTransactionLogsAsync (long loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?), string subledgerId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20019> localVarResponse = await GetLoyaltyCardTransactionLogsAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, startDate, endDate, pageSize, skip, subledgerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List card&#39;s transactions Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/card-based/card-based-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20019>> GetLoyaltyCardTransactionLogsAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?), string subledgerId = default(string))
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->GetLoyaltyCardTransactionLogs");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (subledgerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "subledgerId", subledgerId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20019>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCardTransactionLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty cards For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="identifier">The card code by which to filter loyalty cards in the response. (optional)</param>
        /// <param name="profileId">Filter results by customer profile ID. (optional)</param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 GetLoyaltyCards (long loyaltyProgramId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string identifier = default(string), long? profileId = default(long?), string batchId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20018> localVarResponse = GetLoyaltyCardsWithHttpInfo(loyaltyProgramId, pageSize, skip, sort, identifier, profileId, batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loyalty cards For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="identifier">The card code by which to filter loyalty cards in the response. (optional)</param>
        /// <param name="profileId">Filter results by customer profile ID. (optional)</param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20018 > GetLoyaltyCardsWithHttpInfo (long loyaltyProgramId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string identifier = default(string), long? profileId = default(long?), string batchId = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (profileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileId", profileId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20018 >("/v1/loyalty_programs/{loyaltyProgramId}/cards", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty cards For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="identifier">The card code by which to filter loyalty cards in the response. (optional)</param>
        /// <param name="profileId">Filter results by customer profile ID. (optional)</param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> GetLoyaltyCardsAsync (long loyaltyProgramId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string identifier = default(string), long? profileId = default(long?), string batchId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20018> localVarResponse = await GetLoyaltyCardsAsyncWithHttpInfo(loyaltyProgramId, pageSize, skip, sort, identifier, profileId, batchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loyalty cards For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="identifier">The card code by which to filter loyalty cards in the response. (optional)</param>
        /// <param name="profileId">Filter results by customer profile ID. (optional)</param>
        /// <param name="batchId">Filter results by loyalty card batch ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20018>> GetLoyaltyCardsAsyncWithHttpInfo (long loyaltyProgramId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string identifier = default(string), long? profileId = default(long?), string batchId = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (profileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "profileId", profileId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20018>("/v1/loyalty_programs/{loyaltyProgramId}/cards", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s full loyalty ledger Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <returns>LoyaltyLedger</returns>
        public LoyaltyLedger GetLoyaltyPoints (string loyaltyProgramId, string integrationId)
        {
             TalonOne.Client.ApiResponse<LoyaltyLedger> localVarResponse = GetLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer&#39;s full loyalty ledger Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <returns>ApiResponse of LoyaltyLedger</returns>
        public TalonOne.Client.ApiResponse< LoyaltyLedger > GetLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->GetLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetLoyaltyPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyLedger >("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer&#39;s full loyalty ledger Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <returns>Task of LoyaltyLedger</returns>
        public async System.Threading.Tasks.Task<LoyaltyLedger> GetLoyaltyPointsAsync (string loyaltyProgramId, string integrationId)
        {
             TalonOne.Client.ApiResponse<LoyaltyLedger> localVarResponse = await GetLoyaltyPointsAsyncWithHttpInfo(loyaltyProgramId, integrationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer&#39;s full loyalty ledger Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <returns>Task of ApiResponse (LoyaltyLedger)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyLedger>> GetLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->GetLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->GetLoyaltyPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyLedger>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>LoyaltyProgram</returns>
        public LoyaltyProgram GetLoyaltyProgram (long loyaltyProgramId)
        {
             TalonOne.Client.ApiResponse<LoyaltyProgram> localVarResponse = GetLoyaltyProgramWithHttpInfo(loyaltyProgramId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        public TalonOne.Client.ApiResponse< LoyaltyProgram > GetLoyaltyProgramWithHttpInfo (long loyaltyProgramId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyProgram >("/v1/loyalty_programs/{loyaltyProgramId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of LoyaltyProgram</returns>
        public async System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramAsync (long loyaltyProgramId)
        {
             TalonOne.Client.ApiResponse<LoyaltyProgram> localVarResponse = await GetLoyaltyProgramAsyncWithHttpInfo(loyaltyProgramId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty program Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyProgram>> GetLoyaltyProgramAsyncWithHttpInfo (long loyaltyProgramId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyProgram>("/v1/loyalty_programs/{loyaltyProgramId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty program transactions Retrieve loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. **Note:** If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GetLoyaltyProgramTransactions (long loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20017> localVarResponse = GetLoyaltyProgramTransactionsWithHttpInfo(loyaltyProgramId, loyaltyTransactionType, subledgerId, startDate, endDate, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loyalty program transactions Retrieve loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. **Note:** If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20017 > GetLoyaltyProgramTransactionsWithHttpInfo (long loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (loyaltyTransactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "loyaltyTransactionType", loyaltyTransactionType));
            }
            if (subledgerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "subledgerId", subledgerId));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20017 >("/v1/loyalty_programs/{loyaltyProgramId}/transactions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgramTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty program transactions Retrieve loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. **Note:** If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> GetLoyaltyProgramTransactionsAsync (long loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20017> localVarResponse = await GetLoyaltyProgramTransactionsAsyncWithHttpInfo(loyaltyProgramId, loyaltyTransactionType, subledgerId, startDate, endDate, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loyalty program transactions Retrieve loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. **Note:** If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyTransactionType">Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file.  (optional)</param>
        /// <param name="subledgerId">The ID of the subledger by which we filter the data. (optional)</param>
        /// <param name="startDate">Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="endDate">Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:**  - It must be an RFC3339 timestamp string. - You can include a time component in your string, for example, &#x60;T23:59:59&#x60; to specify the end of the day. The time zone setting considered is &#x60;UTC&#x60;. If you do not include a time component, a default time value of &#x60;T00:00:00&#x60; (midnight) in &#x60;UTC&#x60; is considered.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20017>> GetLoyaltyProgramTransactionsAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyTransactionType = default(string), string subledgerId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), long? pageSize = default(long?), long? skip = default(long?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (loyaltyTransactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "loyaltyTransactionType", loyaltyTransactionType));
            }
            if (subledgerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "subledgerId", subledgerId));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20017>("/v1/loyalty_programs/{loyaltyProgramId}/transactions", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgramTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GetLoyaltyPrograms ()
        {
             TalonOne.Client.ApiResponse<InlineResponse20015> localVarResponse = GetLoyaltyProgramsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20015 > GetLoyaltyProgramsWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20015 >("/v1/loyalty_programs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPrograms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GetLoyaltyProgramsAsync ()
        {
             TalonOne.Client.ApiResponse<InlineResponse20015> localVarResponse = await GetLoyaltyProgramsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loyalty programs List the loyalty programs of the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20015>> GetLoyaltyProgramsAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20015>("/v1/loyalty_programs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyPrograms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program statistics ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To retrieve statistics for a loyalty program, use the [Get statistics for loyalty dashboard](/management-api#tag/Loyalty/operation/getDashboardStatistics) endpoint.  Retrieve the statistics of the specified loyalty program, such as the total active points, pending points, spent points, and expired points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>LoyaltyDashboardData</returns>
        public LoyaltyDashboardData GetLoyaltyStatistics (long loyaltyProgramId)
        {
             TalonOne.Client.ApiResponse<LoyaltyDashboardData> localVarResponse = GetLoyaltyStatisticsWithHttpInfo(loyaltyProgramId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty program statistics ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To retrieve statistics for a loyalty program, use the [Get statistics for loyalty dashboard](/management-api#tag/Loyalty/operation/getDashboardStatistics) endpoint.  Retrieve the statistics of the specified loyalty program, such as the total active points, pending points, spent points, and expired points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>ApiResponse of LoyaltyDashboardData</returns>
        public TalonOne.Client.ApiResponse< LoyaltyDashboardData > GetLoyaltyStatisticsWithHttpInfo (long loyaltyProgramId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoyaltyDashboardData >("/v1/loyalty_programs/{loyaltyProgramId}/statistics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get loyalty program statistics ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To retrieve statistics for a loyalty program, use the [Get statistics for loyalty dashboard](/management-api#tag/Loyalty/operation/getDashboardStatistics) endpoint.  Retrieve the statistics of the specified loyalty program, such as the total active points, pending points, spent points, and expired points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of LoyaltyDashboardData</returns>
        public async System.Threading.Tasks.Task<LoyaltyDashboardData> GetLoyaltyStatisticsAsync (long loyaltyProgramId)
        {
             TalonOne.Client.ApiResponse<LoyaltyDashboardData> localVarResponse = await GetLoyaltyStatisticsAsyncWithHttpInfo(loyaltyProgramId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty program statistics ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To retrieve statistics for a loyalty program, use the [Get statistics for loyalty dashboard](/management-api#tag/Loyalty/operation/getDashboardStatistics) endpoint.  Retrieve the statistics of the specified loyalty program, such as the total active points, pending points, spent points, and expired points. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <returns>Task of ApiResponse (LoyaltyDashboardData)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyDashboardData>> GetLoyaltyStatisticsAsyncWithHttpInfo (long loyaltyProgramId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltyDashboardData>("/v1/loyalty_programs/{loyaltyProgramId}/statistics", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List message log entries Retrieve all message log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The entity type the log is related to. </param>
        /// <param name="messageID">Filter results by message ID. (optional)</param>
        /// <param name="changeType">Filter results by change type. (optional)</param>
        /// <param name="notificationIDs">Filter results by notification ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="cursor">A specific unique value in the database. If this value is not given, the server fetches results starting with the first record.  (optional)</param>
        /// <param name="period">Filter results by time period. Choose between the available relative time frames.  (optional)</param>
        /// <param name="isSuccessful">Indicates whether to return log entries with either successful or unsuccessful HTTP response codes. When set to&#x60;true&#x60;, only log entries with &#x60;2xx&#x60; response codes are returned. When set to &#x60;false&#x60;, only log entries with &#x60;4xx&#x60; and &#x60;5xx&#x60; response codes are returned.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. (optional)</param>
        /// <param name="responseCode">Filter results by response status code. (optional)</param>
        /// <param name="webhookIDs">Filter results by webhook ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <returns>MessageLogEntries</returns>
        public MessageLogEntries GetMessageLogs (string entityType, string messageID = default(string), string changeType = default(string), string notificationIDs = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), byte[] cursor = default(byte[]), string period = default(string), bool? isSuccessful = default(bool?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), long? loyaltyProgramId = default(long?), long? responseCode = default(long?), string webhookIDs = default(string))
        {
             TalonOne.Client.ApiResponse<MessageLogEntries> localVarResponse = GetMessageLogsWithHttpInfo(entityType, messageID, changeType, notificationIDs, createdBefore, createdAfter, cursor, period, isSuccessful, applicationId, campaignId, loyaltyProgramId, responseCode, webhookIDs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List message log entries Retrieve all message log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The entity type the log is related to. </param>
        /// <param name="messageID">Filter results by message ID. (optional)</param>
        /// <param name="changeType">Filter results by change type. (optional)</param>
        /// <param name="notificationIDs">Filter results by notification ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="cursor">A specific unique value in the database. If this value is not given, the server fetches results starting with the first record.  (optional)</param>
        /// <param name="period">Filter results by time period. Choose between the available relative time frames.  (optional)</param>
        /// <param name="isSuccessful">Indicates whether to return log entries with either successful or unsuccessful HTTP response codes. When set to&#x60;true&#x60;, only log entries with &#x60;2xx&#x60; response codes are returned. When set to &#x60;false&#x60;, only log entries with &#x60;4xx&#x60; and &#x60;5xx&#x60; response codes are returned.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. (optional)</param>
        /// <param name="responseCode">Filter results by response status code. (optional)</param>
        /// <param name="webhookIDs">Filter results by webhook ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <returns>ApiResponse of MessageLogEntries</returns>
        public TalonOne.Client.ApiResponse< MessageLogEntries > GetMessageLogsWithHttpInfo (string entityType, string messageID = default(string), string changeType = default(string), string notificationIDs = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), byte[] cursor = default(byte[]), string period = default(string), bool? isSuccessful = default(bool?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), long? loyaltyProgramId = default(long?), long? responseCode = default(long?), string webhookIDs = default(string))
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'entityType' when calling ManagementApi->GetMessageLogs");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (messageID != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "messageID", messageID));
            }
            if (changeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "changeType", changeType));
            }
            if (notificationIDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "notificationIDs", notificationIDs));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (isSuccessful != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "isSuccessful", isSuccessful));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entityType", entityType));
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (loyaltyProgramId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "loyaltyProgramId", loyaltyProgramId));
            }
            if (responseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "responseCode", responseCode));
            }
            if (webhookIDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookIDs", webhookIDs));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MessageLogEntries >("/v1/message_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List message log entries Retrieve all message log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The entity type the log is related to. </param>
        /// <param name="messageID">Filter results by message ID. (optional)</param>
        /// <param name="changeType">Filter results by change type. (optional)</param>
        /// <param name="notificationIDs">Filter results by notification ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="cursor">A specific unique value in the database. If this value is not given, the server fetches results starting with the first record.  (optional)</param>
        /// <param name="period">Filter results by time period. Choose between the available relative time frames.  (optional)</param>
        /// <param name="isSuccessful">Indicates whether to return log entries with either successful or unsuccessful HTTP response codes. When set to&#x60;true&#x60;, only log entries with &#x60;2xx&#x60; response codes are returned. When set to &#x60;false&#x60;, only log entries with &#x60;4xx&#x60; and &#x60;5xx&#x60; response codes are returned.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. (optional)</param>
        /// <param name="responseCode">Filter results by response status code. (optional)</param>
        /// <param name="webhookIDs">Filter results by webhook ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <returns>Task of MessageLogEntries</returns>
        public async System.Threading.Tasks.Task<MessageLogEntries> GetMessageLogsAsync (string entityType, string messageID = default(string), string changeType = default(string), string notificationIDs = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), byte[] cursor = default(byte[]), string period = default(string), bool? isSuccessful = default(bool?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), long? loyaltyProgramId = default(long?), long? responseCode = default(long?), string webhookIDs = default(string))
        {
             TalonOne.Client.ApiResponse<MessageLogEntries> localVarResponse = await GetMessageLogsAsyncWithHttpInfo(entityType, messageID, changeType, notificationIDs, createdBefore, createdAfter, cursor, period, isSuccessful, applicationId, campaignId, loyaltyProgramId, responseCode, webhookIDs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List message log entries Retrieve all message log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The entity type the log is related to. </param>
        /// <param name="messageID">Filter results by message ID. (optional)</param>
        /// <param name="changeType">Filter results by change type. (optional)</param>
        /// <param name="notificationIDs">Filter results by notification ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="cursor">A specific unique value in the database. If this value is not given, the server fetches results starting with the first record.  (optional)</param>
        /// <param name="period">Filter results by time period. Choose between the available relative time frames.  (optional)</param>
        /// <param name="isSuccessful">Indicates whether to return log entries with either successful or unsuccessful HTTP response codes. When set to&#x60;true&#x60;, only log entries with &#x60;2xx&#x60; response codes are returned. When set to &#x60;false&#x60;, only log entries with &#x60;4xx&#x60; and &#x60;5xx&#x60; response codes are returned.  (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. (optional)</param>
        /// <param name="responseCode">Filter results by response status code. (optional)</param>
        /// <param name="webhookIDs">Filter results by webhook ID (include up to 30 values, separated by a comma). (optional)</param>
        /// <returns>Task of ApiResponse (MessageLogEntries)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<MessageLogEntries>> GetMessageLogsAsyncWithHttpInfo (string entityType, string messageID = default(string), string changeType = default(string), string notificationIDs = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), byte[] cursor = default(byte[]), string period = default(string), bool? isSuccessful = default(bool?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), long? loyaltyProgramId = default(long?), long? responseCode = default(long?), string webhookIDs = default(string))
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'entityType' when calling ManagementApi->GetMessageLogs");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (messageID != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "messageID", messageID));
            }
            if (changeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "changeType", changeType));
            }
            if (notificationIDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "notificationIDs", notificationIDs));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (isSuccessful != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "isSuccessful", isSuccessful));
            }
            localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "entityType", entityType));
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (loyaltyProgramId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "loyaltyProgramId", loyaltyProgramId));
            }
            if (responseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "responseCode", responseCode));
            }
            if (webhookIDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookIDs", webhookIDs));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MessageLogEntries>("/v1/message_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile ID specified in the referral&#39;s AdvocateProfileIntegrationId field. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetReferralsWithoutTotalCount (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20012> localVarResponse = GetReferralsWithoutTotalCountWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile ID specified in the referral&#39;s AdvocateProfileIntegrationId field. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20012 > GetReferralsWithoutTotalCountWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (advocate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocate", advocate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20012 >("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReferralsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile ID specified in the referral&#39;s AdvocateProfileIntegrationId field. (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GetReferralsWithoutTotalCountAsync (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20012> localVarResponse = await GetReferralsWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List referrals List all referrals of the specified campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile ID specified in the referral&#39;s AdvocateProfileIntegrationId field. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20012>> GetReferralsWithoutTotalCountAsyncWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (advocate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "advocate", advocate));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReferralsWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get role Get the details of a specific role. To see all the roles, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <returns>RoleV2</returns>
        public RoleV2 GetRoleV2 (long roleId)
        {
             TalonOne.Client.ApiResponse<RoleV2> localVarResponse = GetRoleV2WithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get role Get the details of a specific role. To see all the roles, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <returns>ApiResponse of RoleV2</returns>
        public TalonOne.Client.ApiResponse< RoleV2 > GetRoleV2WithHttpInfo (long roleId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleId", TalonOne.Client.ClientUtils.ParameterToString(roleId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RoleV2 >("/v2/roles/{roleId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoleV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get role Get the details of a specific role. To see all the roles, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <returns>Task of RoleV2</returns>
        public async System.Threading.Tasks.Task<RoleV2> GetRoleV2Async (long roleId)
        {
             TalonOne.Client.ApiResponse<RoleV2> localVarResponse = await GetRoleV2AsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get role Get the details of a specific role. To see all the roles, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <returns>Task of ApiResponse (RoleV2)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<RoleV2>> GetRoleV2AsyncWithHttpInfo (long roleId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("roleId", TalonOne.Client.ClientUtils.ParameterToString(roleId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RoleV2>("/v2/roles/{roleId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoleV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Ruleset</returns>
        public Ruleset GetRuleset (long applicationId, long campaignId, long rulesetId)
        {
             TalonOne.Client.ApiResponse<Ruleset> localVarResponse = GetRulesetWithHttpInfo(applicationId, campaignId, rulesetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>ApiResponse of Ruleset</returns>
        public TalonOne.Client.ApiResponse< Ruleset > GetRulesetWithHttpInfo (long applicationId, long campaignId, long rulesetId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulesetId", TalonOne.Client.ClientUtils.ParameterToString(rulesetId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Ruleset >("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Task of Ruleset</returns>
        public async System.Threading.Tasks.Task<Ruleset> GetRulesetAsync (long applicationId, long campaignId, long rulesetId)
        {
             TalonOne.Client.ApiResponse<Ruleset> localVarResponse = await GetRulesetAsyncWithHttpInfo(applicationId, campaignId, rulesetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ruleset Retrieve the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="rulesetId">The ID of the ruleset.</param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Ruleset>> GetRulesetAsyncWithHttpInfo (long applicationId, long campaignId, long rulesetId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulesetId", TalonOne.Client.ClientUtils.ParameterToString(rulesetId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Ruleset>("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetRulesets (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2009> localVarResponse = GetRulesetsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public TalonOne.Client.ApiResponse< InlineResponse2009 > GetRulesetsWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2009 >("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRulesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> GetRulesetsAsync (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse2009> localVarResponse = await GetRulesetsAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaign rulesets List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse2009>> GetRulesetsAsyncWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRulesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get store Get store details for a specific store ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>Store</returns>
        public Store GetStore (long applicationId, string storeId)
        {
             TalonOne.Client.ApiResponse<Store> localVarResponse = GetStoreWithHttpInfo(applicationId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get store Get store details for a specific store ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>ApiResponse of Store</returns>
        public TalonOne.Client.ApiResponse< Store > GetStoreWithHttpInfo (long applicationId, string storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'storeId' when calling ManagementApi->GetStore");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("storeId", TalonOne.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Store >("/v1/applications/{applicationId}/stores/{storeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get store Get store details for a specific store ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> GetStoreAsync (long applicationId, string storeId)
        {
             TalonOne.Client.ApiResponse<Store> localVarResponse = await GetStoreAsyncWithHttpInfo(applicationId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get store Get store details for a specific store ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Store>> GetStoreAsyncWithHttpInfo (long applicationId, string storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'storeId' when calling ManagementApi->GetStore");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("storeId", TalonOne.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Store>("/v1/applications/{applicationId}/stores/{storeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>User</returns>
        public User GetUser (long userId)
        {
             TalonOne.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of User</returns>
        public TalonOne.Client.ApiResponse< User > GetUserWithHttpInfo (long userId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< User >("/v1/users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync (long userId)
        {
             TalonOne.Client.ApiResponse<User> localVarResponse = await GetUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<User>> GetUserAsyncWithHttpInfo (long userId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/v1/users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>InlineResponse20043</returns>
        public InlineResponse20043 GetUsers (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20043> localVarResponse = GetUsersWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20043 > GetUsersWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20043 >("/v1/users", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of InlineResponse20043</returns>
        public async System.Threading.Tasks.Task<InlineResponse20043> GetUsersAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20043> localVarResponse = await GetUsersAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users in account Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20043>> GetUsersAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20043>("/v1/users", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook Returns a webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Webhook</returns>
        public Webhook GetWebhook (long webhookId)
        {
             TalonOne.Client.ApiResponse<Webhook> localVarResponse = GetWebhookWithHttpInfo(webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook Returns a webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>ApiResponse of Webhook</returns>
        public TalonOne.Client.ApiResponse< Webhook > GetWebhookWithHttpInfo (long webhookId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("webhookId", TalonOne.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Webhook >("/v1/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook Returns a webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> GetWebhookAsync (long webhookId)
        {
             TalonOne.Client.ApiResponse<Webhook> localVarResponse = await GetWebhookAsyncWithHttpInfo(webhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get webhook Returns a webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. </param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (long webhookId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("webhookId", TalonOne.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Webhook>("/v1/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20040</returns>
        public InlineResponse20040 GetWebhookActivationLogs (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20040> localVarResponse = GetWebhookActivationLogsWithHttpInfo(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20040 > GetWebhookActivationLogsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (integrationRequestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationRequestUuid", integrationRequestUuid));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20040 >("/v1/webhook_activation_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookActivationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20040</returns>
        public async System.Threading.Tasks.Task<InlineResponse20040> GetWebhookActivationLogsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20040> localVarResponse = await GetWebhookActivationLogsAsyncWithHttpInfo(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List webhook activation log entries Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20040>> GetWebhookActivationLogsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (integrationRequestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationRequestUuid", integrationRequestUuid));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20040>("/v1/webhook_activation_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookActivationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        public InlineResponse20041 GetWebhookLogs (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20041> localVarResponse = GetWebhookLogsWithHttpInfo(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20041 > GetWebhookLogsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (requestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "requestUuid", requestUuid));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20041 >("/v1/webhook_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20041</returns>
        public async System.Threading.Tasks.Task<InlineResponse20041> GetWebhookLogsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             TalonOne.Client.ApiResponse<InlineResponse20041> localVarResponse = await GetWebhookLogsAsyncWithHttpInfo(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List webhook log entries Retrieve all webhook log entries.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by webhook id. (optional)</param>
        /// <param name="applicationId">Filter results by Application ID. (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20041>> GetWebhookLogsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (requestUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "requestUuid", requestUuid));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20041>("/v1/webhook_logs", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Checks if the given catalog or its attributes are referenced in the specified Application ID.  **Note**: If no Application ID is provided, we check for all connected Applications.  (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="creationType">Filter results by creation type. (optional)</param>
        /// <param name="visibility">Filter results by visibility. (optional)</param>
        /// <param name="outgoingIntegrationsTypeId">Filter results by outgoing integration type ID. (optional)</param>
        /// <param name="title">Filter results performing case-insensitive matching against the webhook title. (optional)</param>
        /// <returns>InlineResponse20039</returns>
        public InlineResponse20039 GetWebhooks (string applicationIds = default(string), string sort = default(string), long? pageSize = default(long?), long? skip = default(long?), string creationType = default(string), string visibility = default(string), long? outgoingIntegrationsTypeId = default(long?), string title = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20039> localVarResponse = GetWebhooksWithHttpInfo(applicationIds, sort, pageSize, skip, creationType, visibility, outgoingIntegrationsTypeId, title);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Checks if the given catalog or its attributes are referenced in the specified Application ID.  **Note**: If no Application ID is provided, we check for all connected Applications.  (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="creationType">Filter results by creation type. (optional)</param>
        /// <param name="visibility">Filter results by visibility. (optional)</param>
        /// <param name="outgoingIntegrationsTypeId">Filter results by outgoing integration type ID. (optional)</param>
        /// <param name="title">Filter results performing case-insensitive matching against the webhook title. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20039 > GetWebhooksWithHttpInfo (string applicationIds = default(string), string sort = default(string), long? pageSize = default(long?), long? skip = default(long?), string creationType = default(string), string visibility = default(string), long? outgoingIntegrationsTypeId = default(long?), string title = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (applicationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationIds", applicationIds));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (creationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "creationType", creationType));
            }
            if (visibility != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "visibility", visibility));
            }
            if (outgoingIntegrationsTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "outgoingIntegrationsTypeId", outgoingIntegrationsTypeId));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20039 >("/v1/webhooks", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Checks if the given catalog or its attributes are referenced in the specified Application ID.  **Note**: If no Application ID is provided, we check for all connected Applications.  (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="creationType">Filter results by creation type. (optional)</param>
        /// <param name="visibility">Filter results by visibility. (optional)</param>
        /// <param name="outgoingIntegrationsTypeId">Filter results by outgoing integration type ID. (optional)</param>
        /// <param name="title">Filter results performing case-insensitive matching against the webhook title. (optional)</param>
        /// <returns>Task of InlineResponse20039</returns>
        public async System.Threading.Tasks.Task<InlineResponse20039> GetWebhooksAsync (string applicationIds = default(string), string sort = default(string), long? pageSize = default(long?), long? skip = default(long?), string creationType = default(string), string visibility = default(string), long? outgoingIntegrationsTypeId = default(long?), string title = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20039> localVarResponse = await GetWebhooksAsyncWithHttpInfo(applicationIds, sort, pageSize, skip, creationType, visibility, outgoingIntegrationsTypeId, title);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List webhooks List all webhooks.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Checks if the given catalog or its attributes are referenced in the specified Application ID.  **Note**: If no Application ID is provided, we check for all connected Applications.  (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="creationType">Filter results by creation type. (optional)</param>
        /// <param name="visibility">Filter results by visibility. (optional)</param>
        /// <param name="outgoingIntegrationsTypeId">Filter results by outgoing integration type ID. (optional)</param>
        /// <param name="title">Filter results performing case-insensitive matching against the webhook title. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20039>> GetWebhooksAsyncWithHttpInfo (string applicationIds = default(string), string sort = default(string), long? pageSize = default(long?), long? skip = default(long?), string creationType = default(string), string visibility = default(string), long? outgoingIntegrationsTypeId = default(long?), string title = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (applicationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "applicationIds", applicationIds));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (creationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "creationType", creationType));
            }
            if (visibility != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "visibility", visibility));
            }
            if (outgoingIntegrationsTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "outgoingIntegrationsTypeId", outgoingIntegrationsTypeId));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20039>("/v1/webhooks", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import data into existing account-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportAccountCollection (long collectionId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportAccountCollectionWithHttpInfo(collectionId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import data into existing account-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportAccountCollectionWithHttpInfo (long collectionId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/collections/{collectionId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import data into existing account-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportAccountCollectionAsync (long collectionId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportAccountCollectionAsyncWithHttpInfo(collectionId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import data into existing account-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportAccountCollectionAsyncWithHttpInfo (long collectionId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/collections/{collectionId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import allowed values for attribute Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportAllowedList (long attributeId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportAllowedListWithHttpInfo(attributeId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import allowed values for attribute Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportAllowedListWithHttpInfo (long attributeId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/attributes/{attributeId}/allowed_list/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportAllowedList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import allowed values for attribute Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportAllowedListAsync (long attributeId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportAllowedListAsyncWithHttpInfo(attributeId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import allowed values for attribute Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportAllowedListAsyncWithHttpInfo (long attributeId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/attributes/{attributeId}/allowed_list/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportAllowedList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import audience members Upload a CSV file containing the integration IDs of the members you want to add to an audience.  The file should be sent as multipart data and should contain only the following column (required): - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile.  The import **replaces** the previous list of audience members.  **Note:** We recommend limiting your file size to 500MB.  Example:  &#x60;&#x60;&#x60;text profileintegrationid charles alexa &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportAudiencesMemberships (long audienceId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportAudiencesMembershipsWithHttpInfo(audienceId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import audience members Upload a CSV file containing the integration IDs of the members you want to add to an audience.  The file should be sent as multipart data and should contain only the following column (required): - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile.  The import **replaces** the previous list of audience members.  **Note:** We recommend limiting your file size to 500MB.  Example:  &#x60;&#x60;&#x60;text profileintegrationid charles alexa &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportAudiencesMembershipsWithHttpInfo (long audienceId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("audienceId", TalonOne.Client.ClientUtils.ParameterToString(audienceId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/audiences/{audienceId}/memberships/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportAudiencesMemberships", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import audience members Upload a CSV file containing the integration IDs of the members you want to add to an audience.  The file should be sent as multipart data and should contain only the following column (required): - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile.  The import **replaces** the previous list of audience members.  **Note:** We recommend limiting your file size to 500MB.  Example:  &#x60;&#x60;&#x60;text profileintegrationid charles alexa &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportAudiencesMembershipsAsync (long audienceId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportAudiencesMembershipsAsyncWithHttpInfo(audienceId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import audience members Upload a CSV file containing the integration IDs of the members you want to add to an audience.  The file should be sent as multipart data and should contain only the following column (required): - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile.  The import **replaces** the previous list of audience members.  **Note:** We recommend limiting your file size to 500MB.  Example:  &#x60;&#x60;&#x60;text profileintegrationid charles alexa &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceId">The ID of the audience.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportAudiencesMembershipsAsyncWithHttpInfo (long audienceId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("audienceId", TalonOne.Client.ClientUtils.ParameterToString(audienceId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/audiences/{audienceId}/memberships/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportAudiencesMemberships", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import campaign store budgets Upload a CSV file containing store budgets for a given campaign.  Send the file as multipart data.  The CSV file **must** only contain the following columns: - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store.  The import **replaces** the previous list of store budgets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportCampaignStoreBudget (long applicationId, long campaignId, string action = default(string), string period = default(string), string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportCampaignStoreBudgetWithHttpInfo(applicationId, campaignId, action, period, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import campaign store budgets Upload a CSV file containing store budgets for a given campaign.  Send the file as multipart data.  The CSV file **must** only contain the following columns: - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store.  The import **replaces** the previous list of store budgets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportCampaignStoreBudgetWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string), string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCampaignStoreBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import campaign store budgets Upload a CSV file containing store budgets for a given campaign.  Send the file as multipart data.  The CSV file **must** only contain the following columns: - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store.  The import **replaces** the previous list of store budgets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportCampaignStoreBudgetAsync (long applicationId, long campaignId, string action = default(string), string period = default(string), string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportCampaignStoreBudgetAsyncWithHttpInfo(applicationId, campaignId, action, period, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import campaign store budgets Upload a CSV file containing store budgets for a given campaign.  Send the file as multipart data.  The CSV file **must** only contain the following columns: - &#x60;store_integration_id&#x60;: The identifier of the store. - &#x60;limit&#x60;: The budget limit for the store.  The import **replaces** the previous list of store budgets. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportCampaignStoreBudgetAsyncWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string), string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCampaignStoreBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import stores Upload a CSV file containing the stores you want to link to a specific campaign.  Send the file as multipart data.  The CSV file **must** only contain the following column: - &#x60;store_integration_id&#x60;: The identifier of the store.  The import **replaces** the previous list of stores linked to the campaign. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportCampaignStores (long applicationId, long campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportCampaignStoresWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import stores Upload a CSV file containing the stores you want to link to a specific campaign.  Send the file as multipart data.  The CSV file **must** only contain the following column: - &#x60;store_integration_id&#x60;: The identifier of the store.  The import **replaces** the previous list of stores linked to the campaign. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportCampaignStoresWithHttpInfo (long applicationId, long campaignId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCampaignStores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import stores Upload a CSV file containing the stores you want to link to a specific campaign.  Send the file as multipart data.  The CSV file **must** only contain the following column: - &#x60;store_integration_id&#x60;: The identifier of the store.  The import **replaces** the previous list of stores linked to the campaign. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportCampaignStoresAsync (long applicationId, long campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportCampaignStoresAsyncWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import stores Upload a CSV file containing the stores you want to link to a specific campaign.  Send the file as multipart data.  The CSV file **must** only contain the following column: - &#x60;store_integration_id&#x60;: The identifier of the store.  The import **replaces** the previous list of stores linked to the campaign. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportCampaignStoresAsyncWithHttpInfo (long applicationId, long campaignId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCampaignStores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import data into existing campaign-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportCollection (long applicationId, long campaignId, long collectionId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportCollectionWithHttpInfo(applicationId, campaignId, collectionId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import data into existing campaign-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportCollectionWithHttpInfo (long applicationId, long campaignId, long collectionId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import data into existing campaign-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportCollectionAsync (long applicationId, long campaignId, long collectionId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportCollectionAsyncWithHttpInfo(applicationId, campaignId, collectionId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import data into existing campaign-level collection Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportCollectionAsyncWithHttpInfo (long applicationId, long campaignId, long collectionId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import coupons Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A JSON object describing _custom_ coupon attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the coupon entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="skipDuplicates">An indicator of whether to skip duplicate coupon values instead of causing an error. Duplicate values are ignored when &#x60;skipDuplicates&#x3D;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportCoupons (long applicationId, long campaignId, bool? skipDuplicates = default(bool?), string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportCouponsWithHttpInfo(applicationId, campaignId, skipDuplicates, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import coupons Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A JSON object describing _custom_ coupon attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the coupon entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="skipDuplicates">An indicator of whether to skip duplicate coupon values instead of causing an error. Duplicate values are ignored when &#x60;skipDuplicates&#x3D;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportCouponsWithHttpInfo (long applicationId, long campaignId, bool? skipDuplicates = default(bool?), string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (skipDuplicates != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skipDuplicates", skipDuplicates));
            }
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/applications/{applicationId}/campaigns/{campaignId}/import_coupons", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import coupons Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A JSON object describing _custom_ coupon attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the coupon entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="skipDuplicates">An indicator of whether to skip duplicate coupon values instead of causing an error. Duplicate values are ignored when &#x60;skipDuplicates&#x3D;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportCouponsAsync (long applicationId, long campaignId, bool? skipDuplicates = default(bool?), string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportCouponsAsyncWithHttpInfo(applicationId, campaignId, skipDuplicates, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import coupons Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the recipient of the coupon.   Only the customer with this integration ID can redeem this code. Available only for personal codes. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A JSON object describing _custom_ coupon attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the coupon entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="skipDuplicates">An indicator of whether to skip duplicate coupon values instead of causing an error. Duplicate values are ignored when &#x60;skipDuplicates&#x3D;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportCouponsAsyncWithHttpInfo (long applicationId, long campaignId, bool? skipDuplicates = default(bool?), string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (skipDuplicates != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skipDuplicates", skipDuplicates));
            }
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/applications/{applicationId}/campaigns/{campaignId}/import_coupons", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import loyalty cards Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card. The identifiers should be separated with a semicolon (;).  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportLoyaltyCards (long loyaltyProgramId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportLoyaltyCardsWithHttpInfo(loyaltyProgramId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import loyalty cards Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card. The identifiers should be separated with a semicolon (;).  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportLoyaltyCardsWithHttpInfo (long loyaltyProgramId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/loyalty_programs/{loyaltyProgramId}/import_cards", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import loyalty cards Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card. The identifiers should be separated with a semicolon (;).  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportLoyaltyCardsAsync (long loyaltyProgramId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportLoyaltyCardsAsyncWithHttpInfo(loyaltyProgramId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import loyalty cards Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card. The identifiers should be separated with a semicolon (;).  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportLoyaltyCardsAsyncWithHttpInfo (long loyaltyProgramId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/loyalty_programs/{loyaltyProgramId}/import_cards", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyCards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import customers into loyalty tiers Upload a CSV file containing existing customers to be assigned to existing tiers. Send the file as multipart data.  **Important:** This endpoint only works with loyalty programs with advanced tiers (with expiration and downgrade policy) feature enabled.  The CSV file should contain the following columns: - &#x60;subledgerid&#x60; (optional): The ID of the subledger. If this field is empty, the main ledger will be used. - &#x60;customerprofileid&#x60;: The integration ID of the customer profile to whom the tier should be assigned. - &#x60;tiername&#x60;: The name of an existing tier to assign to the customer. - &#x60;expirydate&#x60;: The expiration date of the tier when the tier is reevaluated. It should be a future date.  About customer assignment to a tier: - If the customer isn&#39;t already in a tier, the customer is assigned to the specified tier during the tier import. - If the customer is already in the tier that&#39;s specified in the CSV file, only the expiration date is updated.  **Note:** We recommend not using this endpoint to update the tier of a customer. To update a customer&#39;s tier, you can [add](/management-api#tag/Loyalty/operation/addLoyaltyPoints) or [deduct](/management-api#tag/Loyalty/operation/removeLoyaltyPoints) their loyalty points.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:** &#x60;&#x60;&#x60;csv subledgerid,customerprofileid,tiername,expirydate SUB1,alexa,Gold,2024-03-21T07:32:14Z ,george,Silver,2025-04-16T21:12:37Z SUB2,avocado,Bronze,2026-05-03T11:47:01Z &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportLoyaltyCustomersTiers (long loyaltyProgramId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportLoyaltyCustomersTiersWithHttpInfo(loyaltyProgramId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import customers into loyalty tiers Upload a CSV file containing existing customers to be assigned to existing tiers. Send the file as multipart data.  **Important:** This endpoint only works with loyalty programs with advanced tiers (with expiration and downgrade policy) feature enabled.  The CSV file should contain the following columns: - &#x60;subledgerid&#x60; (optional): The ID of the subledger. If this field is empty, the main ledger will be used. - &#x60;customerprofileid&#x60;: The integration ID of the customer profile to whom the tier should be assigned. - &#x60;tiername&#x60;: The name of an existing tier to assign to the customer. - &#x60;expirydate&#x60;: The expiration date of the tier when the tier is reevaluated. It should be a future date.  About customer assignment to a tier: - If the customer isn&#39;t already in a tier, the customer is assigned to the specified tier during the tier import. - If the customer is already in the tier that&#39;s specified in the CSV file, only the expiration date is updated.  **Note:** We recommend not using this endpoint to update the tier of a customer. To update a customer&#39;s tier, you can [add](/management-api#tag/Loyalty/operation/addLoyaltyPoints) or [deduct](/management-api#tag/Loyalty/operation/removeLoyaltyPoints) their loyalty points.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:** &#x60;&#x60;&#x60;csv subledgerid,customerprofileid,tiername,expirydate SUB1,alexa,Gold,2024-03-21T07:32:14Z ,george,Silver,2025-04-16T21:12:37Z SUB2,avocado,Bronze,2026-05-03T11:47:01Z &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportLoyaltyCustomersTiersWithHttpInfo (long loyaltyProgramId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/loyalty_programs/{loyaltyProgramId}/import_customers_tiers", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyCustomersTiers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import customers into loyalty tiers Upload a CSV file containing existing customers to be assigned to existing tiers. Send the file as multipart data.  **Important:** This endpoint only works with loyalty programs with advanced tiers (with expiration and downgrade policy) feature enabled.  The CSV file should contain the following columns: - &#x60;subledgerid&#x60; (optional): The ID of the subledger. If this field is empty, the main ledger will be used. - &#x60;customerprofileid&#x60;: The integration ID of the customer profile to whom the tier should be assigned. - &#x60;tiername&#x60;: The name of an existing tier to assign to the customer. - &#x60;expirydate&#x60;: The expiration date of the tier when the tier is reevaluated. It should be a future date.  About customer assignment to a tier: - If the customer isn&#39;t already in a tier, the customer is assigned to the specified tier during the tier import. - If the customer is already in the tier that&#39;s specified in the CSV file, only the expiration date is updated.  **Note:** We recommend not using this endpoint to update the tier of a customer. To update a customer&#39;s tier, you can [add](/management-api#tag/Loyalty/operation/addLoyaltyPoints) or [deduct](/management-api#tag/Loyalty/operation/removeLoyaltyPoints) their loyalty points.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:** &#x60;&#x60;&#x60;csv subledgerid,customerprofileid,tiername,expirydate SUB1,alexa,Gold,2024-03-21T07:32:14Z ,george,Silver,2025-04-16T21:12:37Z SUB2,avocado,Bronze,2026-05-03T11:47:01Z &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportLoyaltyCustomersTiersAsync (long loyaltyProgramId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportLoyaltyCustomersTiersAsyncWithHttpInfo(loyaltyProgramId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import customers into loyalty tiers Upload a CSV file containing existing customers to be assigned to existing tiers. Send the file as multipart data.  **Important:** This endpoint only works with loyalty programs with advanced tiers (with expiration and downgrade policy) feature enabled.  The CSV file should contain the following columns: - &#x60;subledgerid&#x60; (optional): The ID of the subledger. If this field is empty, the main ledger will be used. - &#x60;customerprofileid&#x60;: The integration ID of the customer profile to whom the tier should be assigned. - &#x60;tiername&#x60;: The name of an existing tier to assign to the customer. - &#x60;expirydate&#x60;: The expiration date of the tier when the tier is reevaluated. It should be a future date.  About customer assignment to a tier: - If the customer isn&#39;t already in a tier, the customer is assigned to the specified tier during the tier import. - If the customer is already in the tier that&#39;s specified in the CSV file, only the expiration date is updated.  **Note:** We recommend not using this endpoint to update the tier of a customer. To update a customer&#39;s tier, you can [add](/management-api#tag/Loyalty/operation/addLoyaltyPoints) or [deduct](/management-api#tag/Loyalty/operation/removeLoyaltyPoints) their loyalty points.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:** &#x60;&#x60;&#x60;csv subledgerid,customerprofileid,tiername,expirydate SUB1,alexa,Gold,2024-03-21T07:32:14Z ,george,Silver,2025-04-16T21:12:37Z SUB2,avocado,Bronze,2026-05-03T11:47:01Z &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportLoyaltyCustomersTiersAsyncWithHttpInfo (long loyaltyProgramId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/loyalty_programs/{loyaltyProgramId}/import_customers_tiers", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyCustomersTiers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import loyalty points Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the type of loyalty program, you can import points into a given customer profile or loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported.    **Note**: If the customer profile does not exist, it will be created. The profile will not be visible in any Application   until a session or profile update is received for that profile. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60; (optional): The earliest date when the points can be redeemed. The points are &#x60;active&#x60; from this date until the expiration date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;immediate&#x60;. Empty or missing values are considered &#x60;immediate&#x60;. - &#x60;expirydate&#x60; (optional): The latest date when the points can be redeemed. The points are &#x60;expired&#x60; after this date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;unlimited&#x60;. Empty or missing values are considered &#x60;unlimited&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="notificationsEnabled">Indicates whether the points import triggers notifications about its effects. For example, a notification is sent if the import upgrades a customer&#39;s tier or offsets their negative points balance.  This parameter is optional and defaults to &#x60;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportLoyaltyPoints (long loyaltyProgramId, bool? notificationsEnabled = default(bool?), string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportLoyaltyPointsWithHttpInfo(loyaltyProgramId, notificationsEnabled, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import loyalty points Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the type of loyalty program, you can import points into a given customer profile or loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported.    **Note**: If the customer profile does not exist, it will be created. The profile will not be visible in any Application   until a session or profile update is received for that profile. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60; (optional): The earliest date when the points can be redeemed. The points are &#x60;active&#x60; from this date until the expiration date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;immediate&#x60;. Empty or missing values are considered &#x60;immediate&#x60;. - &#x60;expirydate&#x60; (optional): The latest date when the points can be redeemed. The points are &#x60;expired&#x60; after this date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;unlimited&#x60;. Empty or missing values are considered &#x60;unlimited&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="notificationsEnabled">Indicates whether the points import triggers notifications about its effects. For example, a notification is sent if the import upgrades a customer&#39;s tier or offsets their negative points balance.  This parameter is optional and defaults to &#x60;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportLoyaltyPointsWithHttpInfo (long loyaltyProgramId, bool? notificationsEnabled = default(bool?), string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (notificationsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "notificationsEnabled", notificationsEnabled));
            }
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/loyalty_programs/{loyaltyProgramId}/import_points", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import loyalty points Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the type of loyalty program, you can import points into a given customer profile or loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported.    **Note**: If the customer profile does not exist, it will be created. The profile will not be visible in any Application   until a session or profile update is received for that profile. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60; (optional): The earliest date when the points can be redeemed. The points are &#x60;active&#x60; from this date until the expiration date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;immediate&#x60;. Empty or missing values are considered &#x60;immediate&#x60;. - &#x60;expirydate&#x60; (optional): The latest date when the points can be redeemed. The points are &#x60;expired&#x60; after this date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;unlimited&#x60;. Empty or missing values are considered &#x60;unlimited&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="notificationsEnabled">Indicates whether the points import triggers notifications about its effects. For example, a notification is sent if the import upgrades a customer&#39;s tier or offsets their negative points balance.  This parameter is optional and defaults to &#x60;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportLoyaltyPointsAsync (long loyaltyProgramId, bool? notificationsEnabled = default(bool?), string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportLoyaltyPointsAsyncWithHttpInfo(loyaltyProgramId, notificationsEnabled, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import loyalty points Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the type of loyalty program, you can import points into a given customer profile or loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported.    **Note**: If the customer profile does not exist, it will be created. The profile will not be visible in any Application   until a session or profile update is received for that profile. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60; (optional): The earliest date when the points can be redeemed. The points are &#x60;active&#x60; from this date until the expiration date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;immediate&#x60;. Empty or missing values are considered &#x60;immediate&#x60;. - &#x60;expirydate&#x60; (optional): The latest date when the points can be redeemed. The points are &#x60;expired&#x60; after this date.    **Note**: It must be an RFC3339 timestamp string or string &#x60;unlimited&#x60;. Empty or missing values are considered &#x60;unlimited&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the loyalty program. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="notificationsEnabled">Indicates whether the points import triggers notifications about its effects. For example, a notification is sent if the import upgrades a customer&#39;s tier or offsets their negative points balance.  This parameter is optional and defaults to &#x60;true&#x60;.  (optional)</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportLoyaltyPointsAsyncWithHttpInfo (long loyaltyProgramId, bool? notificationsEnabled = default(bool?), string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            if (notificationsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "notificationsEnabled", notificationsEnabled));
            }
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/loyalty_programs/{loyaltyProgramId}/import_points", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): The code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  The start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: The last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A JSON object describing _custom_ giveaway attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated with the giveaway entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;provider\&quot;: \&quot;myPartnerCompany\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone setting of your choice. The values are converted to UTC internally by Talon.One.  **Note:**  - We recommend limiting your file size to 500MB. - You can import the same code multiple times. Duplicate codes are treated and distributed to customers as unique codes.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportPoolGiveaways (long poolId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportPoolGiveawaysWithHttpInfo(poolId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): The code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  The start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: The last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A JSON object describing _custom_ giveaway attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated with the giveaway entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;provider\&quot;: \&quot;myPartnerCompany\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone setting of your choice. The values are converted to UTC internally by Talon.One.  **Note:**  - We recommend limiting your file size to 500MB. - You can import the same code multiple times. Duplicate codes are treated and distributed to customers as unique codes.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportPoolGiveawaysWithHttpInfo (long poolId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("poolId", TalonOne.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/giveaways/pools/{poolId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportPoolGiveaways", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): The code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  The start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: The last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A JSON object describing _custom_ giveaway attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated with the giveaway entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;provider\&quot;: \&quot;myPartnerCompany\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone setting of your choice. The values are converted to UTC internally by Talon.One.  **Note:**  - We recommend limiting your file size to 500MB. - You can import the same code multiple times. Duplicate codes are treated and distributed to customers as unique codes.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportPoolGiveawaysAsync (long poolId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportPoolGiveawaysAsyncWithHttpInfo(poolId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import giveaway codes into a giveaway pool Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): The code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  The start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: The last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A JSON object describing _custom_ giveaway attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated with the giveaway entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;provider\&quot;: \&quot;myPartnerCompany\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone setting of your choice. The values are converted to UTC internally by Talon.One.  **Note:**  - We recommend limiting your file size to 500MB. - You can import the same code multiple times. Duplicate codes are treated and distributed to customers as unique codes.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportPoolGiveawaysAsyncWithHttpInfo (long poolId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("poolId", TalonOne.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/giveaways/pools/{poolId}/import", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportPoolGiveaways", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import referrals Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A JSON object describing _custom_ referral attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the referral entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Important:** When you import a CSV file with referrals, a [customer profile](https://docs.talon.one/docs/dev/concepts/entities/customer-profiles) is **not** automatically created for each &#x60;advocateprofileintegrationid&#x60; column value. Use the [Update customer profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint or the [Update multiple customer profiles](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfilesV2) endpoint to create the customer profiles.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportReferrals (long applicationId, long campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = ImportReferralsWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import referrals Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A JSON object describing _custom_ referral attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the referral entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Important:** When you import a CSV file with referrals, a [customer profile](https://docs.talon.one/docs/dev/concepts/entities/customer-profiles) is **not** automatically created for each &#x60;advocateprofileintegrationid&#x60; column value. Use the [Update customer profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint or the [Update multiple customer profiles](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfilesV2) endpoint to create the customer profiles.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public TalonOne.Client.ApiResponse< Import > ImportReferralsWithHttpInfo (long applicationId, long campaignId, string upFile = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Import >("/v1/applications/{applicationId}/campaigns/{campaignId}/import_referrals", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportReferrals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import referrals Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A JSON object describing _custom_ referral attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the referral entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Important:** When you import a CSV file with referrals, a [customer profile](https://docs.talon.one/docs/dev/concepts/entities/customer-profiles) is **not** automatically created for each &#x60;advocateprofileintegrationid&#x60; column value. Use the [Update customer profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint or the [Update multiple customer profiles](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfilesV2) endpoint to create the customer profiles.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportReferralsAsync (long applicationId, long campaignId, string upFile = default(string))
        {
             TalonOne.Client.ApiResponse<Import> localVarResponse = await ImportReferralsAsyncWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import referrals Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A JSON object describing _custom_ referral attribute names and their values, enclosed with double quotation marks.    For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated with the referral entity, the object in the CSV file, when opened in a text editor, must be: &#x60;\&quot;{\&quot;category\&quot;: \&quot;10_off\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Important:** When you import a CSV file with referrals, a [customer profile](https://docs.talon.one/docs/dev/concepts/entities/customer-profiles) is **not** automatically created for each &#x60;advocateprofileintegrationid&#x60; column value. Use the [Update customer profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint or the [Update multiple customer profiles](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfilesV2) endpoint to create the customer profiles.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="upFile">The file containing the data that is being imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Import>> ImportReferralsAsyncWithHttpInfo (long applicationId, long campaignId, string upFile = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            MemoryStream upFileStream = TalonOne.Client.ClientUtils.ParameterToStream(upFile);
            if (upFile != null)
            {
                localVarRequestOptions.FileParameters.Add("upFile", upFileStream); // file parameter
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Import>("/v1/applications/{applicationId}/campaigns/{campaignId}/import_referrals", localVarRequestOptions, this.Configuration);

            if (upFileStream != null)
            {
                upFileStream.Close();
                upFileStream.Dispose();
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportReferrals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite user from identity provider [Invite a user](https://docs.talon.one/docs/product/account/account-settings/managing-users#inviting-a-user) from an external identity provider to Talon.One by sending an invitation to their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void InviteUserExternal (NewExternalInvitation body)
        {
             InviteUserExternalWithHttpInfo(body);
        }

        /// <summary>
        /// Invite user from identity provider [Invite a user](https://docs.talon.one/docs/product/account/account-settings/managing-users#inviting-a-user) from an external identity provider to Talon.One by sending an invitation to their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> InviteUserExternalWithHttpInfo (NewExternalInvitation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->InviteUserExternal");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/users/invite", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUserExternal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite user from identity provider [Invite a user](https://docs.talon.one/docs/product/account/account-settings/managing-users#inviting-a-user) from an external identity provider to Talon.One by sending an invitation to their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InviteUserExternalAsync (NewExternalInvitation body)
        {
             await InviteUserExternalAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Invite user from identity provider [Invite a user](https://docs.talon.one/docs/product/account/account-settings/managing-users#inviting-a-user) from an external identity provider to Talon.One by sending an invitation to their email address. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> InviteUserExternalAsyncWithHttpInfo (NewExternalInvitation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->InviteUserExternal");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/users/invite", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUserExternal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections in account List account-level collections in the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 ListAccountCollections (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20020> localVarResponse = ListAccountCollectionsWithHttpInfo(pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List collections in account List account-level collections in the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20020 > ListAccountCollectionsWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20020 >("/v1/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections in account List account-level collections in the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> ListAccountCollectionsAsync (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20020> localVarResponse = await ListAccountCollectionsAsyncWithHttpInfo(pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List collections in account List account-level collections in the account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20020>> ListAccountCollectionsAsyncWithHttpInfo (long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/v1/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List achievements List all the achievements for a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="title">Filter by the display name for the achievement in the campaign manager.  **Note**: If no &#x60;title&#x60; is provided, all the achievements from the campaign are returned.  (optional)</param>
        /// <returns>InlineResponse20050</returns>
        public InlineResponse20050 ListAchievements (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string title = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20050> localVarResponse = ListAchievementsWithHttpInfo(applicationId, campaignId, pageSize, skip, title);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List achievements List all the achievements for a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="title">Filter by the display name for the achievement in the campaign manager.  **Note**: If no &#x60;title&#x60; is provided, all the achievements from the campaign are returned.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20050 > ListAchievementsWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string title = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20050 >("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAchievements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List achievements List all the achievements for a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="title">Filter by the display name for the achievement in the campaign manager.  **Note**: If no &#x60;title&#x60; is provided, all the achievements from the campaign are returned.  (optional)</param>
        /// <returns>Task of InlineResponse20050</returns>
        public async System.Threading.Tasks.Task<InlineResponse20050> ListAchievementsAsync (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string title = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20050> localVarResponse = await ListAchievementsAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, title);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List achievements List all the achievements for a specific campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 50)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="title">Filter by the display name for the achievement in the campaign manager.  **Note**: If no &#x60;title&#x60; is provided, all the achievements from the campaign are returned.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20050>> ListAchievementsAsyncWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string title = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20050>("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAchievements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20046</returns>
        public InlineResponse20046 ListAllRolesV2 ()
        {
             TalonOne.Client.ApiResponse<InlineResponse20046> localVarResponse = ListAllRolesV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20046 > ListAllRolesV2WithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20046 >("/v2/roles", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllRolesV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20046</returns>
        public async System.Threading.Tasks.Task<InlineResponse20046> ListAllRolesV2Async ()
        {
             TalonOne.Client.ApiResponse<InlineResponse20046> localVarResponse = await ListAllRolesV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List roles List all roles.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20046>> ListAllRolesV2AsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20046>("/v2/roles", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllRolesV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign store budget limits Return the store budget limits for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>InlineResponse20048</returns>
        public InlineResponse20048 ListCampaignStoreBudgetLimits (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20048> localVarResponse = ListCampaignStoreBudgetLimitsWithHttpInfo(applicationId, campaignId, action, period);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaign store budget limits Return the store budget limits for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20048 > ListCampaignStoreBudgetLimitsWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20048 >("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCampaignStoreBudgetLimits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List campaign store budget limits Return the store budget limits for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of InlineResponse20048</returns>
        public async System.Threading.Tasks.Task<InlineResponse20048> ListCampaignStoreBudgetLimitsAsync (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20048> localVarResponse = await ListCampaignStoreBudgetLimitsAsyncWithHttpInfo(applicationId, campaignId, action, period);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaign store budget limits Return the store budget limits for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="action">The action that this budget is limiting. (optional)</param>
        /// <param name="period">The period to which the limit applies.  **Note**: For budgets with no period, set this to &#x60;overall&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20048>> ListCampaignStoreBudgetLimitsAsyncWithHttpInfo (long applicationId, long campaignId, string action = default(string), string period = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20048>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCampaignStoreBudgetLimits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List items in a catalog Return a paginated list of cart items in the given catalog. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogId">The ID of the catalog. You can find the ID in the Campaign Manager in **Account** &gt; **Tools** &gt; **Cart item catalogs**.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="sku">Filter results by one or more SKUs. Must be exact match. (optional)</param>
        /// <param name="productNames">Filter results by one or more product names. Must be exact match. (optional)</param>
        /// <returns>InlineResponse20037</returns>
        public InlineResponse20037 ListCatalogItems (long catalogId, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?), List<string> sku = default(List<string>), List<string> productNames = default(List<string>))
        {
             TalonOne.Client.ApiResponse<InlineResponse20037> localVarResponse = ListCatalogItemsWithHttpInfo(catalogId, pageSize, skip, withTotalResultSize, sku, productNames);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List items in a catalog Return a paginated list of cart items in the given catalog. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogId">The ID of the catalog. You can find the ID in the Campaign Manager in **Account** &gt; **Tools** &gt; **Cart item catalogs**.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="sku">Filter results by one or more SKUs. Must be exact match. (optional)</param>
        /// <param name="productNames">Filter results by one or more product names. Must be exact match. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20037 > ListCatalogItemsWithHttpInfo (long catalogId, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?), List<string> sku = default(List<string>), List<string> productNames = default(List<string>))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("catalogId", TalonOne.Client.ClientUtils.ParameterToString(catalogId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (sku != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("multi", "sku", sku));
            }
            if (productNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("multi", "productNames", productNames));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20037 >("/v1/catalogs/{catalogId}/items", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCatalogItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List items in a catalog Return a paginated list of cart items in the given catalog. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogId">The ID of the catalog. You can find the ID in the Campaign Manager in **Account** &gt; **Tools** &gt; **Cart item catalogs**.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="sku">Filter results by one or more SKUs. Must be exact match. (optional)</param>
        /// <param name="productNames">Filter results by one or more product names. Must be exact match. (optional)</param>
        /// <returns>Task of InlineResponse20037</returns>
        public async System.Threading.Tasks.Task<InlineResponse20037> ListCatalogItemsAsync (long catalogId, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?), List<string> sku = default(List<string>), List<string> productNames = default(List<string>))
        {
             TalonOne.Client.ApiResponse<InlineResponse20037> localVarResponse = await ListCatalogItemsAsyncWithHttpInfo(catalogId, pageSize, skip, withTotalResultSize, sku, productNames);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List items in a catalog Return a paginated list of cart items in the given catalog. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogId">The ID of the catalog. You can find the ID in the Campaign Manager in **Account** &gt; **Tools** &gt; **Cart item catalogs**.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="sku">Filter results by one or more SKUs. Must be exact match. (optional)</param>
        /// <param name="productNames">Filter results by one or more product names. Must be exact match. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20037>> ListCatalogItemsAsyncWithHttpInfo (long catalogId, long? pageSize = default(long?), long? skip = default(long?), bool? withTotalResultSize = default(bool?), List<string> sku = default(List<string>), List<string> productNames = default(List<string>))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("catalogId", TalonOne.Client.ClientUtils.ParameterToString(catalogId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (sku != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("multi", "sku", sku));
            }
            if (productNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("multi", "productNames", productNames));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20037>("/v1/catalogs/{catalogId}/items", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCatalogItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections in campaign List collections in a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 ListCollections (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20020> localVarResponse = ListCollectionsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List collections in campaign List collections in a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20020 > ListCollectionsWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20020 >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections in campaign List collections in a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> ListCollectionsAsync (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20020> localVarResponse = await ListCollectionsAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List collections in campaign List collections in a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20020>> ListCollectionsAsyncWithHttpInfo (long applicationId, long campaignId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections in Application List campaign-level collections from all campaigns in a given Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 ListCollectionsInApplication (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20020> localVarResponse = ListCollectionsInApplicationWithHttpInfo(applicationId, pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List collections in Application List campaign-level collections from all campaigns in a given Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20020 > ListCollectionsInApplicationWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20020 >("/v1/applications/{applicationId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollectionsInApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List collections in Application List campaign-level collections from all campaigns in a given Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> ListCollectionsInApplicationAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20020> localVarResponse = await ListCollectionsInApplicationAsyncWithHttpInfo(applicationId, pageSize, skip, sort, withTotalResultSize, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List collections in Application List campaign-level collections from all campaigns in a given Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="name">Filter by collection name. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20020>> ListCollectionsInApplicationAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), string name = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/v1/applications/{applicationId}/collections", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollectionsInApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List stores List all stores for a specific Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="name">The name of the store. (optional)</param>
        /// <param name="integrationId">The integration ID of the store. (optional)</param>
        /// <param name="query">Filter results by &#x60;name&#x60; or &#x60;integrationId&#x60;. (optional)</param>
        /// <returns>InlineResponse20047</returns>
        public InlineResponse20047 ListStores (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), decimal? campaignId = default(decimal?), string name = default(string), string integrationId = default(string), string query = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20047> localVarResponse = ListStoresWithHttpInfo(applicationId, pageSize, skip, sort, withTotalResultSize, campaignId, name, integrationId, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List stores List all stores for a specific Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="name">The name of the store. (optional)</param>
        /// <param name="integrationId">The integration ID of the store. (optional)</param>
        /// <param name="query">Filter results by &#x60;name&#x60; or &#x60;integrationId&#x60;. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20047 > ListStoresWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), decimal? campaignId = default(decimal?), string name = default(string), string integrationId = default(string), string query = default(string))
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20047 >("/v1/applications/{applicationId}/stores", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List stores List all stores for a specific Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="name">The name of the store. (optional)</param>
        /// <param name="integrationId">The integration ID of the store. (optional)</param>
        /// <param name="query">Filter results by &#x60;name&#x60; or &#x60;integrationId&#x60;. (optional)</param>
        /// <returns>Task of InlineResponse20047</returns>
        public async System.Threading.Tasks.Task<InlineResponse20047> ListStoresAsync (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), decimal? campaignId = default(decimal?), string name = default(string), string integrationId = default(string), string query = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20047> localVarResponse = await ListStoresAsyncWithHttpInfo(applicationId, pageSize, skip, sort, withTotalResultSize, campaignId, name, integrationId, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List stores List all stores for a specific Application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query.  (optional)</param>
        /// <param name="campaignId">Filter results by campaign ID. (optional)</param>
        /// <param name="name">The name of the store. (optional)</param>
        /// <param name="integrationId">The integration ID of the store. (optional)</param>
        /// <param name="query">Filter results by &#x60;name&#x60; or &#x60;integrationId&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20047>> ListStoresAsyncWithHttpInfo (long applicationId, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), bool? withTotalResultSize = default(bool?), decimal? campaignId = default(decimal?), string name = default(string), string integrationId = default(string), string query = default(string))
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (withTotalResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "withTotalResultSize", withTotalResultSize));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignId", campaignId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (integrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "integrationId", integrationId));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20047>("/v1/applications/{applicationId}/stores", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Okta API ownership Validate the ownership of the API through a challenge-response mechanism.  This challenger endpoint is used by Okta to confirm that communication between Talon.One and Okta is correctly configured and accessible for provisioning and deprovisioning of Talon.One users, and that only Talon.One can receive and respond to events from Okta. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void OktaEventHandlerChallenge ()
        {
             OktaEventHandlerChallengeWithHttpInfo();
        }

        /// <summary>
        /// Validate Okta API ownership Validate the ownership of the API through a challenge-response mechanism.  This challenger endpoint is used by Okta to confirm that communication between Talon.One and Okta is correctly configured and accessible for provisioning and deprovisioning of Talon.One users, and that only Talon.One can receive and respond to events from Okta. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> OktaEventHandlerChallengeWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/provisioning/okta", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OktaEventHandlerChallenge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Okta API ownership Validate the ownership of the API through a challenge-response mechanism.  This challenger endpoint is used by Okta to confirm that communication between Talon.One and Okta is correctly configured and accessible for provisioning and deprovisioning of Talon.One users, and that only Talon.One can receive and respond to events from Okta. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OktaEventHandlerChallengeAsync ()
        {
             await OktaEventHandlerChallengeAsyncWithHttpInfo();

        }

        /// <summary>
        /// Validate Okta API ownership Validate the ownership of the API through a challenge-response mechanism.  This challenger endpoint is used by Okta to confirm that communication between Talon.One and Okta is correctly configured and accessible for provisioning and deprovisioning of Talon.One users, and that only Talon.One can receive and respond to events from Okta. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> OktaEventHandlerChallengeAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/provisioning/okta", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OktaEventHandlerChallenge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deduct points from customer profile Deduct points from the specified loyalty program and specified customer profile.  **Important:** - Only active points can be deducted. - Only pending points are rolled back when a session is cancelled or reopened.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void RemoveLoyaltyPoints (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body)
        {
             RemoveLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId, body);
        }

        /// <summary>
        /// Deduct points from customer profile Deduct points from the specified loyalty program and specified customer profile.  **Important:** - Only active points can be deducted. - Only pending points are rolled back when a session is cancelled or reopened.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> RemoveLoyaltyPointsWithHttpInfo (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->RemoveLoyaltyPoints");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/deduct_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deduct points from customer profile Deduct points from the specified loyalty program and specified customer profile.  **Important:** - Only active points can be deducted. - Only pending points are rolled back when a session is cancelled or reopened.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveLoyaltyPointsAsync (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body)
        {
             await RemoveLoyaltyPointsAsyncWithHttpInfo(loyaltyProgramId, integrationId, body);

        }

        /// <summary>
        /// Deduct points from customer profile Deduct points from the specified loyalty program and specified customer profile.  **Important:** - Only active points can be deducted. - Only pending points are rolled back when a session is cancelled or reopened.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program.</param>
        /// <param name="integrationId">The integration identifier for this customer profile. Must be: - Unique within the deployment. - Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Once set, you cannot update this identifier. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> RemoveLoyaltyPointsAsyncWithHttpInfo (string loyaltyProgramId, string integrationId, DeductLoyaltyPoints body)
        {
            // verify the required parameter 'loyaltyProgramId' is set
            if (loyaltyProgramId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyProgramId' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'integrationId' when calling ManagementApi->RemoveLoyaltyPoints");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->RemoveLoyaltyPoints");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("integrationId", TalonOne.Client.ClientUtils.ParameterToString(integrationId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/deduct_points", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoyaltyPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>NewPassword</returns>
        public NewPassword ResetPassword (NewPassword body)
        {
             TalonOne.Client.ApiResponse<NewPassword> localVarResponse = ResetPasswordWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of NewPassword</returns>
        public TalonOne.Client.ApiResponse< NewPassword > ResetPasswordWithHttpInfo (NewPassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ResetPassword");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< NewPassword >("/v1/reset_password", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of NewPassword</returns>
        public async System.Threading.Tasks.Task<NewPassword> ResetPasswordAsync (NewPassword body)
        {
             TalonOne.Client.ApiResponse<NewPassword> localVarResponse = await ResetPasswordAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (NewPassword)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<NewPassword>> ResetPasswordAsyncWithHttpInfo (NewPassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ResetPassword");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NewPassword>("/v1/reset_password", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create SCIM group Create a new Talon.One group using the SCIM Group provisioning protocol with an identity provider, for example, Microsoft Entra ID, and assign members from the payload to the new group. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ScimGroup</returns>
        public ScimGroup ScimCreateGroup (ScimBaseGroup body)
        {
             TalonOne.Client.ApiResponse<ScimGroup> localVarResponse = ScimCreateGroupWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create SCIM group Create a new Talon.One group using the SCIM Group provisioning protocol with an identity provider, for example, Microsoft Entra ID, and assign members from the payload to the new group. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public TalonOne.Client.ApiResponse< ScimGroup > ScimCreateGroupWithHttpInfo (ScimBaseGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimCreateGroup");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< ScimGroup >("/v1/provisioning/scim/Groups", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimCreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create SCIM group Create a new Talon.One group using the SCIM Group provisioning protocol with an identity provider, for example, Microsoft Entra ID, and assign members from the payload to the new group. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup> ScimCreateGroupAsync (ScimBaseGroup body)
        {
             TalonOne.Client.ApiResponse<ScimGroup> localVarResponse = await ScimCreateGroupAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create SCIM group Create a new Talon.One group using the SCIM Group provisioning protocol with an identity provider, for example, Microsoft Entra ID, and assign members from the payload to the new group. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimGroup>> ScimCreateGroupAsyncWithHttpInfo (ScimBaseGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimCreateGroup");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ScimGroup>("/v1/provisioning/scim/Groups", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimCreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create SCIM user Create a new Talon.One user using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ScimUser</returns>
        public ScimUser ScimCreateUser (ScimNewUser body)
        {
             TalonOne.Client.ApiResponse<ScimUser> localVarResponse = ScimCreateUserWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create SCIM user Create a new Talon.One user using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimUser</returns>
        public TalonOne.Client.ApiResponse< ScimUser > ScimCreateUserWithHttpInfo (ScimNewUser body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimCreateUser");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< ScimUser >("/v1/provisioning/scim/Users", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimCreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create SCIM user Create a new Talon.One user using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ScimUser</returns>
        public async System.Threading.Tasks.Task<ScimUser> ScimCreateUserAsync (ScimNewUser body)
        {
             TalonOne.Client.ApiResponse<ScimUser> localVarResponse = await ScimCreateUserAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create SCIM user Create a new Talon.One user using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimUser>> ScimCreateUserAsyncWithHttpInfo (ScimNewUser body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimCreateUser");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ScimUser>("/v1/provisioning/scim/Users", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimCreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete SCIM group Delete a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns></returns>
        public void ScimDeleteGroup (long groupId)
        {
             ScimDeleteGroupWithHttpInfo(groupId);
        }

        /// <summary>
        /// Delete SCIM group Delete a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> ScimDeleteGroupWithHttpInfo (long groupId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", TalonOne.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/provisioning/scim/Groups/{groupId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimDeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete SCIM group Delete a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScimDeleteGroupAsync (long groupId)
        {
             await ScimDeleteGroupAsyncWithHttpInfo(groupId);

        }

        /// <summary>
        /// Delete SCIM group Delete a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> ScimDeleteGroupAsyncWithHttpInfo (long groupId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", TalonOne.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/provisioning/scim/Groups/{groupId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimDeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete SCIM user Delete a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        public void ScimDeleteUser (long userId)
        {
             ScimDeleteUserWithHttpInfo(userId);
        }

        /// <summary>
        /// Delete SCIM user Delete a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> ScimDeleteUserWithHttpInfo (long userId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/provisioning/scim/Users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimDeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete SCIM user Delete a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScimDeleteUserAsync (long userId)
        {
             await ScimDeleteUserAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Delete SCIM user Delete a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> ScimDeleteUserAsyncWithHttpInfo (long userId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/provisioning/scim/Users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimDeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SCIM group Retrieve data for a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>ScimGroup</returns>
        public ScimGroup ScimGetGroup (long groupId)
        {
             TalonOne.Client.ApiResponse<ScimGroup> localVarResponse = ScimGetGroupWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get SCIM group Retrieve data for a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public TalonOne.Client.ApiResponse< ScimGroup > ScimGetGroupWithHttpInfo (long groupId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", TalonOne.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ScimGroup >("/v1/provisioning/scim/Groups/{groupId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SCIM group Retrieve data for a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup> ScimGetGroupAsync (long groupId)
        {
             TalonOne.Client.ApiResponse<ScimGroup> localVarResponse = await ScimGetGroupAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get SCIM group Retrieve data for a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimGroup>> ScimGetGroupAsyncWithHttpInfo (long groupId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", TalonOne.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimGroup>("/v1/provisioning/scim/Groups/{groupId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SCIM groups Retrieve a paginated list of groups created using the SCIM protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScimGroupsListResponse</returns>
        public ScimGroupsListResponse ScimGetGroups ()
        {
             TalonOne.Client.ApiResponse<ScimGroupsListResponse> localVarResponse = ScimGetGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List SCIM groups Retrieve a paginated list of groups created using the SCIM protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScimGroupsListResponse</returns>
        public TalonOne.Client.ApiResponse< ScimGroupsListResponse > ScimGetGroupsWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ScimGroupsListResponse >("/v1/provisioning/scim/Groups", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SCIM groups Retrieve a paginated list of groups created using the SCIM protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ScimGroupsListResponse</returns>
        public async System.Threading.Tasks.Task<ScimGroupsListResponse> ScimGetGroupsAsync ()
        {
             TalonOne.Client.ApiResponse<ScimGroupsListResponse> localVarResponse = await ScimGetGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List SCIM groups Retrieve a paginated list of groups created using the SCIM protocol with an identity provider, for example, Microsoft Entra ID. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ScimGroupsListResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimGroupsListResponse>> ScimGetGroupsAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimGroupsListResponse>("/v1/provisioning/scim/Groups", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List supported SCIM resource types Retrieve a list of resource types supported by the SCIM provisioning protocol.  Resource types define the various kinds of resources that can be managed via the SCIM API, such as users, groups, or custom-defined resources. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScimResourceTypesListResponse</returns>
        public ScimResourceTypesListResponse ScimGetResourceTypes ()
        {
             TalonOne.Client.ApiResponse<ScimResourceTypesListResponse> localVarResponse = ScimGetResourceTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List supported SCIM resource types Retrieve a list of resource types supported by the SCIM provisioning protocol.  Resource types define the various kinds of resources that can be managed via the SCIM API, such as users, groups, or custom-defined resources. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScimResourceTypesListResponse</returns>
        public TalonOne.Client.ApiResponse< ScimResourceTypesListResponse > ScimGetResourceTypesWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ScimResourceTypesListResponse >("/v1/provisioning/scim/ResourceTypes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetResourceTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List supported SCIM resource types Retrieve a list of resource types supported by the SCIM provisioning protocol.  Resource types define the various kinds of resources that can be managed via the SCIM API, such as users, groups, or custom-defined resources. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ScimResourceTypesListResponse</returns>
        public async System.Threading.Tasks.Task<ScimResourceTypesListResponse> ScimGetResourceTypesAsync ()
        {
             TalonOne.Client.ApiResponse<ScimResourceTypesListResponse> localVarResponse = await ScimGetResourceTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List supported SCIM resource types Retrieve a list of resource types supported by the SCIM provisioning protocol.  Resource types define the various kinds of resources that can be managed via the SCIM API, such as users, groups, or custom-defined resources. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ScimResourceTypesListResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimResourceTypesListResponse>> ScimGetResourceTypesAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimResourceTypesListResponse>("/v1/provisioning/scim/ResourceTypes", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetResourceTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List supported SCIM schemas Retrieve a list of schemas supported by the SCIM provisioning protocol.  Schemas define the structure and attributes of the different resources that can be managed via the SCIM API, such as users, groups, and any custom-defined resources. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScimSchemasListResponse</returns>
        public ScimSchemasListResponse ScimGetSchemas ()
        {
             TalonOne.Client.ApiResponse<ScimSchemasListResponse> localVarResponse = ScimGetSchemasWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List supported SCIM schemas Retrieve a list of schemas supported by the SCIM provisioning protocol.  Schemas define the structure and attributes of the different resources that can be managed via the SCIM API, such as users, groups, and any custom-defined resources. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScimSchemasListResponse</returns>
        public TalonOne.Client.ApiResponse< ScimSchemasListResponse > ScimGetSchemasWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ScimSchemasListResponse >("/v1/provisioning/scim/Schemas", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetSchemas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List supported SCIM schemas Retrieve a list of schemas supported by the SCIM provisioning protocol.  Schemas define the structure and attributes of the different resources that can be managed via the SCIM API, such as users, groups, and any custom-defined resources. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ScimSchemasListResponse</returns>
        public async System.Threading.Tasks.Task<ScimSchemasListResponse> ScimGetSchemasAsync ()
        {
             TalonOne.Client.ApiResponse<ScimSchemasListResponse> localVarResponse = await ScimGetSchemasAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List supported SCIM schemas Retrieve a list of schemas supported by the SCIM provisioning protocol.  Schemas define the structure and attributes of the different resources that can be managed via the SCIM API, such as users, groups, and any custom-defined resources. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ScimSchemasListResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimSchemasListResponse>> ScimGetSchemasAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimSchemasListResponse>("/v1/provisioning/scim/Schemas", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetSchemas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SCIM service provider configuration Retrieve the configuration settings of the SCIM service provider. It provides details about the features and capabilities supported by the SCIM API, such as the different operation settings. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScimServiceProviderConfigResponse</returns>
        public ScimServiceProviderConfigResponse ScimGetServiceProviderConfig ()
        {
             TalonOne.Client.ApiResponse<ScimServiceProviderConfigResponse> localVarResponse = ScimGetServiceProviderConfigWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get SCIM service provider configuration Retrieve the configuration settings of the SCIM service provider. It provides details about the features and capabilities supported by the SCIM API, such as the different operation settings. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScimServiceProviderConfigResponse</returns>
        public TalonOne.Client.ApiResponse< ScimServiceProviderConfigResponse > ScimGetServiceProviderConfigWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ScimServiceProviderConfigResponse >("/v1/provisioning/scim/ServiceProviderConfig", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetServiceProviderConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SCIM service provider configuration Retrieve the configuration settings of the SCIM service provider. It provides details about the features and capabilities supported by the SCIM API, such as the different operation settings. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ScimServiceProviderConfigResponse</returns>
        public async System.Threading.Tasks.Task<ScimServiceProviderConfigResponse> ScimGetServiceProviderConfigAsync ()
        {
             TalonOne.Client.ApiResponse<ScimServiceProviderConfigResponse> localVarResponse = await ScimGetServiceProviderConfigAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get SCIM service provider configuration Retrieve the configuration settings of the SCIM service provider. It provides details about the features and capabilities supported by the SCIM API, such as the different operation settings. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ScimServiceProviderConfigResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimServiceProviderConfigResponse>> ScimGetServiceProviderConfigAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimServiceProviderConfigResponse>("/v1/provisioning/scim/ServiceProviderConfig", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetServiceProviderConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SCIM user Retrieve data for a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ScimUser</returns>
        public ScimUser ScimGetUser (long userId)
        {
             TalonOne.Client.ApiResponse<ScimUser> localVarResponse = ScimGetUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get SCIM user Retrieve data for a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of ScimUser</returns>
        public TalonOne.Client.ApiResponse< ScimUser > ScimGetUserWithHttpInfo (long userId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ScimUser >("/v1/provisioning/scim/Users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SCIM user Retrieve data for a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ScimUser</returns>
        public async System.Threading.Tasks.Task<ScimUser> ScimGetUserAsync (long userId)
        {
             TalonOne.Client.ApiResponse<ScimUser> localVarResponse = await ScimGetUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get SCIM user Retrieve data for a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimUser>> ScimGetUserAsyncWithHttpInfo (long userId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimUser>("/v1/provisioning/scim/Users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SCIM users Retrieve a paginated list of users that have been provisioned using the SCIM protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScimUsersListResponse</returns>
        public ScimUsersListResponse ScimGetUsers ()
        {
             TalonOne.Client.ApiResponse<ScimUsersListResponse> localVarResponse = ScimGetUsersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List SCIM users Retrieve a paginated list of users that have been provisioned using the SCIM protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScimUsersListResponse</returns>
        public TalonOne.Client.ApiResponse< ScimUsersListResponse > ScimGetUsersWithHttpInfo ()
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ScimUsersListResponse >("/v1/provisioning/scim/Users", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SCIM users Retrieve a paginated list of users that have been provisioned using the SCIM protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ScimUsersListResponse</returns>
        public async System.Threading.Tasks.Task<ScimUsersListResponse> ScimGetUsersAsync ()
        {
             TalonOne.Client.ApiResponse<ScimUsersListResponse> localVarResponse = await ScimGetUsersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List SCIM users Retrieve a paginated list of users that have been provisioned using the SCIM protocol with an identity provider, for example, Microsoft Entra ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ScimUsersListResponse)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimUsersListResponse>> ScimGetUsersAsyncWithHttpInfo ()
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimUsersListResponse>("/v1/provisioning/scim/Users", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimGetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SCIM group attributes Update certain attributes of a group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint allows for selective adding, removing, or replacing of specific group attributes while other attributes remain unchanged. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>ScimGroup</returns>
        public ScimGroup ScimPatchGroup (long groupId, ScimPatchRequest body)
        {
             TalonOne.Client.ApiResponse<ScimGroup> localVarResponse = ScimPatchGroupWithHttpInfo(groupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update SCIM group attributes Update certain attributes of a group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint allows for selective adding, removing, or replacing of specific group attributes while other attributes remain unchanged. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public TalonOne.Client.ApiResponse< ScimGroup > ScimPatchGroupWithHttpInfo (long groupId, ScimPatchRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimPatchGroup");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", TalonOne.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< ScimGroup >("/v1/provisioning/scim/Groups/{groupId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimPatchGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SCIM group attributes Update certain attributes of a group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint allows for selective adding, removing, or replacing of specific group attributes while other attributes remain unchanged. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup> ScimPatchGroupAsync (long groupId, ScimPatchRequest body)
        {
             TalonOne.Client.ApiResponse<ScimGroup> localVarResponse = await ScimPatchGroupAsyncWithHttpInfo(groupId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update SCIM group attributes Update certain attributes of a group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint allows for selective adding, removing, or replacing of specific group attributes while other attributes remain unchanged. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimGroup>> ScimPatchGroupAsyncWithHttpInfo (long groupId, ScimPatchRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimPatchGroup");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", TalonOne.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ScimGroup>("/v1/provisioning/scim/Groups/{groupId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimPatchGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SCIM user attributes Update certain attributes of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint allows for selective adding, removing, or replacing specific attributes while leaving other attributes unchanged. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>ScimUser</returns>
        public ScimUser ScimPatchUser (long userId, ScimPatchRequest body)
        {
             TalonOne.Client.ApiResponse<ScimUser> localVarResponse = ScimPatchUserWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update SCIM user attributes Update certain attributes of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint allows for selective adding, removing, or replacing specific attributes while leaving other attributes unchanged. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimUser</returns>
        public TalonOne.Client.ApiResponse< ScimUser > ScimPatchUserWithHttpInfo (long userId, ScimPatchRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimPatchUser");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< ScimUser >("/v1/provisioning/scim/Users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimPatchUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SCIM user attributes Update certain attributes of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint allows for selective adding, removing, or replacing specific attributes while leaving other attributes unchanged. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ScimUser</returns>
        public async System.Threading.Tasks.Task<ScimUser> ScimPatchUserAsync (long userId, ScimPatchRequest body)
        {
             TalonOne.Client.ApiResponse<ScimUser> localVarResponse = await ScimPatchUserAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update SCIM user attributes Update certain attributes of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint allows for selective adding, removing, or replacing specific attributes while leaving other attributes unchanged. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimUser>> ScimPatchUserAsyncWithHttpInfo (long userId, ScimPatchRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimPatchUser");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ScimUser>("/v1/provisioning/scim/Users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimPatchUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SCIM group Update the details of a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint replaces all attributes of the given group with the attributes provided in the request payload. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>ScimGroup</returns>
        public ScimGroup ScimReplaceGroupAttributes (long groupId, ScimBaseGroup body)
        {
             TalonOne.Client.ApiResponse<ScimGroup> localVarResponse = ScimReplaceGroupAttributesWithHttpInfo(groupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update SCIM group Update the details of a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint replaces all attributes of the given group with the attributes provided in the request payload. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public TalonOne.Client.ApiResponse< ScimGroup > ScimReplaceGroupAttributesWithHttpInfo (long groupId, ScimBaseGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimReplaceGroupAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", TalonOne.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ScimGroup >("/v1/provisioning/scim/Groups/{groupId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimReplaceGroupAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SCIM group Update the details of a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint replaces all attributes of the given group with the attributes provided in the request payload. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup> ScimReplaceGroupAttributesAsync (long groupId, ScimBaseGroup body)
        {
             TalonOne.Client.ApiResponse<ScimGroup> localVarResponse = await ScimReplaceGroupAttributesAsyncWithHttpInfo(groupId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update SCIM group Update the details of a specific group created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID. This endpoint replaces all attributes of the given group with the attributes provided in the request payload. In Talon.One, a &#x60;Group&#x60; corresponds to a [role](https://docs.talon.one/docs/product/account/account-settings/managing-roles), and &#x60;members&#x60; are the [users](https://docs.talon.one/docs/product/account/account-settings/managing-users) assigned to that role. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimGroup>> ScimReplaceGroupAttributesAsyncWithHttpInfo (long groupId, ScimBaseGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimReplaceGroupAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", TalonOne.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ScimGroup>("/v1/provisioning/scim/Groups/{groupId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimReplaceGroupAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SCIM user Update the details of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint replaces all attributes of the specific user with the attributes provided in the request payload. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>ScimUser</returns>
        public ScimUser ScimReplaceUserAttributes (long userId, ScimNewUser body)
        {
             TalonOne.Client.ApiResponse<ScimUser> localVarResponse = ScimReplaceUserAttributesWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update SCIM user Update the details of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint replaces all attributes of the specific user with the attributes provided in the request payload. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of ScimUser</returns>
        public TalonOne.Client.ApiResponse< ScimUser > ScimReplaceUserAttributesWithHttpInfo (long userId, ScimNewUser body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimReplaceUserAttributes");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ScimUser >("/v1/provisioning/scim/Users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimReplaceUserAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SCIM user Update the details of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint replaces all attributes of the specific user with the attributes provided in the request payload. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ScimUser</returns>
        public async System.Threading.Tasks.Task<ScimUser> ScimReplaceUserAttributesAsync (long userId, ScimNewUser body)
        {
             TalonOne.Client.ApiResponse<ScimUser> localVarResponse = await ScimReplaceUserAttributesAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update SCIM user Update the details of a specific Talon.One user created using the SCIM provisioning protocol with an identity provider, for example, Microsoft Entra ID.  This endpoint replaces all attributes of the specific user with the attributes provided in the request payload. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<ScimUser>> ScimReplaceUserAttributesAsyncWithHttpInfo (long userId, ScimNewUser body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->ScimReplaceUserAttributes");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ScimUser>("/v1/provisioning/scim/Users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScimReplaceUserAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes (without total count) List the coupons whose attributes match the query criteria in all the campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 SearchCouponsAdvancedApplicationWideWithoutTotalCount (long applicationId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20011> localVarResponse = SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes (without total count) List the coupons whose attributes match the query criteria in all the campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20011 > SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo (long applicationId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedApplicationWideWithoutTotalCount");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20011 >("/v1/applications/{applicationId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedApplicationWideWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes (without total count) List the coupons whose attributes match the query criteria in all the campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsync (long applicationId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20011> localVarResponse = await SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes (without total count) List the coupons whose attributes match the query criteria in all the campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20011>> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo (long applicationId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedApplicationWideWithoutTotalCount");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (campaignState != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "campaignState", campaignState));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20011>("/v1/applications/{applicationId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedApplicationWideWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count) List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 SearchCouponsAdvancedWithoutTotalCount (long applicationId, long campaignId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20011> localVarResponse = SearchCouponsAdvancedWithoutTotalCountWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count) List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20011 > SearchCouponsAdvancedWithoutTotalCountWithHttpInfo (long applicationId, long campaignId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20011 >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count) List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> SearchCouponsAdvancedWithoutTotalCountAsync (long applicationId, long campaignId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             TalonOne.Client.ApiResponse<InlineResponse20011> localVarResponse = await SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes in campaign (without total count) List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <param name="pageSize">The number of items in the response. (optional, default to 1000)</param>
        /// <param name="skip">The number of items to skip when paging through large result sets. (optional)</param>
        /// <param name="sort">The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** You may not be able to use all fields for sorting. This is due to performance limitations.  (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile ID specified in the coupon&#39;s RecipientIntegrationId field. (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code. (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20011>> SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo (long applicationId, long campaignId, Object body, long? pageSize = default(long?), long? skip = default(long?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), long? referralId = default(long?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (valid != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "valid", valid));
            }
            if (usable != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "usable", usable));
            }
            if (referralId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "referralId", referralId));
            }
            if (recipientIntegrationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "recipientIntegrationId", recipientIntegrationId));
            }
            if (exactMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "exactMatch", exactMatch));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TalonOne.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20011>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced/no_total", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCouponsAdvancedWithoutTotalCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get summary of campaign store budgets Fetch a summary of all store budget information for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>InlineResponse20049</returns>
        public InlineResponse20049 SummarizeCampaignStoreBudget (long applicationId, long campaignId)
        {
             TalonOne.Client.ApiResponse<InlineResponse20049> localVarResponse = SummarizeCampaignStoreBudgetWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get summary of campaign store budgets Fetch a summary of all store budget information for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        public TalonOne.Client.ApiResponse< InlineResponse20049 > SummarizeCampaignStoreBudgetWithHttpInfo (long applicationId, long campaignId)
        {
            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20049 >("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets/summary", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeCampaignStoreBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get summary of campaign store budgets Fetch a summary of all store budget information for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of InlineResponse20049</returns>
        public async System.Threading.Tasks.Task<InlineResponse20049> SummarizeCampaignStoreBudgetAsync (long applicationId, long campaignId)
        {
             TalonOne.Client.ApiResponse<InlineResponse20049> localVarResponse = await SummarizeCampaignStoreBudgetAsyncWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get summary of campaign store budgets Fetch a summary of all store budget information for a given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<InlineResponse20049>> SummarizeCampaignStoreBudgetAsyncWithHttpInfo (long applicationId, long campaignId)
        {

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20049>("/v1/applications/{applicationId}/campaigns/{campaignId}/stores/budgets/summary", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeCampaignStoreBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer card data Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void TransferLoyaltyCard (long loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body)
        {
             TransferLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);
        }

        /// <summary>
        /// Transfer card data Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> TransferLoyaltyCardWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->TransferLoyaltyCard");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->TransferLoyaltyCard");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/transfer", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer card data Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TransferLoyaltyCardAsync (long loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body)
        {
             await TransferLoyaltyCardAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);

        }

        /// <summary>
        /// Transfer card data Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> TransferLoyaltyCardAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, TransferLoyaltyCard body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->TransferLoyaltyCard");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->TransferLoyaltyCard");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/transfer", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update account-level collection Edit the description of a given account-level collection and enable or disable the collection in the specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        public Collection UpdateAccountCollection (long collectionId, UpdateCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = UpdateAccountCollectionWithHttpInfo(collectionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update account-level collection Edit the description of a given account-level collection and enable or disable the collection in the specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > UpdateAccountCollectionWithHttpInfo (long collectionId, UpdateCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAccountCollection");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Collection >("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update account-level collection Edit the description of a given account-level collection and enable or disable the collection in the specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> UpdateAccountCollectionAsync (long collectionId, UpdateCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await UpdateAccountCollectionAsyncWithHttpInfo(collectionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update account-level collection Edit the description of a given account-level collection and enable or disable the collection in the specified Applications.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in account](#operation/listAccountCollections) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> UpdateAccountCollectionAsyncWithHttpInfo (long collectionId, UpdateCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAccountCollection");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Collection>("/v1/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update achievement Update the details of a specific achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Achievement</returns>
        public Achievement UpdateAchievement (long applicationId, long campaignId, long achievementId, UpdateAchievement body)
        {
             TalonOne.Client.ApiResponse<Achievement> localVarResponse = UpdateAchievementWithHttpInfo(applicationId, campaignId, achievementId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update achievement Update the details of a specific achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Achievement</returns>
        public TalonOne.Client.ApiResponse< Achievement > UpdateAchievementWithHttpInfo (long applicationId, long campaignId, long achievementId, UpdateAchievement body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAchievement");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("achievementId", TalonOne.Client.ClientUtils.ParameterToString(achievementId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Achievement >("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements/{achievementId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAchievement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update achievement Update the details of a specific achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Achievement</returns>
        public async System.Threading.Tasks.Task<Achievement> UpdateAchievementAsync (long applicationId, long campaignId, long achievementId, UpdateAchievement body)
        {
             TalonOne.Client.ApiResponse<Achievement> localVarResponse = await UpdateAchievementAsyncWithHttpInfo(applicationId, campaignId, achievementId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update achievement Update the details of a specific achievement.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="achievementId">The ID of the achievement. You can get this ID with the [List achievement](https://docs.talon.one/management-api#tag/Achievements/operation/listAchievements) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Achievement)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Achievement>> UpdateAchievementAsyncWithHttpInfo (long applicationId, long campaignId, long achievementId, UpdateAchievement body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAchievement");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("achievementId", TalonOne.Client.ClientUtils.ParameterToString(achievementId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Achievement>("/v1/applications/{applicationId}/campaigns/{campaignId}/achievements/{achievementId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAchievement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update additional cost Updates an existing additional cost. Once created, the only property of an additional cost that cannot be changed is the &#x60;name&#x60; property (or **API name** in the Campaign Manager). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost UpdateAdditionalCost (long additionalCostId, NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = UpdateAdditionalCostWithHttpInfo(additionalCostId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update additional cost Updates an existing additional cost. Once created, the only property of an additional cost that cannot be changed is the &#x60;name&#x60; property (or **API name** in the Campaign Manager). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public TalonOne.Client.ApiResponse< AccountAdditionalCost > UpdateAdditionalCostWithHttpInfo (long additionalCostId, NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAdditionalCost");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< AccountAdditionalCost >("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update additional cost Updates an existing additional cost. Once created, the only property of an additional cost that cannot be changed is the &#x60;name&#x60; property (or **API name** in the Campaign Manager). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> UpdateAdditionalCostAsync (long additionalCostId, NewAdditionalCost body)
        {
             TalonOne.Client.ApiResponse<AccountAdditionalCost> localVarResponse = await UpdateAdditionalCostAsyncWithHttpInfo(additionalCostId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update additional cost Updates an existing additional cost. Once created, the only property of an additional cost that cannot be changed is the &#x60;name&#x60; property (or **API name** in the Campaign Manager). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId">The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<AccountAdditionalCost>> UpdateAdditionalCostAsyncWithHttpInfo (long additionalCostId, NewAdditionalCost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAdditionalCost");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("additionalCostId", TalonOne.Client.ClientUtils.ParameterToString(additionalCostId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountAdditionalCost>("/v1/additional_costs/{additionalCostId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAdditionalCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update custom attribute Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Attribute</returns>
        public Attribute UpdateAttribute (long attributeId, NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = UpdateAttributeWithHttpInfo(attributeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update custom attribute Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Attribute</returns>
        public TalonOne.Client.ApiResponse< Attribute > UpdateAttributeWithHttpInfo (long attributeId, NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAttribute");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Attribute >("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update custom attribute Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> UpdateAttributeAsync (long attributeId, NewAttribute body)
        {
             TalonOne.Client.ApiResponse<Attribute> localVarResponse = await UpdateAttributeAsyncWithHttpInfo(attributeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update custom attribute Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Attribute>> UpdateAttributeAsyncWithHttpInfo (long attributeId, NewAttribute body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateAttribute");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attributeId", TalonOne.Client.ClientUtils.ParameterToString(attributeId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Attribute>("/v1/attributes/{attributeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update campaign Update the given campaign.  **Important:** You cannot use this endpoint to update campaigns if [campaign staging and revisions](https://docs.talon.one/docs/product/applications/managing-general-settings#campaign-staging-and-revisions) is enabled for your Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Campaign</returns>
        public Campaign UpdateCampaign (long applicationId, long campaignId, UpdateCampaign body)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = UpdateCampaignWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update campaign Update the given campaign.  **Important:** You cannot use this endpoint to update campaigns if [campaign staging and revisions](https://docs.talon.one/docs/product/applications/managing-general-settings#campaign-staging-and-revisions) is enabled for your Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Campaign</returns>
        public TalonOne.Client.ApiResponse< Campaign > UpdateCampaignWithHttpInfo (long applicationId, long campaignId, UpdateCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCampaign");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Campaign >("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update campaign Update the given campaign.  **Important:** You cannot use this endpoint to update campaigns if [campaign staging and revisions](https://docs.talon.one/docs/product/applications/managing-general-settings#campaign-staging-and-revisions) is enabled for your Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> UpdateCampaignAsync (long applicationId, long campaignId, UpdateCampaign body)
        {
             TalonOne.Client.ApiResponse<Campaign> localVarResponse = await UpdateCampaignAsyncWithHttpInfo(applicationId, campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update campaign Update the given campaign.  **Important:** You cannot use this endpoint to update campaigns if [campaign staging and revisions](https://docs.talon.one/docs/product/applications/managing-general-settings#campaign-staging-and-revisions) is enabled for your Application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Campaign>> UpdateCampaignAsyncWithHttpInfo (long applicationId, long campaignId, UpdateCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCampaign");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Campaign>("/v1/applications/{applicationId}/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update campaign-level collection&#39;s description Edit the description of a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Collection</returns>
        public Collection UpdateCollection (long applicationId, long campaignId, long collectionId, UpdateCampaignCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = UpdateCollectionWithHttpInfo(applicationId, campaignId, collectionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update campaign-level collection&#39;s description Edit the description of a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Collection</returns>
        public TalonOne.Client.ApiResponse< Collection > UpdateCollectionWithHttpInfo (long applicationId, long campaignId, long collectionId, UpdateCampaignCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCollection");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Collection >("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update campaign-level collection&#39;s description Edit the description of a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> UpdateCollectionAsync (long applicationId, long campaignId, long collectionId, UpdateCampaignCollection body)
        {
             TalonOne.Client.ApiResponse<Collection> localVarResponse = await UpdateCollectionAsyncWithHttpInfo(applicationId, campaignId, collectionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update campaign-level collection&#39;s description Edit the description of a given campaign-level collection.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="collectionId">The ID of the collection. You can get it with the [List collections in Application](#operation/listCollectionsInApplication) endpoint.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Collection>> UpdateCollectionAsyncWithHttpInfo (long applicationId, long campaignId, long collectionId, UpdateCampaignCollection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCollection");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectionId", TalonOne.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Collection>("/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update coupon Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt;, &lt;code&gt;expiryDate&lt;/code&gt;, and &lt;code&gt;recipientIntegrationId&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Coupon</returns>
        public Coupon UpdateCoupon (long applicationId, long campaignId, string couponId, UpdateCoupon body)
        {
             TalonOne.Client.ApiResponse<Coupon> localVarResponse = UpdateCouponWithHttpInfo(applicationId, campaignId, couponId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update coupon Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt;, &lt;code&gt;expiryDate&lt;/code&gt;, and &lt;code&gt;recipientIntegrationId&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Coupon</returns>
        public TalonOne.Client.ApiResponse< Coupon > UpdateCouponWithHttpInfo (long applicationId, long campaignId, string couponId, UpdateCoupon body)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->UpdateCoupon");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCoupon");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Coupon >("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update coupon Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt;, &lt;code&gt;expiryDate&lt;/code&gt;, and &lt;code&gt;recipientIntegrationId&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Task of Coupon</returns>
        public async System.Threading.Tasks.Task<Coupon> UpdateCouponAsync (long applicationId, long campaignId, string couponId, UpdateCoupon body)
        {
             TalonOne.Client.ApiResponse<Coupon> localVarResponse = await UpdateCouponAsyncWithHttpInfo(applicationId, campaignId, couponId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update coupon Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt;, &lt;code&gt;expiryDate&lt;/code&gt;, and &lt;code&gt;recipientIntegrationId&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="couponId">The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Coupon>> UpdateCouponAsyncWithHttpInfo (long applicationId, long campaignId, string couponId, UpdateCoupon body)
        {
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->UpdateCoupon");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCoupon");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("couponId", TalonOne.Client.ClientUtils.ParameterToString(couponId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Coupon>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update coupons Update all coupons or a specific batch of coupons in the given campaign. You can find the &#x60;batchId&#x60; on the **Coupons** page of your campaign in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint time out after 30 minutes. If you hit a timeout, contact our support team.&lt;/li&gt;     &lt;li&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt; and &lt;code&gt;expiryDate&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns></returns>
        public void UpdateCouponBatch (long applicationId, long campaignId, UpdateCouponBatch body)
        {
             UpdateCouponBatchWithHttpInfo(applicationId, campaignId, body);
        }

        /// <summary>
        /// Update coupons Update all coupons or a specific batch of coupons in the given campaign. You can find the &#x60;batchId&#x60; on the **Coupons** page of your campaign in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint time out after 30 minutes. If you hit a timeout, contact our support team.&lt;/li&gt;     &lt;li&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt; and &lt;code&gt;expiryDate&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TalonOne.Client.ApiResponse<Object> UpdateCouponBatchWithHttpInfo (long applicationId, long campaignId, UpdateCouponBatch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCouponBatch");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCouponBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update coupons Update all coupons or a specific batch of coupons in the given campaign. You can find the &#x60;batchId&#x60; on the **Coupons** page of your campaign in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint time out after 30 minutes. If you hit a timeout, contact our support team.&lt;/li&gt;     &lt;li&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt; and &lt;code&gt;expiryDate&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCouponBatchAsync (long applicationId, long campaignId, UpdateCouponBatch body)
        {
             await UpdateCouponBatchAsyncWithHttpInfo(applicationId, campaignId, body);

        }

        /// <summary>
        /// Update coupons Update all coupons or a specific batch of coupons in the given campaign. You can find the &#x60;batchId&#x60; on the **Coupons** page of your campaign in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint time out after 30 minutes. If you hit a timeout, contact our support team.&lt;/li&gt;     &lt;li&gt;With this &lt;code&gt;PUT&lt;/code&gt; endpoint, if you do not explicitly set a value for the &lt;code&gt;startDate&lt;/code&gt; and &lt;code&gt;expiryDate&lt;/code&gt; properties in your request, it is automatically set to &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Object>> UpdateCouponBatchAsyncWithHttpInfo (long applicationId, long campaignId, UpdateCouponBatch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateCouponBatch");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCouponBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update loyalty card status Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>LoyaltyCard</returns>
        public LoyaltyCard UpdateLoyaltyCard (long loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body)
        {
             TalonOne.Client.ApiResponse<LoyaltyCard> localVarResponse = UpdateLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update loyalty card status Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of LoyaltyCard</returns>
        public TalonOne.Client.ApiResponse< LoyaltyCard > UpdateLoyaltyCardWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->UpdateLoyaltyCard");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateLoyaltyCard");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< LoyaltyCard >("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update loyalty card status Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of LoyaltyCard</returns>
        public async System.Threading.Tasks.Task<LoyaltyCard> UpdateLoyaltyCardAsync (long loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body)
        {
             TalonOne.Client.ApiResponse<LoyaltyCard> localVarResponse = await UpdateLoyaltyCardAsyncWithHttpInfo(loyaltyProgramId, loyaltyCardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update loyalty card status Update the status of the given loyalty card. A card can be _active_ or _inactive_.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltyProgramId">Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. </param>
        /// <param name="loyaltyCardId">Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (LoyaltyCard)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<LoyaltyCard>> UpdateLoyaltyCardAsyncWithHttpInfo (long loyaltyProgramId, string loyaltyCardId, UpdateLoyaltyCard body)
        {
            // verify the required parameter 'loyaltyCardId' is set
            if (loyaltyCardId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'loyaltyCardId' when calling ManagementApi->UpdateLoyaltyCard");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateLoyaltyCard");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("loyaltyProgramId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyProgramId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyCardId", TalonOne.Client.ClientUtils.ParameterToString(loyaltyCardId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<LoyaltyCard>("/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoyaltyCard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Referral</returns>
        public Referral UpdateReferral (long applicationId, long campaignId, string referralId, UpdateReferral body)
        {
             TalonOne.Client.ApiResponse<Referral> localVarResponse = UpdateReferralWithHttpInfo(applicationId, campaignId, referralId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Referral</returns>
        public TalonOne.Client.ApiResponse< Referral > UpdateReferralWithHttpInfo (long applicationId, long campaignId, string referralId, UpdateReferral body)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->UpdateReferral");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateReferral");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Referral >("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Task of Referral</returns>
        public async System.Threading.Tasks.Task<Referral> UpdateReferralAsync (long applicationId, long campaignId, string referralId, UpdateReferral body)
        {
             TalonOne.Client.ApiResponse<Referral> localVarResponse = await UpdateReferralAsyncWithHttpInfo(applicationId, campaignId, referralId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update referral Update the specified referral.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="campaignId">The ID of the campaign. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="referralId">The ID of the referral code.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Referral>> UpdateReferralAsyncWithHttpInfo (long applicationId, long campaignId, string referralId, UpdateReferral body)
        {
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->UpdateReferral");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateReferral");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignId", TalonOne.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("referralId", TalonOne.Client.ClientUtils.ParameterToString(referralId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Referral>("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReferral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update role Update a specific role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>RoleV2</returns>
        public RoleV2 UpdateRoleV2 (long roleId, RoleV2Base body)
        {
             TalonOne.Client.ApiResponse<RoleV2> localVarResponse = UpdateRoleV2WithHttpInfo(roleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update role Update a specific role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of RoleV2</returns>
        public TalonOne.Client.ApiResponse< RoleV2 > UpdateRoleV2WithHttpInfo (long roleId, RoleV2Base body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateRoleV2");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleId", TalonOne.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< RoleV2 >("/v2/roles/{roleId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRoleV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update role Update a specific role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of RoleV2</returns>
        public async System.Threading.Tasks.Task<RoleV2> UpdateRoleV2Async (long roleId, RoleV2Base body)
        {
             TalonOne.Client.ApiResponse<RoleV2> localVarResponse = await UpdateRoleV2AsyncWithHttpInfo(roleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update role Update a specific role.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of role.  **Note**: To find the ID of a role, use the [List roles](/management-api#tag/Roles/operation/listAllRolesV2) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (RoleV2)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<RoleV2>> UpdateRoleV2AsyncWithHttpInfo (long roleId, RoleV2Base body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateRoleV2");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("roleId", TalonOne.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<RoleV2>("/v2/roles/{roleId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRoleV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update store Update store details for a specific store ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Store</returns>
        public Store UpdateStore (long applicationId, string storeId, NewStore body)
        {
             TalonOne.Client.ApiResponse<Store> localVarResponse = UpdateStoreWithHttpInfo(applicationId, storeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update store Update store details for a specific store ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of Store</returns>
        public TalonOne.Client.ApiResponse< Store > UpdateStoreWithHttpInfo (long applicationId, string storeId, NewStore body)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'storeId' when calling ManagementApi->UpdateStore");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateStore");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("storeId", TalonOne.Client.ClientUtils.ParameterToString(storeId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Store >("/v1/applications/{applicationId}/stores/{storeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update store Update store details for a specific store ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> UpdateStoreAsync (long applicationId, string storeId, NewStore body)
        {
             TalonOne.Client.ApiResponse<Store> localVarResponse = await UpdateStoreAsyncWithHttpInfo(applicationId, storeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update store Update store details for a specific store ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The ID of the Application. It is displayed in your Talon.One deployment URL.</param>
        /// <param name="storeId">The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint. </param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<Store>> UpdateStoreAsyncWithHttpInfo (long applicationId, string storeId, NewStore body)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'storeId' when calling ManagementApi->UpdateStore");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateStore");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", TalonOne.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("storeId", TalonOne.Client.ClientUtils.ParameterToString(storeId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Store>("/v1/applications/{applicationId}/stores/{storeId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user Update the details of a specific user.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>User</returns>
        public User UpdateUser (long userId, UpdateUser body)
        {
             TalonOne.Client.ApiResponse<User> localVarResponse = UpdateUserWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user Update the details of a specific user.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of User</returns>
        public TalonOne.Client.ApiResponse< User > UpdateUserWithHttpInfo (long userId, UpdateUser body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateUser");

            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TalonOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TalonOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< User >("/v1/users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user Update the details of a specific user.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync (long userId, UpdateUser body)
        {
             TalonOne.Client.ApiResponse<User> localVarResponse = await UpdateUserAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user Update the details of a specific user.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<TalonOne.Client.ApiResponse<User>> UpdateUserAsyncWithHttpInfo (long userId, UpdateUser body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new TalonOne.Client.ApiException(400, "Missing required parameter 'body' when calling ManagementApi->UpdateUser");


            TalonOne.Client.RequestOptions localVarRequestOptions = new TalonOne.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", TalonOne.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (management_key) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (manager_auth) required
            if (
                !String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")) && (
                    !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization") ||
                    localVarRequestOptions.HeaderParameters["Authorization"].Count == 0
                )
            )
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<User>("/v1/users/{userId}", localVarRequestOptions, this.Configuration);


            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
