/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Customer specific information about loyalty points.
    /// </summary>
    [DataContract]
    public partial class LoyaltyProgramLedgers :  IEquatable<LoyaltyProgramLedgers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyProgramLedgers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoyaltyProgramLedgers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyProgramLedgers" /> class.
        /// </summary>
        /// <param name="title">Visible name of loyalty program (required).</param>
        /// <param name="name">Internal name of loyalty program (required).</param>
        /// <param name="ledger">ledger (required).</param>
        /// <param name="subLedgers">A map containing a list of all loyalty subledger balances.</param>
        public LoyaltyProgramLedgers(string title = default(string), string name = default(string), LoyaltyProgramBalance ledger = default(LoyaltyProgramBalance), Dictionary<string, LoyaltyProgramBalance> subLedgers = default(Dictionary<string, LoyaltyProgramBalance>))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for LoyaltyProgramLedgers and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for LoyaltyProgramLedgers and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "ledger" is required (not null)
            if (ledger == null)
            {
                throw new InvalidDataException("ledger is a required property for LoyaltyProgramLedgers and cannot be null");
            }
            else
            {
                this.Ledger = ledger;
            }
            
            this.SubLedgers = subLedgers;
        }
        
        /// <summary>
        /// Visible name of loyalty program
        /// </summary>
        /// <value>Visible name of loyalty program</value>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Internal name of loyalty program
        /// </summary>
        /// <value>Internal name of loyalty program</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Ledger
        /// </summary>
        [DataMember(Name="ledger", EmitDefaultValue=true)]
        public LoyaltyProgramBalance Ledger { get; set; }

        /// <summary>
        /// A map containing a list of all loyalty subledger balances
        /// </summary>
        /// <value>A map containing a list of all loyalty subledger balances</value>
        [DataMember(Name="subLedgers", EmitDefaultValue=false)]
        public Dictionary<string, LoyaltyProgramBalance> SubLedgers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoyaltyProgramLedgers {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ledger: ").Append(Ledger).Append("\n");
            sb.Append("  SubLedgers: ").Append(SubLedgers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoyaltyProgramLedgers);
        }

        /// <summary>
        /// Returns true if LoyaltyProgramLedgers instances are equal
        /// </summary>
        /// <param name="input">Instance of LoyaltyProgramLedgers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyProgramLedgers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Ledger == input.Ledger ||
                    (this.Ledger != null &&
                    this.Ledger.Equals(input.Ledger))
                ) && 
                (
                    this.SubLedgers == input.SubLedgers ||
                    this.SubLedgers != null &&
                    input.SubLedgers != null &&
                    this.SubLedgers.SequenceEqual(input.SubLedgers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Ledger != null)
                    hashCode = hashCode * 59 + this.Ledger.GetHashCode();
                if (this.SubLedgers != null)
                    hashCode = hashCode * 59 + this.SubLedgers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
