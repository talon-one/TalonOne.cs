/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// CreateTemplateCampaign
    /// </summary>
    [DataContract]
    public partial class CreateTemplateCampaign :  IEquatable<CreateTemplateCampaign>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTemplateCampaign" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTemplateCampaign() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTemplateCampaign" /> class.
        /// </summary>
        /// <param name="name">A user-facing name for this campaign. (required).</param>
        /// <param name="description">A detailed description of the campaign..</param>
        /// <param name="templateId">The ID of the Campaign Template which will be used in order to create the Campaign. (required).</param>
        /// <param name="campaignAttributesOverrides">Custom Campaign Attributes. If the the Campaign Template defines the same values, they will be overridden..</param>
        /// <param name="templateParamValues">Actual values to replace the template placeholder values in the Ruleset bindings. Values for all Template Parameters must be provided..</param>
        /// <param name="limitOverrides">Limits for this Campaign. If the Campaign Template or Application define default values for the same limits, they will be overridden..</param>
        public CreateTemplateCampaign(string name = default(string), string description = default(string), int templateId = default(int), Object campaignAttributesOverrides = default(Object), List<Binding> templateParamValues = default(List<Binding>), List<LimitConfig> limitOverrides = default(List<LimitConfig>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateTemplateCampaign and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new InvalidDataException("templateId is a required property for CreateTemplateCampaign and cannot be null");
            }
            else
            {
                this.TemplateId = templateId;
            }
            
            this.Description = description;
            this.CampaignAttributesOverrides = campaignAttributesOverrides;
            this.TemplateParamValues = templateParamValues;
            this.LimitOverrides = limitOverrides;
        }
        
        /// <summary>
        /// A user-facing name for this campaign.
        /// </summary>
        /// <value>A user-facing name for this campaign.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// A detailed description of the campaign.
        /// </summary>
        /// <value>A detailed description of the campaign.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the Campaign Template which will be used in order to create the Campaign.
        /// </summary>
        /// <value>The ID of the Campaign Template which will be used in order to create the Campaign.</value>
        [DataMember(Name="templateId", EmitDefaultValue=true)]
        public int TemplateId { get; set; }

        /// <summary>
        /// Custom Campaign Attributes. If the the Campaign Template defines the same values, they will be overridden.
        /// </summary>
        /// <value>Custom Campaign Attributes. If the the Campaign Template defines the same values, they will be overridden.</value>
        [DataMember(Name="campaignAttributesOverrides", EmitDefaultValue=false)]
        public Object CampaignAttributesOverrides { get; set; }

        /// <summary>
        /// Actual values to replace the template placeholder values in the Ruleset bindings. Values for all Template Parameters must be provided.
        /// </summary>
        /// <value>Actual values to replace the template placeholder values in the Ruleset bindings. Values for all Template Parameters must be provided.</value>
        [DataMember(Name="templateParamValues", EmitDefaultValue=false)]
        public List<Binding> TemplateParamValues { get; set; }

        /// <summary>
        /// Limits for this Campaign. If the Campaign Template or Application define default values for the same limits, they will be overridden.
        /// </summary>
        /// <value>Limits for this Campaign. If the Campaign Template or Application define default values for the same limits, they will be overridden.</value>
        [DataMember(Name="limitOverrides", EmitDefaultValue=false)]
        public List<LimitConfig> LimitOverrides { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTemplateCampaign {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  CampaignAttributesOverrides: ").Append(CampaignAttributesOverrides).Append("\n");
            sb.Append("  TemplateParamValues: ").Append(TemplateParamValues).Append("\n");
            sb.Append("  LimitOverrides: ").Append(LimitOverrides).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTemplateCampaign);
        }

        /// <summary>
        /// Returns true if CreateTemplateCampaign instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTemplateCampaign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTemplateCampaign input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.CampaignAttributesOverrides == input.CampaignAttributesOverrides ||
                    (this.CampaignAttributesOverrides != null &&
                    this.CampaignAttributesOverrides.Equals(input.CampaignAttributesOverrides))
                ) && 
                (
                    this.TemplateParamValues == input.TemplateParamValues ||
                    this.TemplateParamValues != null &&
                    input.TemplateParamValues != null &&
                    this.TemplateParamValues.SequenceEqual(input.TemplateParamValues)
                ) && 
                (
                    this.LimitOverrides == input.LimitOverrides ||
                    this.LimitOverrides != null &&
                    input.LimitOverrides != null &&
                    this.LimitOverrides.SequenceEqual(input.LimitOverrides)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.CampaignAttributesOverrides != null)
                    hashCode = hashCode * 59 + this.CampaignAttributesOverrides.GetHashCode();
                if (this.TemplateParamValues != null)
                    hashCode = hashCode * 59 + this.TemplateParamValues.GetHashCode();
                if (this.LimitOverrides != null)
                    hashCode = hashCode * 59 + this.LimitOverrides.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            
            yield break;
        }
    }

}
