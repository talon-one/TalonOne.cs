/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using TalonOne.Client;
using TalonOne.Api;
using TalonOne.Model;

namespace TalonOne.Test
{
    /// <summary>
    ///  Class for testing IntegrationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IntegrationApiTests : IDisposable
    {
        private IntegrationApi instance;

        public IntegrationApiTests()
        {
            instance = new IntegrationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IntegrationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' IntegrationApi
            //Assert.IsType(typeof(IntegrationApi), instance, "instance is a IntegrationApi");
        }

        
        /// <summary>
        /// Test CreateAudienceV2
        /// </summary>
        [Fact]
        public void CreateAudienceV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewAudience body = null;
            //var response = instance.CreateAudienceV2(body);
            //Assert.IsType<Audience> (response, "response is Audience");
        }
        
        /// <summary>
        /// Test CreateCouponReservation
        /// </summary>
        [Fact]
        public void CreateCouponReservationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string couponValue = null;
            //CouponReservations body = null;
            //var response = instance.CreateCouponReservation(couponValue, body);
            //Assert.IsType<Coupon> (response, "response is Coupon");
        }
        
        /// <summary>
        /// Test CreateReferral
        /// </summary>
        [Fact]
        public void CreateReferralTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewReferral body = null;
            //var response = instance.CreateReferral(body);
            //Assert.IsType<Referral> (response, "response is Referral");
        }
        
        /// <summary>
        /// Test CreateReferralsForMultipleAdvocates
        /// </summary>
        [Fact]
        public void CreateReferralsForMultipleAdvocatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewReferralsForMultipleAdvocates body = null;
            //string silent = null;
            //var response = instance.CreateReferralsForMultipleAdvocates(body, silent);
            //Assert.IsType<InlineResponse201> (response, "response is InlineResponse201");
        }
        
        /// <summary>
        /// Test DeleteAudienceMembershipsV2
        /// </summary>
        [Fact]
        public void DeleteAudienceMembershipsV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int audienceId = null;
            //instance.DeleteAudienceMembershipsV2(audienceId);
            
        }
        
        /// <summary>
        /// Test DeleteAudienceV2
        /// </summary>
        [Fact]
        public void DeleteAudienceV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int audienceId = null;
            //instance.DeleteAudienceV2(audienceId);
            
        }
        
        /// <summary>
        /// Test DeleteCouponReservation
        /// </summary>
        [Fact]
        public void DeleteCouponReservationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string couponValue = null;
            //CouponReservations body = null;
            //instance.DeleteCouponReservation(couponValue, body);
            
        }
        
        /// <summary>
        /// Test DeleteCustomerData
        /// </summary>
        [Fact]
        public void DeleteCustomerDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string integrationId = null;
            //instance.DeleteCustomerData(integrationId);
            
        }
        
        /// <summary>
        /// Test GetCustomerInventory
        /// </summary>
        [Fact]
        public void GetCustomerInventoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string integrationId = null;
            //bool? profile = null;
            //bool? referrals = null;
            //bool? coupons = null;
            //bool? loyalty = null;
            //bool? giveaways = null;
            //DateTime? loyaltyProjectionEndDate = null;
            //var response = instance.GetCustomerInventory(integrationId, profile, referrals, coupons, loyalty, giveaways, loyaltyProjectionEndDate);
            //Assert.IsType<CustomerInventory> (response, "response is CustomerInventory");
        }
        
        /// <summary>
        /// Test GetCustomerSession
        /// </summary>
        [Fact]
        public void GetCustomerSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerSessionId = null;
            //var response = instance.GetCustomerSession(customerSessionId);
            //Assert.IsType<IntegrationCustomerSessionResponse> (response, "response is IntegrationCustomerSessionResponse");
        }
        
        /// <summary>
        /// Test GetReservedCustomers
        /// </summary>
        [Fact]
        public void GetReservedCustomersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string couponValue = null;
            //var response = instance.GetReservedCustomers(couponValue);
            //Assert.IsType<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test ReturnCartItems
        /// </summary>
        [Fact]
        public void ReturnCartItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerSessionId = null;
            //ReturnIntegrationRequest body = null;
            //bool? dry = null;
            //var response = instance.ReturnCartItems(customerSessionId, body, dry);
            //Assert.IsType<IntegrationStateV2> (response, "response is IntegrationStateV2");
        }
        
        /// <summary>
        /// Test TrackEvent
        /// </summary>
        [Fact]
        public void TrackEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewEvent body = null;
            //bool? dry = null;
            //var response = instance.TrackEvent(body, dry);
            //Assert.IsType<IntegrationState> (response, "response is IntegrationState");
        }
        
        /// <summary>
        /// Test UpdateAudienceCustomersAttributes
        /// </summary>
        [Fact]
        public void UpdateAudienceCustomersAttributesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int audienceId = null;
            //Object body = null;
            //instance.UpdateAudienceCustomersAttributes(audienceId, body);
            
        }
        
        /// <summary>
        /// Test UpdateAudienceV2
        /// </summary>
        [Fact]
        public void UpdateAudienceV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int audienceId = null;
            //UpdateAudience body = null;
            //var response = instance.UpdateAudienceV2(audienceId, body);
            //Assert.IsType<Audience> (response, "response is Audience");
        }
        
        /// <summary>
        /// Test UpdateCustomerProfileAudiences
        /// </summary>
        [Fact]
        public void UpdateCustomerProfileAudiencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CustomerProfileAudienceRequest body = null;
            //instance.UpdateCustomerProfileAudiences(body);
            
        }
        
        /// <summary>
        /// Test UpdateCustomerProfileV2
        /// </summary>
        [Fact]
        public void UpdateCustomerProfileV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string integrationId = null;
            //CustomerProfileIntegrationRequestV2 body = null;
            //bool? runRuleEngine = null;
            //bool? dry = null;
            //var response = instance.UpdateCustomerProfileV2(integrationId, body, runRuleEngine, dry);
            //Assert.IsType<IntegrationStateV2> (response, "response is IntegrationStateV2");
        }
        
        /// <summary>
        /// Test UpdateCustomerProfilesV2
        /// </summary>
        [Fact]
        public void UpdateCustomerProfilesV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MultipleCustomerProfileIntegrationRequest body = null;
            //string silent = null;
            //var response = instance.UpdateCustomerProfilesV2(body, silent);
            //Assert.IsType<MultipleCustomerProfileIntegrationResponseV2> (response, "response is MultipleCustomerProfileIntegrationResponseV2");
        }
        
        /// <summary>
        /// Test UpdateCustomerSessionV2
        /// </summary>
        [Fact]
        public void UpdateCustomerSessionV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerSessionId = null;
            //IntegrationRequest body = null;
            //bool? dry = null;
            //var response = instance.UpdateCustomerSessionV2(customerSessionId, body, dry);
            //Assert.IsType<IntegrationStateV2> (response, "response is IntegrationStateV2");
        }
        
    }

}
