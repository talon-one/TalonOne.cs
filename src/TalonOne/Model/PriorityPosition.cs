/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The campaign priority.
    /// </summary>
    [DataContract]
    public partial class PriorityPosition :  IEquatable<PriorityPosition>, IValidatableObject
    {
        /// <summary>
        /// The name of the priority set where the campaign is located.
        /// </summary>
        /// <value>The name of the priority set where the campaign is located.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SetEnum
        {
            /// <summary>
            /// Enum Universal for value: universal
            /// </summary>
            [EnumMember(Value = "universal")]
            Universal = 1,

            /// <summary>
            /// Enum Stackable for value: stackable
            /// </summary>
            [EnumMember(Value = "stackable")]
            Stackable = 2,

            /// <summary>
            /// Enum Exclusive for value: exclusive
            /// </summary>
            [EnumMember(Value = "exclusive")]
            Exclusive = 3

        }

        /// <summary>
        /// The name of the priority set where the campaign is located.
        /// </summary>
        /// <value>The name of the priority set where the campaign is located.</value>
        [DataMember(Name="set", EmitDefaultValue=false)]
        public SetEnum Set { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriorityPosition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PriorityPosition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriorityPosition" /> class.
        /// </summary>
        /// <param name="set">The name of the priority set where the campaign is located. (required) (default to SetEnum.Universal).</param>
        /// <param name="position">The position of the campaign in the priority order starting from 1. (required).</param>
        public PriorityPosition(SetEnum set = SetEnum.Universal, int position = default(int))
        {
            this.Set = set;
            this.Position = position;
        }
        
        /// <summary>
        /// The position of the campaign in the priority order starting from 1.
        /// </summary>
        /// <value>The position of the campaign in the priority order starting from 1.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int Position { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriorityPosition {\n");
            sb.Append("  Set: ").Append(Set).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriorityPosition);
        }

        /// <summary>
        /// Returns true if PriorityPosition instances are equal
        /// </summary>
        /// <param name="input">Instance of PriorityPosition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriorityPosition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Set == input.Set ||
                    this.Set.Equals(input.Set)
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Set.GetHashCode();
                hashCode = hashCode * 59 + this.Position.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
