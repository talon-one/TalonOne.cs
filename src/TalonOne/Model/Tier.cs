/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Tier
    /// </summary>
    [DataContract]
    public partial class Tier :  IEquatable<Tier>, IValidatableObject
    {
        /// <summary>
        /// Customers&#39;s tier downgrade policy. - &#x60;one_down&#x60;: Once the tier expires and if the user doesn&#39;t have enough points to stay in the tier, the user is downgraded one tier down. - &#x60;balance_based&#x60;: Once the tier expires, the user&#39;s tier is evaluated based on the amount of active points the user has at this instant. 
        /// </summary>
        /// <value>Customers&#39;s tier downgrade policy. - &#x60;one_down&#x60;: Once the tier expires and if the user doesn&#39;t have enough points to stay in the tier, the user is downgraded one tier down. - &#x60;balance_based&#x60;: Once the tier expires, the user&#39;s tier is evaluated based on the amount of active points the user has at this instant. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DowngradePolicyEnum
        {
            /// <summary>
            /// Enum Onedown for value: one_down
            /// </summary>
            [EnumMember(Value = "one_down")]
            Onedown = 1,

            /// <summary>
            /// Enum Balancebased for value: balance_based
            /// </summary>
            [EnumMember(Value = "balance_based")]
            Balancebased = 2

        }

        /// <summary>
        /// Customers&#39;s tier downgrade policy. - &#x60;one_down&#x60;: Once the tier expires and if the user doesn&#39;t have enough points to stay in the tier, the user is downgraded one tier down. - &#x60;balance_based&#x60;: Once the tier expires, the user&#39;s tier is evaluated based on the amount of active points the user has at this instant. 
        /// </summary>
        /// <value>Customers&#39;s tier downgrade policy. - &#x60;one_down&#x60;: Once the tier expires and if the user doesn&#39;t have enough points to stay in the tier, the user is downgraded one tier down. - &#x60;balance_based&#x60;: Once the tier expires, the user&#39;s tier is evaluated based on the amount of active points the user has at this instant. </value>
        [DataMember(Name="downgradePolicy", EmitDefaultValue=false)]
        public DowngradePolicyEnum? DowngradePolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Tier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tier" /> class.
        /// </summary>
        /// <param name="id">The internal ID of the tier. (required).</param>
        /// <param name="name">The name of the tier. (required).</param>
        /// <param name="startDate">Date and time when the customer moved to this tier. This value uses the loyalty program&#39;s time zone setting..</param>
        /// <param name="expiryDate">Date when tier level expires in the RFC3339 format (in the Loyalty Program&#39;s timezone)..</param>
        /// <param name="downgradePolicy">Customers&#39;s tier downgrade policy. - &#x60;one_down&#x60;: Once the tier expires and if the user doesn&#39;t have enough points to stay in the tier, the user is downgraded one tier down. - &#x60;balance_based&#x60;: Once the tier expires, the user&#39;s tier is evaluated based on the amount of active points the user has at this instant. .</param>
        public Tier(int id = default(int), string name = default(string), DateTime startDate = default(DateTime), DateTime expiryDate = default(DateTime), DowngradePolicyEnum? downgradePolicy = default(DowngradePolicyEnum?))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Tier and cannot be null");
            this.StartDate = startDate;
            this.ExpiryDate = expiryDate;
            this.DowngradePolicy = downgradePolicy;
        }
        
        /// <summary>
        /// The internal ID of the tier.
        /// </summary>
        /// <value>The internal ID of the tier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The name of the tier.
        /// </summary>
        /// <value>The name of the tier.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Date and time when the customer moved to this tier. This value uses the loyalty program&#39;s time zone setting.
        /// </summary>
        /// <value>Date and time when the customer moved to this tier. This value uses the loyalty program&#39;s time zone setting.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Date when tier level expires in the RFC3339 format (in the Loyalty Program&#39;s timezone).
        /// </summary>
        /// <value>Date when tier level expires in the RFC3339 format (in the Loyalty Program&#39;s timezone).</value>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        public DateTime ExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tier {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  DowngradePolicy: ").Append(DowngradePolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tier);
        }

        /// <summary>
        /// Returns true if Tier instances are equal
        /// </summary>
        /// <param name="input">Instance of Tier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.DowngradePolicy == input.DowngradePolicy ||
                    this.DowngradePolicy.Equals(input.DowngradePolicy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                hashCode = hashCode * 59 + this.DowngradePolicy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
