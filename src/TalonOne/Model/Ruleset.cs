/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Ruleset
    /// </summary>
    [DataContract]
    public partial class Ruleset :  IEquatable<Ruleset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ruleset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Ruleset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ruleset" /> class.
        /// </summary>
        /// <param name="id">Unique ID for this entity. (required).</param>
        /// <param name="created">The exact moment this entity was created. (required).</param>
        /// <param name="userId">The ID of the account that owns this entity. (required).</param>
        /// <param name="rules">Set of rules to apply. (required).</param>
        /// <param name="bindings">An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array. (required).</param>
        /// <param name="rbVersion">The version of the rulebuilder used to create this ruleset..</param>
        /// <param name="activate">Indicates whether this created ruleset should be activated for the campaign that owns it..</param>
        /// <param name="campaignId">The ID of the campaign that owns this entity..</param>
        /// <param name="templateId">The ID of the campaign template that owns this entity..</param>
        /// <param name="activatedAt">Timestamp indicating when this Ruleset was activated..</param>
        public Ruleset(int id = default(int), DateTime created = default(DateTime), int userId = default(int), List<Rule> rules = default(List<Rule>), List<Binding> bindings = default(List<Binding>), string rbVersion = default(string), bool activate = default(bool), int campaignId = default(int), int templateId = default(int), DateTime activatedAt = default(DateTime))
        {
            this.Id = id;
            this.Created = created;
            this.UserId = userId;
            // to ensure "rules" is required (not null)
            this.Rules = rules ?? throw new ArgumentNullException("rules is a required property for Ruleset and cannot be null");
            // to ensure "bindings" is required (not null)
            this.Bindings = bindings ?? throw new ArgumentNullException("bindings is a required property for Ruleset and cannot be null");
            this.RbVersion = rbVersion;
            this.Activate = activate;
            this.CampaignId = campaignId;
            this.TemplateId = templateId;
            this.ActivatedAt = activatedAt;
        }
        
        /// <summary>
        /// Unique ID for this entity.
        /// </summary>
        /// <value>Unique ID for this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The exact moment this entity was created.
        /// </summary>
        /// <value>The exact moment this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The ID of the account that owns this entity.
        /// </summary>
        /// <value>The ID of the account that owns this entity.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int UserId { get; set; }

        /// <summary>
        /// Set of rules to apply.
        /// </summary>
        /// <value>Set of rules to apply.</value>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<Rule> Rules { get; set; }

        /// <summary>
        /// An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.
        /// </summary>
        /// <value>An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.</value>
        [DataMember(Name="bindings", EmitDefaultValue=false)]
        public List<Binding> Bindings { get; set; }

        /// <summary>
        /// The version of the rulebuilder used to create this ruleset.
        /// </summary>
        /// <value>The version of the rulebuilder used to create this ruleset.</value>
        [DataMember(Name="rbVersion", EmitDefaultValue=false)]
        public string RbVersion { get; set; }

        /// <summary>
        /// Indicates whether this created ruleset should be activated for the campaign that owns it.
        /// </summary>
        /// <value>Indicates whether this created ruleset should be activated for the campaign that owns it.</value>
        [DataMember(Name="activate", EmitDefaultValue=false)]
        public bool Activate { get; set; }

        /// <summary>
        /// The ID of the campaign that owns this entity.
        /// </summary>
        /// <value>The ID of the campaign that owns this entity.</value>
        [DataMember(Name="campaignId", EmitDefaultValue=false)]
        public int CampaignId { get; set; }

        /// <summary>
        /// The ID of the campaign template that owns this entity.
        /// </summary>
        /// <value>The ID of the campaign template that owns this entity.</value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public int TemplateId { get; set; }

        /// <summary>
        /// Timestamp indicating when this Ruleset was activated.
        /// </summary>
        /// <value>Timestamp indicating when this Ruleset was activated.</value>
        [DataMember(Name="activatedAt", EmitDefaultValue=false)]
        public DateTime ActivatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ruleset {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Bindings: ").Append(Bindings).Append("\n");
            sb.Append("  RbVersion: ").Append(RbVersion).Append("\n");
            sb.Append("  Activate: ").Append(Activate).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  ActivatedAt: ").Append(ActivatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ruleset);
        }

        /// <summary>
        /// Returns true if Ruleset instances are equal
        /// </summary>
        /// <param name="input">Instance of Ruleset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ruleset input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                ) && 
                (
                    this.Bindings == input.Bindings ||
                    this.Bindings != null &&
                    input.Bindings != null &&
                    this.Bindings.SequenceEqual(input.Bindings)
                ) && 
                (
                    this.RbVersion == input.RbVersion ||
                    (this.RbVersion != null &&
                    this.RbVersion.Equals(input.RbVersion))
                ) && 
                (
                    this.Activate == input.Activate ||
                    this.Activate.Equals(input.Activate)
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    this.CampaignId.Equals(input.CampaignId)
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    this.TemplateId.Equals(input.TemplateId)
                ) && 
                (
                    this.ActivatedAt == input.ActivatedAt ||
                    (this.ActivatedAt != null &&
                    this.ActivatedAt.Equals(input.ActivatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Rules != null)
                    hashCode = hashCode * 59 + this.Rules.GetHashCode();
                if (this.Bindings != null)
                    hashCode = hashCode * 59 + this.Bindings.GetHashCode();
                if (this.RbVersion != null)
                    hashCode = hashCode * 59 + this.RbVersion.GetHashCode();
                hashCode = hashCode * 59 + this.Activate.GetHashCode();
                hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.ActivatedAt != null)
                    hashCode = hashCode * 59 + this.ActivatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
