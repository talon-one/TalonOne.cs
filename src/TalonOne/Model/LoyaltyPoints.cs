/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TalonOne.Client.SwaggerDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Points to add or deduct
    /// </summary>
    [DataContract]
    public partial class LoyaltyPoints :  IEquatable<LoyaltyPoints>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyPoints" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoyaltyPoints() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyPoints" /> class.
        /// </summary>
        /// <param name="points">Amount of loyalty points (required).</param>
        /// <param name="name">Allows to specify a name for the addition or deduction.</param>
        /// <param name="expiryDuration">Indicates the duration after which the added loyalty points should expire. The format is a number followed by one letter indicating the unit, like &#39;1h&#39; or &#39;40m&#39; or &#39;30d&#39;..</param>
        /// <param name="subLedgerID">This specifies if we are adding loyalty points to the main ledger or a subledger.</param>
        public LoyaltyPoints(decimal? points = default(decimal?), string name = default(string), string expiryDuration = default(string), string subLedgerID = default(string))
        {
            // to ensure "points" is required (not null)
            if (points == null)
            {
                throw new InvalidDataException("points is a required property for LoyaltyPoints and cannot be null");
            }
            else
            {
                this.Points = points;
            }
            this.Name = name;
            this.ExpiryDuration = expiryDuration;
            this.SubLedgerID = subLedgerID;
        }
        
        /// <summary>
        /// Amount of loyalty points
        /// </summary>
        /// <value>Amount of loyalty points</value>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public decimal? Points { get; set; }

        /// <summary>
        /// Allows to specify a name for the addition or deduction
        /// </summary>
        /// <value>Allows to specify a name for the addition or deduction</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates the duration after which the added loyalty points should expire. The format is a number followed by one letter indicating the unit, like &#39;1h&#39; or &#39;40m&#39; or &#39;30d&#39;.
        /// </summary>
        /// <value>Indicates the duration after which the added loyalty points should expire. The format is a number followed by one letter indicating the unit, like &#39;1h&#39; or &#39;40m&#39; or &#39;30d&#39;.</value>
        [DataMember(Name="expiryDuration", EmitDefaultValue=false)]
        public string ExpiryDuration { get; set; }

        /// <summary>
        /// This specifies if we are adding loyalty points to the main ledger or a subledger
        /// </summary>
        /// <value>This specifies if we are adding loyalty points to the main ledger or a subledger</value>
        [DataMember(Name="subLedgerID", EmitDefaultValue=false)]
        public string SubLedgerID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoyaltyPoints {\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExpiryDuration: ").Append(ExpiryDuration).Append("\n");
            sb.Append("  SubLedgerID: ").Append(SubLedgerID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoyaltyPoints);
        }

        /// <summary>
        /// Returns true if LoyaltyPoints instances are equal
        /// </summary>
        /// <param name="input">Instance of LoyaltyPoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyPoints input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ExpiryDuration == input.ExpiryDuration ||
                    (this.ExpiryDuration != null &&
                    this.ExpiryDuration.Equals(input.ExpiryDuration))
                ) && 
                (
                    this.SubLedgerID == input.SubLedgerID ||
                    (this.SubLedgerID != null &&
                    this.SubLedgerID.Equals(input.SubLedgerID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ExpiryDuration != null)
                    hashCode = hashCode * 59 + this.ExpiryDuration.GetHashCode();
                if (this.SubLedgerID != null)
                    hashCode = hashCode * 59 + this.SubLedgerID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
