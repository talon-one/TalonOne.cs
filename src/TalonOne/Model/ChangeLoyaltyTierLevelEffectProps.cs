/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// The properties specific to the \&quot;changeLoyaltyTierLevel\&quot; effect. This is triggered whenever the user&#39;s loyalty tier is upgraded due to a validated rule that contained an \&quot;addLoyaltyPoints\&quot; effect. 
    /// </summary>
    [DataContract]
    public partial class ChangeLoyaltyTierLevelEffectProps :  IEquatable<ChangeLoyaltyTierLevelEffectProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeLoyaltyTierLevelEffectProps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChangeLoyaltyTierLevelEffectProps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeLoyaltyTierLevelEffectProps" /> class.
        /// </summary>
        /// <param name="ruleTitle">The title of the rule that triggered the tier upgrade. (required).</param>
        /// <param name="programId">The ID of the loyalty program where these points were added. (required).</param>
        /// <param name="subLedgerId">The ID of the subledger within the loyalty program where these points were added. (required).</param>
        /// <param name="previousTierName">The name of the tier from which the user was upgraded..</param>
        /// <param name="newTierName">The name of the tier to which the user has been upgraded. (required).</param>
        /// <param name="expiryDate">The expiration date of the new tier..</param>
        public ChangeLoyaltyTierLevelEffectProps(string ruleTitle = default(string), int programId = default(int), string subLedgerId = default(string), string previousTierName = default(string), string newTierName = default(string), DateTime expiryDate = default(DateTime))
        {
            // to ensure "ruleTitle" is required (not null)
            this.RuleTitle = ruleTitle ?? throw new ArgumentNullException("ruleTitle is a required property for ChangeLoyaltyTierLevelEffectProps and cannot be null");
            this.ProgramId = programId;
            // to ensure "subLedgerId" is required (not null)
            this.SubLedgerId = subLedgerId ?? throw new ArgumentNullException("subLedgerId is a required property for ChangeLoyaltyTierLevelEffectProps and cannot be null");
            // to ensure "newTierName" is required (not null)
            this.NewTierName = newTierName ?? throw new ArgumentNullException("newTierName is a required property for ChangeLoyaltyTierLevelEffectProps and cannot be null");
            this.PreviousTierName = previousTierName;
            this.ExpiryDate = expiryDate;
        }
        
        /// <summary>
        /// The title of the rule that triggered the tier upgrade.
        /// </summary>
        /// <value>The title of the rule that triggered the tier upgrade.</value>
        [DataMember(Name="ruleTitle", EmitDefaultValue=false)]
        public string RuleTitle { get; set; }

        /// <summary>
        /// The ID of the loyalty program where these points were added.
        /// </summary>
        /// <value>The ID of the loyalty program where these points were added.</value>
        [DataMember(Name="programId", EmitDefaultValue=false)]
        public int ProgramId { get; set; }

        /// <summary>
        /// The ID of the subledger within the loyalty program where these points were added.
        /// </summary>
        /// <value>The ID of the subledger within the loyalty program where these points were added.</value>
        [DataMember(Name="subLedgerId", EmitDefaultValue=false)]
        public string SubLedgerId { get; set; }

        /// <summary>
        /// The name of the tier from which the user was upgraded.
        /// </summary>
        /// <value>The name of the tier from which the user was upgraded.</value>
        [DataMember(Name="previousTierName", EmitDefaultValue=false)]
        public string PreviousTierName { get; set; }

        /// <summary>
        /// The name of the tier to which the user has been upgraded.
        /// </summary>
        /// <value>The name of the tier to which the user has been upgraded.</value>
        [DataMember(Name="newTierName", EmitDefaultValue=false)]
        public string NewTierName { get; set; }

        /// <summary>
        /// The expiration date of the new tier.
        /// </summary>
        /// <value>The expiration date of the new tier.</value>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        public DateTime ExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeLoyaltyTierLevelEffectProps {\n");
            sb.Append("  RuleTitle: ").Append(RuleTitle).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  SubLedgerId: ").Append(SubLedgerId).Append("\n");
            sb.Append("  PreviousTierName: ").Append(PreviousTierName).Append("\n");
            sb.Append("  NewTierName: ").Append(NewTierName).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeLoyaltyTierLevelEffectProps);
        }

        /// <summary>
        /// Returns true if ChangeLoyaltyTierLevelEffectProps instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeLoyaltyTierLevelEffectProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeLoyaltyTierLevelEffectProps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RuleTitle == input.RuleTitle ||
                    (this.RuleTitle != null &&
                    this.RuleTitle.Equals(input.RuleTitle))
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    this.ProgramId.Equals(input.ProgramId)
                ) && 
                (
                    this.SubLedgerId == input.SubLedgerId ||
                    (this.SubLedgerId != null &&
                    this.SubLedgerId.Equals(input.SubLedgerId))
                ) && 
                (
                    this.PreviousTierName == input.PreviousTierName ||
                    (this.PreviousTierName != null &&
                    this.PreviousTierName.Equals(input.PreviousTierName))
                ) && 
                (
                    this.NewTierName == input.NewTierName ||
                    (this.NewTierName != null &&
                    this.NewTierName.Equals(input.NewTierName))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleTitle != null)
                    hashCode = hashCode * 59 + this.RuleTitle.GetHashCode();
                hashCode = hashCode * 59 + this.ProgramId.GetHashCode();
                if (this.SubLedgerId != null)
                    hashCode = hashCode * 59 + this.SubLedgerId.GetHashCode();
                if (this.PreviousTierName != null)
                    hashCode = hashCode * 59 + this.PreviousTierName.GetHashCode();
                if (this.NewTierName != null)
                    hashCode = hashCode * 59 + this.NewTierName.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
