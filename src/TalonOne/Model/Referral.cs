/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Referral
    /// </summary>
    [DataContract]
    public partial class Referral :  IEquatable<Referral>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Referral" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Referral() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Referral" /> class.
        /// </summary>
        /// <param name="id">Unique ID for this entity. (required).</param>
        /// <param name="created">The exact moment this entity was created. (required).</param>
        /// <param name="campaignId">ID of the campaign from which the referral received the referral code. (required).</param>
        /// <param name="advocateProfileIntegrationId">The Integration Id of the Advocate&#39;s Profile (required).</param>
        /// <param name="friendProfileIntegrationId">An optional Integration ID of the Friend&#39;s Profile.</param>
        /// <param name="startDate">Timestamp at which point the referral code becomes valid..</param>
        /// <param name="expiryDate">Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative..</param>
        /// <param name="code">The actual referral code. (required).</param>
        /// <param name="usageCounter">The number of times this referral code has been successfully used. (required).</param>
        /// <param name="usageLimit">The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply.  (required).</param>
        public Referral(int id = default(int), DateTime created = default(DateTime), int campaignId = default(int), string advocateProfileIntegrationId = default(string), string friendProfileIntegrationId = default(string), DateTime startDate = default(DateTime), DateTime expiryDate = default(DateTime), string code = default(string), int usageCounter = default(int), int usageLimit = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Referral and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new InvalidDataException("created is a required property for Referral and cannot be null");
            }
            else
            {
                this.Created = created;
            }
            
            // to ensure "campaignId" is required (not null)
            if (campaignId == null)
            {
                throw new InvalidDataException("campaignId is a required property for Referral and cannot be null");
            }
            else
            {
                this.CampaignId = campaignId;
            }
            
            // to ensure "advocateProfileIntegrationId" is required (not null)
            if (advocateProfileIntegrationId == null)
            {
                throw new InvalidDataException("advocateProfileIntegrationId is a required property for Referral and cannot be null");
            }
            else
            {
                this.AdvocateProfileIntegrationId = advocateProfileIntegrationId;
            }
            
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for Referral and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            
            // to ensure "usageCounter" is required (not null)
            if (usageCounter == null)
            {
                throw new InvalidDataException("usageCounter is a required property for Referral and cannot be null");
            }
            else
            {
                this.UsageCounter = usageCounter;
            }
            
            // to ensure "usageLimit" is required (not null)
            if (usageLimit == null)
            {
                throw new InvalidDataException("usageLimit is a required property for Referral and cannot be null");
            }
            else
            {
                this.UsageLimit = usageLimit;
            }
            
            this.FriendProfileIntegrationId = friendProfileIntegrationId;
            this.StartDate = startDate;
            this.ExpiryDate = expiryDate;
        }
        
        /// <summary>
        /// Unique ID for this entity.
        /// </summary>
        /// <value>Unique ID for this entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The exact moment this entity was created.
        /// </summary>
        /// <value>The exact moment this entity was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// ID of the campaign from which the referral received the referral code.
        /// </summary>
        /// <value>ID of the campaign from which the referral received the referral code.</value>
        [DataMember(Name="campaignId", EmitDefaultValue=false)]
        public int CampaignId { get; set; }

        /// <summary>
        /// The Integration Id of the Advocate&#39;s Profile
        /// </summary>
        /// <value>The Integration Id of the Advocate&#39;s Profile</value>
        [DataMember(Name="advocateProfileIntegrationId", EmitDefaultValue=false)]
        public string AdvocateProfileIntegrationId { get; set; }

        /// <summary>
        /// An optional Integration ID of the Friend&#39;s Profile
        /// </summary>
        /// <value>An optional Integration ID of the Friend&#39;s Profile</value>
        [DataMember(Name="friendProfileIntegrationId", EmitDefaultValue=false)]
        public string FriendProfileIntegrationId { get; set; }

        /// <summary>
        /// Timestamp at which point the referral code becomes valid.
        /// </summary>
        /// <value>Timestamp at which point the referral code becomes valid.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.
        /// </summary>
        /// <value>Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.</value>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        public DateTime ExpiryDate { get; set; }

        /// <summary>
        /// The actual referral code.
        /// </summary>
        /// <value>The actual referral code.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The number of times this referral code has been successfully used.
        /// </summary>
        /// <value>The number of times this referral code has been successfully used.</value>
        [DataMember(Name="usageCounter", EmitDefaultValue=false)]
        public int UsageCounter { get; set; }

        /// <summary>
        /// The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply. 
        /// </summary>
        /// <value>The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply. </value>
        [DataMember(Name="usageLimit", EmitDefaultValue=false)]
        public int UsageLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Referral {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  AdvocateProfileIntegrationId: ").Append(AdvocateProfileIntegrationId).Append("\n");
            sb.Append("  FriendProfileIntegrationId: ").Append(FriendProfileIntegrationId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  UsageCounter: ").Append(UsageCounter).Append("\n");
            sb.Append("  UsageLimit: ").Append(UsageLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Referral);
        }

        /// <summary>
        /// Returns true if Referral instances are equal
        /// </summary>
        /// <param name="input">Instance of Referral to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Referral input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.AdvocateProfileIntegrationId == input.AdvocateProfileIntegrationId ||
                    (this.AdvocateProfileIntegrationId != null &&
                    this.AdvocateProfileIntegrationId.Equals(input.AdvocateProfileIntegrationId))
                ) && 
                (
                    this.FriendProfileIntegrationId == input.FriendProfileIntegrationId ||
                    (this.FriendProfileIntegrationId != null &&
                    this.FriendProfileIntegrationId.Equals(input.FriendProfileIntegrationId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.UsageCounter == input.UsageCounter ||
                    (this.UsageCounter != null &&
                    this.UsageCounter.Equals(input.UsageCounter))
                ) && 
                (
                    this.UsageLimit == input.UsageLimit ||
                    (this.UsageLimit != null &&
                    this.UsageLimit.Equals(input.UsageLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CampaignId != null)
                    hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                if (this.AdvocateProfileIntegrationId != null)
                    hashCode = hashCode * 59 + this.AdvocateProfileIntegrationId.GetHashCode();
                if (this.FriendProfileIntegrationId != null)
                    hashCode = hashCode * 59 + this.FriendProfileIntegrationId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.UsageCounter != null)
                    hashCode = hashCode * 59 + this.UsageCounter.GetHashCode();
                if (this.UsageLimit != null)
                    hashCode = hashCode * 59 + this.UsageLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) minLength
            if(this.Code != null && this.Code.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 4.", new [] { "Code" });
            }

            // UsageLimit (int) minimum
            if(this.UsageLimit < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UsageLimit, must be a value greater than or equal to 0.", new [] { "UsageLimit" });
            }

            yield break;
        }
    }

}
