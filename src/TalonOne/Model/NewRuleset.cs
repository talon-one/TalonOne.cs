/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// NewRuleset
    /// </summary>
    [DataContract]
    public partial class NewRuleset :  IEquatable<NewRuleset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewRuleset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewRuleset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewRuleset" /> class.
        /// </summary>
        /// <param name="rules">Set of rules to apply. (required).</param>
        /// <param name="bindings">An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array. (required).</param>
        /// <param name="rbVersion">A string indicating which version of the rulebuilder was used to create this ruleset..</param>
        /// <param name="activate">A boolean indicating whether this newly created ruleset should also be activated for the campaign owns it.</param>
        public NewRuleset(List<Rule> rules = default(List<Rule>), List<Binding> bindings = default(List<Binding>), string rbVersion = default(string), bool activate = default(bool))
        {
            // to ensure "rules" is required (not null)
            if (rules == null)
            {
                throw new InvalidDataException("rules is a required property for NewRuleset and cannot be null");
            }
            else
            {
                this.Rules = rules;
            }
            
            // to ensure "bindings" is required (not null)
            if (bindings == null)
            {
                throw new InvalidDataException("bindings is a required property for NewRuleset and cannot be null");
            }
            else
            {
                this.Bindings = bindings;
            }
            
            this.RbVersion = rbVersion;
            this.Activate = activate;
        }
        
        /// <summary>
        /// Set of rules to apply.
        /// </summary>
        /// <value>Set of rules to apply.</value>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<Rule> Rules { get; set; }

        /// <summary>
        /// An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.
        /// </summary>
        /// <value>An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.</value>
        [DataMember(Name="bindings", EmitDefaultValue=false)]
        public List<Binding> Bindings { get; set; }

        /// <summary>
        /// A string indicating which version of the rulebuilder was used to create this ruleset.
        /// </summary>
        /// <value>A string indicating which version of the rulebuilder was used to create this ruleset.</value>
        [DataMember(Name="rbVersion", EmitDefaultValue=false)]
        public string RbVersion { get; set; }

        /// <summary>
        /// A boolean indicating whether this newly created ruleset should also be activated for the campaign owns it
        /// </summary>
        /// <value>A boolean indicating whether this newly created ruleset should also be activated for the campaign owns it</value>
        [DataMember(Name="activate", EmitDefaultValue=false)]
        public bool Activate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewRuleset {\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Bindings: ").Append(Bindings).Append("\n");
            sb.Append("  RbVersion: ").Append(RbVersion).Append("\n");
            sb.Append("  Activate: ").Append(Activate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewRuleset);
        }

        /// <summary>
        /// Returns true if NewRuleset instances are equal
        /// </summary>
        /// <param name="input">Instance of NewRuleset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewRuleset input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                ) && 
                (
                    this.Bindings == input.Bindings ||
                    this.Bindings != null &&
                    input.Bindings != null &&
                    this.Bindings.SequenceEqual(input.Bindings)
                ) && 
                (
                    this.RbVersion == input.RbVersion ||
                    (this.RbVersion != null &&
                    this.RbVersion.Equals(input.RbVersion))
                ) && 
                (
                    this.Activate == input.Activate ||
                    (this.Activate != null &&
                    this.Activate.Equals(input.Activate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rules != null)
                    hashCode = hashCode * 59 + this.Rules.GetHashCode();
                if (this.Bindings != null)
                    hashCode = hashCode * 59 + this.Bindings.GetHashCode();
                if (this.RbVersion != null)
                    hashCode = hashCode * 59 + this.RbVersion.GetHashCode();
                if (this.Activate != null)
                    hashCode = hashCode * 59 + this.Activate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
