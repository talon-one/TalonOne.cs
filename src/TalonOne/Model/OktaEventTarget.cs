/* 
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * 
 * Contact: devs@talon.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TalonOne.Client.OpenAPIDateConverter;

namespace TalonOne.Model
{
    /// <summary>
    /// Target of the specific Okta event.
    /// </summary>
    [DataContract]
    public partial class OktaEventTarget :  IEquatable<OktaEventTarget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OktaEventTarget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OktaEventTarget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OktaEventTarget" /> class.
        /// </summary>
        /// <param name="type">Type of the event target. (required).</param>
        /// <param name="alternateId">Identifier of the event target, depending on its type. (required).</param>
        /// <param name="displayName">Display name of the event target. (required).</param>
        public OktaEventTarget(string type = default(string), string alternateId = default(string), string displayName = default(string))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for OktaEventTarget and cannot be null");
            // to ensure "alternateId" is required (not null)
            this.AlternateId = alternateId ?? throw new ArgumentNullException("alternateId is a required property for OktaEventTarget and cannot be null");
            // to ensure "displayName" is required (not null)
            this.DisplayName = displayName ?? throw new ArgumentNullException("displayName is a required property for OktaEventTarget and cannot be null");
        }
        
        /// <summary>
        /// Type of the event target.
        /// </summary>
        /// <value>Type of the event target.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Identifier of the event target, depending on its type.
        /// </summary>
        /// <value>Identifier of the event target, depending on its type.</value>
        [DataMember(Name="alternateId", EmitDefaultValue=false)]
        public string AlternateId { get; set; }

        /// <summary>
        /// Display name of the event target.
        /// </summary>
        /// <value>Display name of the event target.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OktaEventTarget {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AlternateId: ").Append(AlternateId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OktaEventTarget);
        }

        /// <summary>
        /// Returns true if OktaEventTarget instances are equal
        /// </summary>
        /// <param name="input">Instance of OktaEventTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OktaEventTarget input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AlternateId == input.AlternateId ||
                    (this.AlternateId != null &&
                    this.AlternateId.Equals(input.AlternateId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AlternateId != null)
                    hashCode = hashCode * 59 + this.AlternateId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
